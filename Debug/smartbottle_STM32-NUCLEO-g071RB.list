
smartbottle_STM32-NUCLEO-g071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003384  0800cb78  0800cb78  0001cb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fefc  0800fefc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fefc  0800fefc  0001fefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff04  0800ff04  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff04  0800ff04  0001ff04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff08  0800ff08  0001ff08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ff0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  2000020c  08010118  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  08010118  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bef4  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004294  00000000  00000000  0003c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  00040400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136b  00000000  00000000  00041d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e272  00000000  00000000  0004306b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022470  00000000  00000000  000612dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b76fd  00000000  00000000  0008374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cd0  00000000  00000000  0013ae4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00141b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000020c 	.word	0x2000020c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cb5c 	.word	0x0800cb5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000210 	.word	0x20000210
 8000100:	0800cb5c 	.word	0x0800cb5c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fda1 	bl	8001f80 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fcf1 	bl	8001e30 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd93 	bl	8001f80 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd89 	bl	8001f80 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd19 	bl	8001eb4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd0f 	bl	8001eb4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fc45 	bl	8000d3c <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fbd1 	bl	8000c64 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fc37 	bl	8000d3c <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc2d 	bl	8000d3c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fbdd 	bl	8000cb0 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fbd3 	bl	8000cb0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f002 fd40 	bl	8002ffc <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f002 fd3b 	bl	8002ffc <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	d434      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 800058e:	469b      	mov	fp, r3
 8000590:	4653      	mov	r3, sl
 8000592:	465a      	mov	r2, fp
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83b      	bhi.n	800061c <__udivmoddi4+0xc4>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e079      	b.n	800069e <__udivmoddi4+0x146>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e076      	b.n	80006a4 <__udivmoddi4+0x14c>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e029      	b.n	8000624 <__udivmoddi4+0xcc>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	469b      	mov	fp, r3
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4652      	mov	r2, sl
 8000602:	40da      	lsrs	r2, r3
 8000604:	4641      	mov	r1, r8
 8000606:	0013      	movs	r3, r2
 8000608:	464a      	mov	r2, r9
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	4642      	mov	r2, r8
 8000610:	431f      	orrs	r7, r3
 8000612:	4653      	mov	r3, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	001e      	movs	r6, r3
 8000618:	42af      	cmp	r7, r5
 800061a:	d9c3      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	4643      	mov	r3, r8
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0d8      	beq.n	80005dc <__udivmoddi4+0x84>
 800062a:	07fb      	lsls	r3, r7, #31
 800062c:	0872      	lsrs	r2, r6, #1
 800062e:	431a      	orrs	r2, r3
 8000630:	4646      	mov	r6, r8
 8000632:	087b      	lsrs	r3, r7, #1
 8000634:	e00e      	b.n	8000654 <__udivmoddi4+0xfc>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d101      	bne.n	800063e <__udivmoddi4+0xe6>
 800063a:	42a2      	cmp	r2, r4
 800063c:	d80c      	bhi.n	8000658 <__udivmoddi4+0x100>
 800063e:	1aa4      	subs	r4, r4, r2
 8000640:	419d      	sbcs	r5, r3
 8000642:	2001      	movs	r0, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2100      	movs	r1, #0
 800064a:	3e01      	subs	r6, #1
 800064c:	1824      	adds	r4, r4, r0
 800064e:	414d      	adcs	r5, r1
 8000650:	2e00      	cmp	r6, #0
 8000652:	d006      	beq.n	8000662 <__udivmoddi4+0x10a>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d9ee      	bls.n	8000636 <__udivmoddi4+0xde>
 8000658:	3e01      	subs	r6, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__udivmoddi4+0xfc>
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	465b      	mov	r3, fp
 8000668:	1900      	adds	r0, r0, r4
 800066a:	4169      	adcs	r1, r5
 800066c:	2b00      	cmp	r3, #0
 800066e:	db24      	blt.n	80006ba <__udivmoddi4+0x162>
 8000670:	002b      	movs	r3, r5
 8000672:	465a      	mov	r2, fp
 8000674:	4644      	mov	r4, r8
 8000676:	40d3      	lsrs	r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	40e2      	lsrs	r2, r4
 800067c:	001c      	movs	r4, r3
 800067e:	465b      	mov	r3, fp
 8000680:	0015      	movs	r5, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	db2a      	blt.n	80006dc <__udivmoddi4+0x184>
 8000686:	0026      	movs	r6, r4
 8000688:	409e      	lsls	r6, r3
 800068a:	0033      	movs	r3, r6
 800068c:	0026      	movs	r6, r4
 800068e:	4647      	mov	r7, r8
 8000690:	40be      	lsls	r6, r7
 8000692:	0032      	movs	r2, r6
 8000694:	1a80      	subs	r0, r0, r2
 8000696:	4199      	sbcs	r1, r3
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	9101      	str	r1, [sp, #4]
 800069c:	e79e      	b.n	80005dc <__udivmoddi4+0x84>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d8bc      	bhi.n	800061c <__udivmoddi4+0xc4>
 80006a2:	e782      	b.n	80005aa <__udivmoddi4+0x52>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	9100      	str	r1, [sp, #0]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	e785      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	4646      	mov	r6, r8
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0023      	movs	r3, r4
 80006c8:	40f3      	lsrs	r3, r6
 80006ca:	4644      	mov	r4, r8
 80006cc:	4313      	orrs	r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	40e2      	lsrs	r2, r4
 80006d2:	001c      	movs	r4, r3
 80006d4:	465b      	mov	r3, fp
 80006d6:	0015      	movs	r5, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dad4      	bge.n	8000686 <__udivmoddi4+0x12e>
 80006dc:	4642      	mov	r2, r8
 80006de:	002f      	movs	r7, r5
 80006e0:	2320      	movs	r3, #32
 80006e2:	0026      	movs	r6, r4
 80006e4:	4097      	lsls	r7, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	40de      	lsrs	r6, r3
 80006ea:	003b      	movs	r3, r7
 80006ec:	4333      	orrs	r3, r6
 80006ee:	e7cd      	b.n	800068c <__udivmoddi4+0x134>

080006f0 <__aeabi_fadd>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	4647      	mov	r7, r8
 80006f4:	46ce      	mov	lr, r9
 80006f6:	024a      	lsls	r2, r1, #9
 80006f8:	0243      	lsls	r3, r0, #9
 80006fa:	0045      	lsls	r5, r0, #1
 80006fc:	0fc4      	lsrs	r4, r0, #31
 80006fe:	0a50      	lsrs	r0, r2, #9
 8000700:	4680      	mov	r8, r0
 8000702:	0048      	lsls	r0, r1, #1
 8000704:	0a5b      	lsrs	r3, r3, #9
 8000706:	0e00      	lsrs	r0, r0, #24
 8000708:	0992      	lsrs	r2, r2, #6
 800070a:	4694      	mov	ip, r2
 800070c:	b580      	push	{r7, lr}
 800070e:	001e      	movs	r6, r3
 8000710:	4681      	mov	r9, r0
 8000712:	0002      	movs	r2, r0
 8000714:	0e2d      	lsrs	r5, r5, #24
 8000716:	00df      	lsls	r7, r3, #3
 8000718:	0fc9      	lsrs	r1, r1, #31
 800071a:	428c      	cmp	r4, r1
 800071c:	d024      	beq.n	8000768 <__aeabi_fadd+0x78>
 800071e:	1a28      	subs	r0, r5, r0
 8000720:	2800      	cmp	r0, #0
 8000722:	dd0e      	ble.n	8000742 <__aeabi_fadd+0x52>
 8000724:	2a00      	cmp	r2, #0
 8000726:	d13e      	bne.n	80007a6 <__aeabi_fadd+0xb6>
 8000728:	4662      	mov	r2, ip
 800072a:	2a00      	cmp	r2, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x40>
 800072e:	e0fd      	b.n	800092c <__aeabi_fadd+0x23c>
 8000730:	1e42      	subs	r2, r0, #1
 8000732:	2801      	cmp	r0, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x48>
 8000736:	e137      	b.n	80009a8 <__aeabi_fadd+0x2b8>
 8000738:	28ff      	cmp	r0, #255	; 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x4e>
 800073c:	e0a9      	b.n	8000892 <__aeabi_fadd+0x1a2>
 800073e:	0010      	movs	r0, r2
 8000740:	e039      	b.n	80007b6 <__aeabi_fadd+0xc6>
 8000742:	2800      	cmp	r0, #0
 8000744:	d063      	beq.n	800080e <__aeabi_fadd+0x11e>
 8000746:	464b      	mov	r3, r9
 8000748:	1b52      	subs	r2, r2, r5
 800074a:	2d00      	cmp	r5, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x60>
 800074e:	e0e0      	b.n	8000912 <__aeabi_fadd+0x222>
 8000750:	2f00      	cmp	r7, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x66>
 8000754:	e0ce      	b.n	80008f4 <__aeabi_fadd+0x204>
 8000756:	1e53      	subs	r3, r2, #1
 8000758:	2a01      	cmp	r2, #1
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x6e>
 800075c:	e155      	b.n	8000a0a <__aeabi_fadd+0x31a>
 800075e:	2aff      	cmp	r2, #255	; 0xff
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x74>
 8000762:	e094      	b.n	800088e <__aeabi_fadd+0x19e>
 8000764:	001a      	movs	r2, r3
 8000766:	e0d9      	b.n	800091c <__aeabi_fadd+0x22c>
 8000768:	1a2a      	subs	r2, r5, r0
 800076a:	2a00      	cmp	r2, #0
 800076c:	dc00      	bgt.n	8000770 <__aeabi_fadd+0x80>
 800076e:	e099      	b.n	80008a4 <__aeabi_fadd+0x1b4>
 8000770:	2800      	cmp	r0, #0
 8000772:	d062      	beq.n	800083a <__aeabi_fadd+0x14a>
 8000774:	2dff      	cmp	r5, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x8a>
 8000778:	e08b      	b.n	8000892 <__aeabi_fadd+0x1a2>
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	4661      	mov	r1, ip
 800077e:	04db      	lsls	r3, r3, #19
 8000780:	4319      	orrs	r1, r3
 8000782:	468c      	mov	ip, r1
 8000784:	2a1b      	cmp	r2, #27
 8000786:	dc00      	bgt.n	800078a <__aeabi_fadd+0x9a>
 8000788:	e0d2      	b.n	8000930 <__aeabi_fadd+0x240>
 800078a:	2301      	movs	r3, #1
 800078c:	19db      	adds	r3, r3, r7
 800078e:	015a      	lsls	r2, r3, #5
 8000790:	d56a      	bpl.n	8000868 <__aeabi_fadd+0x178>
 8000792:	3501      	adds	r5, #1
 8000794:	2dff      	cmp	r5, #255	; 0xff
 8000796:	d05b      	beq.n	8000850 <__aeabi_fadd+0x160>
 8000798:	2201      	movs	r2, #1
 800079a:	49a3      	ldr	r1, [pc, #652]	; (8000a28 <__aeabi_fadd+0x338>)
 800079c:	401a      	ands	r2, r3
 800079e:	085b      	lsrs	r3, r3, #1
 80007a0:	400b      	ands	r3, r1
 80007a2:	4313      	orrs	r3, r2
 80007a4:	e01c      	b.n	80007e0 <__aeabi_fadd+0xf0>
 80007a6:	2dff      	cmp	r5, #255	; 0xff
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0xbc>
 80007aa:	e072      	b.n	8000892 <__aeabi_fadd+0x1a2>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	4662      	mov	r2, ip
 80007b0:	04db      	lsls	r3, r3, #19
 80007b2:	431a      	orrs	r2, r3
 80007b4:	4694      	mov	ip, r2
 80007b6:	281b      	cmp	r0, #27
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0xcc>
 80007ba:	e090      	b.n	80008de <__aeabi_fadd+0x1ee>
 80007bc:	2301      	movs	r3, #1
 80007be:	1afb      	subs	r3, r7, r3
 80007c0:	015a      	lsls	r2, r3, #5
 80007c2:	d551      	bpl.n	8000868 <__aeabi_fadd+0x178>
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	099e      	lsrs	r6, r3, #6
 80007c8:	0030      	movs	r0, r6
 80007ca:	f002 fbf9 	bl	8002fc0 <__clzsi2>
 80007ce:	0033      	movs	r3, r6
 80007d0:	3805      	subs	r0, #5
 80007d2:	4083      	lsls	r3, r0
 80007d4:	4285      	cmp	r5, r0
 80007d6:	dc00      	bgt.n	80007da <__aeabi_fadd+0xea>
 80007d8:	e075      	b.n	80008c6 <__aeabi_fadd+0x1d6>
 80007da:	4a94      	ldr	r2, [pc, #592]	; (8000a2c <__aeabi_fadd+0x33c>)
 80007dc:	1a2d      	subs	r5, r5, r0
 80007de:	4013      	ands	r3, r2
 80007e0:	075a      	lsls	r2, r3, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fadd+0xfe>
 80007e4:	220f      	movs	r2, #15
 80007e6:	401a      	ands	r2, r3
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fadd+0xfe>
 80007ec:	3304      	adds	r3, #4
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	d53c      	bpl.n	800086c <__aeabi_fadd+0x17c>
 80007f2:	1c68      	adds	r0, r5, #1
 80007f4:	2dfe      	cmp	r5, #254	; 0xfe
 80007f6:	d02b      	beq.n	8000850 <__aeabi_fadd+0x160>
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	0a5e      	lsrs	r6, r3, #9
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	05c0      	lsls	r0, r0, #23
 8000800:	4330      	orrs	r0, r6
 8000802:	07e4      	lsls	r4, r4, #31
 8000804:	4320      	orrs	r0, r4
 8000806:	bcc0      	pop	{r6, r7}
 8000808:	46b9      	mov	r9, r7
 800080a:	46b0      	mov	r8, r6
 800080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080e:	20fe      	movs	r0, #254	; 0xfe
 8000810:	1c6a      	adds	r2, r5, #1
 8000812:	4210      	tst	r0, r2
 8000814:	d172      	bne.n	80008fc <__aeabi_fadd+0x20c>
 8000816:	2d00      	cmp	r5, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x12c>
 800081a:	e0ae      	b.n	800097a <__aeabi_fadd+0x28a>
 800081c:	2f00      	cmp	r7, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x132>
 8000820:	e0ec      	b.n	80009fc <__aeabi_fadd+0x30c>
 8000822:	4663      	mov	r3, ip
 8000824:	2000      	movs	r0, #0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0e9      	beq.n	80007fe <__aeabi_fadd+0x10e>
 800082a:	1afb      	subs	r3, r7, r3
 800082c:	015a      	lsls	r2, r3, #5
 800082e:	d400      	bmi.n	8000832 <__aeabi_fadd+0x142>
 8000830:	e0f3      	b.n	8000a1a <__aeabi_fadd+0x32a>
 8000832:	4663      	mov	r3, ip
 8000834:	000c      	movs	r4, r1
 8000836:	1bdb      	subs	r3, r3, r7
 8000838:	e7d2      	b.n	80007e0 <__aeabi_fadd+0xf0>
 800083a:	4661      	mov	r1, ip
 800083c:	2900      	cmp	r1, #0
 800083e:	d05b      	beq.n	80008f8 <__aeabi_fadd+0x208>
 8000840:	1e51      	subs	r1, r2, #1
 8000842:	2a01      	cmp	r2, #1
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x158>
 8000846:	e0a7      	b.n	8000998 <__aeabi_fadd+0x2a8>
 8000848:	2aff      	cmp	r2, #255	; 0xff
 800084a:	d022      	beq.n	8000892 <__aeabi_fadd+0x1a2>
 800084c:	000a      	movs	r2, r1
 800084e:	e799      	b.n	8000784 <__aeabi_fadd+0x94>
 8000850:	20ff      	movs	r0, #255	; 0xff
 8000852:	2600      	movs	r6, #0
 8000854:	e7d3      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000856:	21fe      	movs	r1, #254	; 0xfe
 8000858:	1c6a      	adds	r2, r5, #1
 800085a:	4211      	tst	r1, r2
 800085c:	d073      	beq.n	8000946 <__aeabi_fadd+0x256>
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d0f6      	beq.n	8000850 <__aeabi_fadd+0x160>
 8000862:	0015      	movs	r5, r2
 8000864:	4467      	add	r7, ip
 8000866:	087b      	lsrs	r3, r7, #1
 8000868:	075a      	lsls	r2, r3, #29
 800086a:	d1bb      	bne.n	80007e4 <__aeabi_fadd+0xf4>
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	2dff      	cmp	r5, #255	; 0xff
 8000870:	d00f      	beq.n	8000892 <__aeabi_fadd+0x1a2>
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	0a5e      	lsrs	r6, r3, #9
 8000876:	b2e8      	uxtb	r0, r5
 8000878:	e7c1      	b.n	80007fe <__aeabi_fadd+0x10e>
 800087a:	4662      	mov	r2, ip
 800087c:	2a00      	cmp	r2, #0
 800087e:	d008      	beq.n	8000892 <__aeabi_fadd+0x1a2>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	03d2      	lsls	r2, r2, #15
 8000884:	4213      	tst	r3, r2
 8000886:	d004      	beq.n	8000892 <__aeabi_fadd+0x1a2>
 8000888:	4640      	mov	r0, r8
 800088a:	4210      	tst	r0, r2
 800088c:	d101      	bne.n	8000892 <__aeabi_fadd+0x1a2>
 800088e:	000c      	movs	r4, r1
 8000890:	4643      	mov	r3, r8
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0dc      	beq.n	8000850 <__aeabi_fadd+0x160>
 8000896:	2680      	movs	r6, #128	; 0x80
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	431e      	orrs	r6, r3
 800089c:	0276      	lsls	r6, r6, #9
 800089e:	20ff      	movs	r0, #255	; 0xff
 80008a0:	0a76      	lsrs	r6, r6, #9
 80008a2:	e7ac      	b.n	80007fe <__aeabi_fadd+0x10e>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	d0d6      	beq.n	8000856 <__aeabi_fadd+0x166>
 80008a8:	1b42      	subs	r2, r0, r5
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d05c      	beq.n	8000968 <__aeabi_fadd+0x278>
 80008ae:	28ff      	cmp	r0, #255	; 0xff
 80008b0:	d0ee      	beq.n	8000890 <__aeabi_fadd+0x1a0>
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	04db      	lsls	r3, r3, #19
 80008b6:	431f      	orrs	r7, r3
 80008b8:	2a1b      	cmp	r2, #27
 80008ba:	dc00      	bgt.n	80008be <__aeabi_fadd+0x1ce>
 80008bc:	e082      	b.n	80009c4 <__aeabi_fadd+0x2d4>
 80008be:	2301      	movs	r3, #1
 80008c0:	464d      	mov	r5, r9
 80008c2:	4463      	add	r3, ip
 80008c4:	e763      	b.n	800078e <__aeabi_fadd+0x9e>
 80008c6:	2220      	movs	r2, #32
 80008c8:	1b40      	subs	r0, r0, r5
 80008ca:	3001      	adds	r0, #1
 80008cc:	1a12      	subs	r2, r2, r0
 80008ce:	0019      	movs	r1, r3
 80008d0:	4093      	lsls	r3, r2
 80008d2:	40c1      	lsrs	r1, r0
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4193      	sbcs	r3, r2
 80008d8:	2500      	movs	r5, #0
 80008da:	430b      	orrs	r3, r1
 80008dc:	e780      	b.n	80007e0 <__aeabi_fadd+0xf0>
 80008de:	2320      	movs	r3, #32
 80008e0:	4661      	mov	r1, ip
 80008e2:	1a1b      	subs	r3, r3, r0
 80008e4:	4099      	lsls	r1, r3
 80008e6:	4662      	mov	r2, ip
 80008e8:	000b      	movs	r3, r1
 80008ea:	40c2      	lsrs	r2, r0
 80008ec:	1e59      	subs	r1, r3, #1
 80008ee:	418b      	sbcs	r3, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	e764      	b.n	80007be <__aeabi_fadd+0xce>
 80008f4:	000c      	movs	r4, r1
 80008f6:	4643      	mov	r3, r8
 80008f8:	0015      	movs	r5, r2
 80008fa:	e7b8      	b.n	800086e <__aeabi_fadd+0x17e>
 80008fc:	4663      	mov	r3, ip
 80008fe:	1afe      	subs	r6, r7, r3
 8000900:	0173      	lsls	r3, r6, #5
 8000902:	d445      	bmi.n	8000990 <__aeabi_fadd+0x2a0>
 8000904:	2e00      	cmp	r6, #0
 8000906:	d000      	beq.n	800090a <__aeabi_fadd+0x21a>
 8000908:	e75e      	b.n	80007c8 <__aeabi_fadd+0xd8>
 800090a:	2400      	movs	r4, #0
 800090c:	2000      	movs	r0, #0
 800090e:	2600      	movs	r6, #0
 8000910:	e775      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d0bb      	beq.n	800088e <__aeabi_fadd+0x19e>
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	04db      	lsls	r3, r3, #19
 800091a:	431f      	orrs	r7, r3
 800091c:	2a1b      	cmp	r2, #27
 800091e:	dd47      	ble.n	80009b0 <__aeabi_fadd+0x2c0>
 8000920:	2301      	movs	r3, #1
 8000922:	4662      	mov	r2, ip
 8000924:	000c      	movs	r4, r1
 8000926:	464d      	mov	r5, r9
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	e749      	b.n	80007c0 <__aeabi_fadd+0xd0>
 800092c:	0005      	movs	r5, r0
 800092e:	e79e      	b.n	800086e <__aeabi_fadd+0x17e>
 8000930:	4661      	mov	r1, ip
 8000932:	2320      	movs	r3, #32
 8000934:	40d1      	lsrs	r1, r2
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	4662      	mov	r2, ip
 800093a:	409a      	lsls	r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	4193      	sbcs	r3, r2
 8000942:	430b      	orrs	r3, r1
 8000944:	e722      	b.n	800078c <__aeabi_fadd+0x9c>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d146      	bne.n	80009d8 <__aeabi_fadd+0x2e8>
 800094a:	2f00      	cmp	r7, #0
 800094c:	d062      	beq.n	8000a14 <__aeabi_fadd+0x324>
 800094e:	4663      	mov	r3, ip
 8000950:	2000      	movs	r0, #0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fadd+0x268>
 8000956:	e752      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000958:	003b      	movs	r3, r7
 800095a:	4463      	add	r3, ip
 800095c:	015a      	lsls	r2, r3, #5
 800095e:	d583      	bpl.n	8000868 <__aeabi_fadd+0x178>
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <__aeabi_fadd+0x33c>)
 8000962:	3501      	adds	r5, #1
 8000964:	4013      	ands	r3, r2
 8000966:	e77f      	b.n	8000868 <__aeabi_fadd+0x178>
 8000968:	2f00      	cmp	r7, #0
 800096a:	d0c4      	beq.n	80008f6 <__aeabi_fadd+0x206>
 800096c:	1e53      	subs	r3, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d012      	beq.n	8000998 <__aeabi_fadd+0x2a8>
 8000972:	2aff      	cmp	r2, #255	; 0xff
 8000974:	d08c      	beq.n	8000890 <__aeabi_fadd+0x1a0>
 8000976:	001a      	movs	r2, r3
 8000978:	e79e      	b.n	80008b8 <__aeabi_fadd+0x1c8>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x290>
 800097e:	e77c      	b.n	800087a <__aeabi_fadd+0x18a>
 8000980:	4663      	mov	r3, ip
 8000982:	2b00      	cmp	r3, #0
 8000984:	d183      	bne.n	800088e <__aeabi_fadd+0x19e>
 8000986:	2680      	movs	r6, #128	; 0x80
 8000988:	2400      	movs	r4, #0
 800098a:	20ff      	movs	r0, #255	; 0xff
 800098c:	03f6      	lsls	r6, r6, #15
 800098e:	e736      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000990:	4663      	mov	r3, ip
 8000992:	000c      	movs	r4, r1
 8000994:	1bde      	subs	r6, r3, r7
 8000996:	e717      	b.n	80007c8 <__aeabi_fadd+0xd8>
 8000998:	003b      	movs	r3, r7
 800099a:	4463      	add	r3, ip
 800099c:	2501      	movs	r5, #1
 800099e:	015a      	lsls	r2, r3, #5
 80009a0:	d400      	bmi.n	80009a4 <__aeabi_fadd+0x2b4>
 80009a2:	e761      	b.n	8000868 <__aeabi_fadd+0x178>
 80009a4:	2502      	movs	r5, #2
 80009a6:	e6f7      	b.n	8000798 <__aeabi_fadd+0xa8>
 80009a8:	4663      	mov	r3, ip
 80009aa:	2501      	movs	r5, #1
 80009ac:	1afb      	subs	r3, r7, r3
 80009ae:	e707      	b.n	80007c0 <__aeabi_fadd+0xd0>
 80009b0:	2320      	movs	r3, #32
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	0038      	movs	r0, r7
 80009b6:	409f      	lsls	r7, r3
 80009b8:	003b      	movs	r3, r7
 80009ba:	40d0      	lsrs	r0, r2
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	4193      	sbcs	r3, r2
 80009c0:	4303      	orrs	r3, r0
 80009c2:	e7ae      	b.n	8000922 <__aeabi_fadd+0x232>
 80009c4:	2320      	movs	r3, #32
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	0039      	movs	r1, r7
 80009ca:	409f      	lsls	r7, r3
 80009cc:	003b      	movs	r3, r7
 80009ce:	40d1      	lsrs	r1, r2
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	4193      	sbcs	r3, r2
 80009d4:	430b      	orrs	r3, r1
 80009d6:	e773      	b.n	80008c0 <__aeabi_fadd+0x1d0>
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2ee>
 80009dc:	e758      	b.n	8000890 <__aeabi_fadd+0x1a0>
 80009de:	4662      	mov	r2, ip
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x2f6>
 80009e4:	e755      	b.n	8000892 <__aeabi_fadd+0x1a2>
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	03d2      	lsls	r2, r2, #15
 80009ea:	4213      	tst	r3, r2
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fadd+0x300>
 80009ee:	e750      	b.n	8000892 <__aeabi_fadd+0x1a2>
 80009f0:	4641      	mov	r1, r8
 80009f2:	4211      	tst	r1, r2
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fadd+0x308>
 80009f6:	e74c      	b.n	8000892 <__aeabi_fadd+0x1a2>
 80009f8:	4643      	mov	r3, r8
 80009fa:	e74a      	b.n	8000892 <__aeabi_fadd+0x1a2>
 80009fc:	4663      	mov	r3, ip
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d083      	beq.n	800090a <__aeabi_fadd+0x21a>
 8000a02:	000c      	movs	r4, r1
 8000a04:	4646      	mov	r6, r8
 8000a06:	2000      	movs	r0, #0
 8000a08:	e6f9      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	000c      	movs	r4, r1
 8000a0e:	1bdb      	subs	r3, r3, r7
 8000a10:	3501      	adds	r5, #1
 8000a12:	e6d5      	b.n	80007c0 <__aeabi_fadd+0xd0>
 8000a14:	4646      	mov	r6, r8
 8000a16:	2000      	movs	r0, #0
 8000a18:	e6f1      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fadd+0x330>
 8000a1e:	e723      	b.n	8000868 <__aeabi_fadd+0x178>
 8000a20:	2400      	movs	r4, #0
 8000a22:	2600      	movs	r6, #0
 8000a24:	e6eb      	b.n	80007fe <__aeabi_fadd+0x10e>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	7dffffff 	.word	0x7dffffff
 8000a2c:	fbffffff 	.word	0xfbffffff

08000a30 <__aeabi_fdiv>:
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	464f      	mov	r7, r9
 8000a34:	4646      	mov	r6, r8
 8000a36:	46d6      	mov	lr, sl
 8000a38:	0245      	lsls	r5, r0, #9
 8000a3a:	b5c0      	push	{r6, r7, lr}
 8000a3c:	0047      	lsls	r7, r0, #1
 8000a3e:	1c0c      	adds	r4, r1, #0
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	0e3f      	lsrs	r7, r7, #24
 8000a44:	0fc6      	lsrs	r6, r0, #31
 8000a46:	2f00      	cmp	r7, #0
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fdiv+0x1c>
 8000a4a:	e06f      	b.n	8000b2c <__aeabi_fdiv+0xfc>
 8000a4c:	2fff      	cmp	r7, #255	; 0xff
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fdiv+0x22>
 8000a50:	e074      	b.n	8000b3c <__aeabi_fdiv+0x10c>
 8000a52:	2300      	movs	r3, #0
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	4699      	mov	r9, r3
 8000a58:	469a      	mov	sl, r3
 8000a5a:	00ed      	lsls	r5, r5, #3
 8000a5c:	04d2      	lsls	r2, r2, #19
 8000a5e:	4315      	orrs	r5, r2
 8000a60:	3f7f      	subs	r7, #127	; 0x7f
 8000a62:	0263      	lsls	r3, r4, #9
 8000a64:	0a5b      	lsrs	r3, r3, #9
 8000a66:	4698      	mov	r8, r3
 8000a68:	0063      	lsls	r3, r4, #1
 8000a6a:	0e1b      	lsrs	r3, r3, #24
 8000a6c:	0fe4      	lsrs	r4, r4, #31
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d04d      	beq.n	8000b0e <__aeabi_fdiv+0xde>
 8000a72:	2bff      	cmp	r3, #255	; 0xff
 8000a74:	d045      	beq.n	8000b02 <__aeabi_fdiv+0xd2>
 8000a76:	4642      	mov	r2, r8
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	00d2      	lsls	r2, r2, #3
 8000a7c:	04c9      	lsls	r1, r1, #19
 8000a7e:	4311      	orrs	r1, r2
 8000a80:	4688      	mov	r8, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	3b7f      	subs	r3, #127	; 0x7f
 8000a86:	0031      	movs	r1, r6
 8000a88:	1aff      	subs	r7, r7, r3
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	4061      	eors	r1, r4
 8000a8e:	b2c9      	uxtb	r1, r1
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d900      	bls.n	8000a96 <__aeabi_fdiv+0x66>
 8000a94:	e0b8      	b.n	8000c08 <__aeabi_fdiv+0x1d8>
 8000a96:	4870      	ldr	r0, [pc, #448]	; (8000c58 <__aeabi_fdiv+0x228>)
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	58c3      	ldr	r3, [r0, r3]
 8000a9c:	469f      	mov	pc, r3
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	0026      	movs	r6, r4
 8000aa4:	4645      	mov	r5, r8
 8000aa6:	4692      	mov	sl, r2
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fdiv+0x80>
 8000aae:	e08d      	b.n	8000bcc <__aeabi_fdiv+0x19c>
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fdiv+0x86>
 8000ab4:	e0a1      	b.n	8000bfa <__aeabi_fdiv+0x1ca>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d018      	beq.n	8000aec <__aeabi_fdiv+0xbc>
 8000aba:	003b      	movs	r3, r7
 8000abc:	337f      	adds	r3, #127	; 0x7f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dd6d      	ble.n	8000b9e <__aeabi_fdiv+0x16e>
 8000ac2:	076a      	lsls	r2, r5, #29
 8000ac4:	d004      	beq.n	8000ad0 <__aeabi_fdiv+0xa0>
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	402a      	ands	r2, r5
 8000aca:	2a04      	cmp	r2, #4
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fdiv+0xa0>
 8000ace:	3504      	adds	r5, #4
 8000ad0:	012a      	lsls	r2, r5, #4
 8000ad2:	d503      	bpl.n	8000adc <__aeabi_fdiv+0xac>
 8000ad4:	4b61      	ldr	r3, [pc, #388]	; (8000c5c <__aeabi_fdiv+0x22c>)
 8000ad6:	401d      	ands	r5, r3
 8000ad8:	003b      	movs	r3, r7
 8000ada:	3380      	adds	r3, #128	; 0x80
 8000adc:	2bfe      	cmp	r3, #254	; 0xfe
 8000ade:	dd00      	ble.n	8000ae2 <__aeabi_fdiv+0xb2>
 8000ae0:	e074      	b.n	8000bcc <__aeabi_fdiv+0x19c>
 8000ae2:	01aa      	lsls	r2, r5, #6
 8000ae4:	0a52      	lsrs	r2, r2, #9
 8000ae6:	b2d8      	uxtb	r0, r3
 8000ae8:	e002      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000aea:	000e      	movs	r6, r1
 8000aec:	2000      	movs	r0, #0
 8000aee:	2200      	movs	r2, #0
 8000af0:	05c0      	lsls	r0, r0, #23
 8000af2:	07f6      	lsls	r6, r6, #31
 8000af4:	4310      	orrs	r0, r2
 8000af6:	4330      	orrs	r0, r6
 8000af8:	bce0      	pop	{r5, r6, r7}
 8000afa:	46ba      	mov	sl, r7
 8000afc:	46b1      	mov	r9, r6
 8000afe:	46a8      	mov	r8, r5
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	4643      	mov	r3, r8
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d13f      	bne.n	8000b88 <__aeabi_fdiv+0x158>
 8000b08:	2202      	movs	r2, #2
 8000b0a:	3fff      	subs	r7, #255	; 0xff
 8000b0c:	e003      	b.n	8000b16 <__aeabi_fdiv+0xe6>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12d      	bne.n	8000b70 <__aeabi_fdiv+0x140>
 8000b14:	2201      	movs	r2, #1
 8000b16:	0031      	movs	r1, r6
 8000b18:	464b      	mov	r3, r9
 8000b1a:	4061      	eors	r1, r4
 8000b1c:	b2c9      	uxtb	r1, r1
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d838      	bhi.n	8000b96 <__aeabi_fdiv+0x166>
 8000b24:	484e      	ldr	r0, [pc, #312]	; (8000c60 <__aeabi_fdiv+0x230>)
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	58c3      	ldr	r3, [r0, r3]
 8000b2a:	469f      	mov	pc, r3
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d113      	bne.n	8000b58 <__aeabi_fdiv+0x128>
 8000b30:	2304      	movs	r3, #4
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b03      	subs	r3, #3
 8000b36:	2700      	movs	r7, #0
 8000b38:	469a      	mov	sl, r3
 8000b3a:	e792      	b.n	8000a62 <__aeabi_fdiv+0x32>
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d105      	bne.n	8000b4c <__aeabi_fdiv+0x11c>
 8000b40:	2308      	movs	r3, #8
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b06      	subs	r3, #6
 8000b46:	27ff      	movs	r7, #255	; 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e78a      	b.n	8000a62 <__aeabi_fdiv+0x32>
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	4699      	mov	r9, r3
 8000b50:	3b09      	subs	r3, #9
 8000b52:	27ff      	movs	r7, #255	; 0xff
 8000b54:	469a      	mov	sl, r3
 8000b56:	e784      	b.n	8000a62 <__aeabi_fdiv+0x32>
 8000b58:	0028      	movs	r0, r5
 8000b5a:	f002 fa31 	bl	8002fc0 <__clzsi2>
 8000b5e:	2776      	movs	r7, #118	; 0x76
 8000b60:	1f43      	subs	r3, r0, #5
 8000b62:	409d      	lsls	r5, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	427f      	negs	r7, r7
 8000b68:	4699      	mov	r9, r3
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	1a3f      	subs	r7, r7, r0
 8000b6e:	e778      	b.n	8000a62 <__aeabi_fdiv+0x32>
 8000b70:	4640      	mov	r0, r8
 8000b72:	f002 fa25 	bl	8002fc0 <__clzsi2>
 8000b76:	4642      	mov	r2, r8
 8000b78:	1f43      	subs	r3, r0, #5
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	2376      	movs	r3, #118	; 0x76
 8000b7e:	425b      	negs	r3, r3
 8000b80:	4690      	mov	r8, r2
 8000b82:	1a1b      	subs	r3, r3, r0
 8000b84:	2200      	movs	r2, #0
 8000b86:	e77e      	b.n	8000a86 <__aeabi_fdiv+0x56>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	464a      	mov	r2, r9
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	4691      	mov	r9, r2
 8000b90:	33fc      	adds	r3, #252	; 0xfc
 8000b92:	2203      	movs	r2, #3
 8000b94:	e777      	b.n	8000a86 <__aeabi_fdiv+0x56>
 8000b96:	000e      	movs	r6, r1
 8000b98:	20ff      	movs	r0, #255	; 0xff
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	e7a8      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b1b      	cmp	r3, #27
 8000ba4:	dca2      	bgt.n	8000aec <__aeabi_fdiv+0xbc>
 8000ba6:	379e      	adds	r7, #158	; 0x9e
 8000ba8:	002a      	movs	r2, r5
 8000baa:	40bd      	lsls	r5, r7
 8000bac:	40da      	lsrs	r2, r3
 8000bae:	1e6b      	subs	r3, r5, #1
 8000bb0:	419d      	sbcs	r5, r3
 8000bb2:	4315      	orrs	r5, r2
 8000bb4:	076a      	lsls	r2, r5, #29
 8000bb6:	d004      	beq.n	8000bc2 <__aeabi_fdiv+0x192>
 8000bb8:	220f      	movs	r2, #15
 8000bba:	402a      	ands	r2, r5
 8000bbc:	2a04      	cmp	r2, #4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fdiv+0x192>
 8000bc0:	3504      	adds	r5, #4
 8000bc2:	016a      	lsls	r2, r5, #5
 8000bc4:	d544      	bpl.n	8000c50 <__aeabi_fdiv+0x220>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e791      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000bcc:	20ff      	movs	r0, #255	; 0xff
 8000bce:	2200      	movs	r2, #0
 8000bd0:	e78e      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	20ff      	movs	r0, #255	; 0xff
 8000bd8:	03d2      	lsls	r2, r2, #15
 8000bda:	e789      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4698      	mov	r8, r3
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	4215      	tst	r5, r2
 8000be6:	d008      	beq.n	8000bfa <__aeabi_fdiv+0x1ca>
 8000be8:	4643      	mov	r3, r8
 8000bea:	4213      	tst	r3, r2
 8000bec:	d105      	bne.n	8000bfa <__aeabi_fdiv+0x1ca>
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	0252      	lsls	r2, r2, #9
 8000bf2:	0026      	movs	r6, r4
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	0a52      	lsrs	r2, r2, #9
 8000bf8:	e77a      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	03d2      	lsls	r2, r2, #15
 8000bfe:	432a      	orrs	r2, r5
 8000c00:	0252      	lsls	r2, r2, #9
 8000c02:	20ff      	movs	r0, #255	; 0xff
 8000c04:	0a52      	lsrs	r2, r2, #9
 8000c06:	e773      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000c08:	4642      	mov	r2, r8
 8000c0a:	016b      	lsls	r3, r5, #5
 8000c0c:	0155      	lsls	r5, r2, #5
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d21a      	bcs.n	8000c48 <__aeabi_fdiv+0x218>
 8000c12:	201b      	movs	r0, #27
 8000c14:	2200      	movs	r2, #0
 8000c16:	3f01      	subs	r7, #1
 8000c18:	2601      	movs	r6, #1
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	db01      	blt.n	8000c28 <__aeabi_fdiv+0x1f8>
 8000c24:	429d      	cmp	r5, r3
 8000c26:	d801      	bhi.n	8000c2c <__aeabi_fdiv+0x1fc>
 8000c28:	1b5b      	subs	r3, r3, r5
 8000c2a:	4332      	orrs	r2, r6
 8000c2c:	3801      	subs	r0, #1
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d1f3      	bne.n	8000c1a <__aeabi_fdiv+0x1ea>
 8000c32:	1e58      	subs	r0, r3, #1
 8000c34:	4183      	sbcs	r3, r0
 8000c36:	4313      	orrs	r3, r2
 8000c38:	001d      	movs	r5, r3
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	337f      	adds	r3, #127	; 0x7f
 8000c3e:	000e      	movs	r6, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_fdiv+0x216>
 8000c44:	e73d      	b.n	8000ac2 <__aeabi_fdiv+0x92>
 8000c46:	e7aa      	b.n	8000b9e <__aeabi_fdiv+0x16e>
 8000c48:	201a      	movs	r0, #26
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	1b5b      	subs	r3, r3, r5
 8000c4e:	e7e3      	b.n	8000c18 <__aeabi_fdiv+0x1e8>
 8000c50:	01aa      	lsls	r2, r5, #6
 8000c52:	2000      	movs	r0, #0
 8000c54:	0a52      	lsrs	r2, r2, #9
 8000c56:	e74b      	b.n	8000af0 <__aeabi_fdiv+0xc0>
 8000c58:	0800cb90 	.word	0x0800cb90
 8000c5c:	f7ffffff 	.word	0xf7ffffff
 8000c60:	0800cbd0 	.word	0x0800cbd0

08000c64 <__eqsf2>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	0245      	lsls	r5, r0, #9
 8000c6a:	024e      	lsls	r6, r1, #9
 8000c6c:	004c      	lsls	r4, r1, #1
 8000c6e:	0fc3      	lsrs	r3, r0, #31
 8000c70:	0a6d      	lsrs	r5, r5, #9
 8000c72:	2001      	movs	r0, #1
 8000c74:	0e12      	lsrs	r2, r2, #24
 8000c76:	0a76      	lsrs	r6, r6, #9
 8000c78:	0e24      	lsrs	r4, r4, #24
 8000c7a:	0fc9      	lsrs	r1, r1, #31
 8000c7c:	2aff      	cmp	r2, #255	; 0xff
 8000c7e:	d006      	beq.n	8000c8e <__eqsf2+0x2a>
 8000c80:	2cff      	cmp	r4, #255	; 0xff
 8000c82:	d003      	beq.n	8000c8c <__eqsf2+0x28>
 8000c84:	42a2      	cmp	r2, r4
 8000c86:	d101      	bne.n	8000c8c <__eqsf2+0x28>
 8000c88:	42b5      	cmp	r5, r6
 8000c8a:	d006      	beq.n	8000c9a <__eqsf2+0x36>
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d1fc      	bne.n	8000c8c <__eqsf2+0x28>
 8000c92:	2cff      	cmp	r4, #255	; 0xff
 8000c94:	d1fa      	bne.n	8000c8c <__eqsf2+0x28>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d1f8      	bne.n	8000c8c <__eqsf2+0x28>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d006      	beq.n	8000cac <__eqsf2+0x48>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d1f3      	bne.n	8000c8c <__eqsf2+0x28>
 8000ca4:	0028      	movs	r0, r5
 8000ca6:	1e43      	subs	r3, r0, #1
 8000ca8:	4198      	sbcs	r0, r3
 8000caa:	e7ef      	b.n	8000c8c <__eqsf2+0x28>
 8000cac:	2000      	movs	r0, #0
 8000cae:	e7ed      	b.n	8000c8c <__eqsf2+0x28>

08000cb0 <__gesf2>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0245      	lsls	r5, r0, #9
 8000cb6:	024e      	lsls	r6, r1, #9
 8000cb8:	004c      	lsls	r4, r1, #1
 8000cba:	0fc3      	lsrs	r3, r0, #31
 8000cbc:	0a6d      	lsrs	r5, r5, #9
 8000cbe:	0e12      	lsrs	r2, r2, #24
 8000cc0:	0a76      	lsrs	r6, r6, #9
 8000cc2:	0e24      	lsrs	r4, r4, #24
 8000cc4:	0fc8      	lsrs	r0, r1, #31
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d01b      	beq.n	8000d02 <__gesf2+0x52>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d00e      	beq.n	8000cec <__gesf2+0x3c>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d11b      	bne.n	8000d0a <__gesf2+0x5a>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d101      	bne.n	8000cda <__gesf2+0x2a>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d01c      	beq.n	8000d14 <__gesf2+0x64>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d00c      	beq.n	8000cf8 <__gesf2+0x48>
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	d01c      	beq.n	8000d1c <__gesf2+0x6c>
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	1e58      	subs	r0, r3, #1
 8000ce6:	4008      	ands	r0, r1
 8000ce8:	3801      	subs	r0, #1
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d122      	bne.n	8000d36 <__gesf2+0x86>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d1f4      	bne.n	8000cde <__gesf2+0x2e>
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d1f2      	bne.n	8000cde <__gesf2+0x2e>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d1f6      	bne.n	8000cea <__gesf2+0x3a>
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4240      	negs	r0, r0
 8000d00:	e7f3      	b.n	8000cea <__gesf2+0x3a>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d117      	bne.n	8000d36 <__gesf2+0x86>
 8000d06:	2cff      	cmp	r4, #255	; 0xff
 8000d08:	d0f0      	beq.n	8000cec <__gesf2+0x3c>
 8000d0a:	2c00      	cmp	r4, #0
 8000d0c:	d1e7      	bne.n	8000cde <__gesf2+0x2e>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d1e5      	bne.n	8000cde <__gesf2+0x2e>
 8000d12:	e7e6      	b.n	8000ce2 <__gesf2+0x32>
 8000d14:	2000      	movs	r0, #0
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e7      	beq.n	8000cea <__gesf2+0x3a>
 8000d1a:	e7e2      	b.n	8000ce2 <__gesf2+0x32>
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	dc05      	bgt.n	8000d2c <__gesf2+0x7c>
 8000d20:	dbea      	blt.n	8000cf8 <__gesf2+0x48>
 8000d22:	42b5      	cmp	r5, r6
 8000d24:	d802      	bhi.n	8000d2c <__gesf2+0x7c>
 8000d26:	d3e7      	bcc.n	8000cf8 <__gesf2+0x48>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7de      	b.n	8000cea <__gesf2+0x3a>
 8000d2c:	4243      	negs	r3, r0
 8000d2e:	4158      	adcs	r0, r3
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	3801      	subs	r0, #1
 8000d34:	e7d9      	b.n	8000cea <__gesf2+0x3a>
 8000d36:	2002      	movs	r0, #2
 8000d38:	4240      	negs	r0, r0
 8000d3a:	e7d6      	b.n	8000cea <__gesf2+0x3a>

08000d3c <__lesf2>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0245      	lsls	r5, r0, #9
 8000d42:	024e      	lsls	r6, r1, #9
 8000d44:	004c      	lsls	r4, r1, #1
 8000d46:	0fc3      	lsrs	r3, r0, #31
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	0e12      	lsrs	r2, r2, #24
 8000d4c:	0a76      	lsrs	r6, r6, #9
 8000d4e:	0e24      	lsrs	r4, r4, #24
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	2aff      	cmp	r2, #255	; 0xff
 8000d54:	d00b      	beq.n	8000d6e <__lesf2+0x32>
 8000d56:	2cff      	cmp	r4, #255	; 0xff
 8000d58:	d00d      	beq.n	8000d76 <__lesf2+0x3a>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d11f      	bne.n	8000d9e <__lesf2+0x62>
 8000d5e:	2c00      	cmp	r4, #0
 8000d60:	d116      	bne.n	8000d90 <__lesf2+0x54>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d114      	bne.n	8000d90 <__lesf2+0x54>
 8000d66:	2000      	movs	r0, #0
 8000d68:	2d00      	cmp	r5, #0
 8000d6a:	d010      	beq.n	8000d8e <__lesf2+0x52>
 8000d6c:	e009      	b.n	8000d82 <__lesf2+0x46>
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d10c      	bne.n	8000d8c <__lesf2+0x50>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d113      	bne.n	8000d9e <__lesf2+0x62>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d108      	bne.n	8000d8c <__lesf2+0x50>
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d008      	beq.n	8000d90 <__lesf2+0x54>
 8000d7e:	4283      	cmp	r3, r0
 8000d80:	d012      	beq.n	8000da8 <__lesf2+0x6c>
 8000d82:	2102      	movs	r1, #2
 8000d84:	1e58      	subs	r0, r3, #1
 8000d86:	4008      	ands	r0, r1
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e000      	b.n	8000d8e <__lesf2+0x52>
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d1f4      	bne.n	8000d7e <__lesf2+0x42>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d1fa      	bne.n	8000d8e <__lesf2+0x52>
 8000d98:	2001      	movs	r0, #1
 8000d9a:	4240      	negs	r0, r0
 8000d9c:	e7f7      	b.n	8000d8e <__lesf2+0x52>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d1ed      	bne.n	8000d7e <__lesf2+0x42>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d1eb      	bne.n	8000d7e <__lesf2+0x42>
 8000da6:	e7ec      	b.n	8000d82 <__lesf2+0x46>
 8000da8:	42a2      	cmp	r2, r4
 8000daa:	dc05      	bgt.n	8000db8 <__lesf2+0x7c>
 8000dac:	dbf2      	blt.n	8000d94 <__lesf2+0x58>
 8000dae:	42b5      	cmp	r5, r6
 8000db0:	d802      	bhi.n	8000db8 <__lesf2+0x7c>
 8000db2:	d3ef      	bcc.n	8000d94 <__lesf2+0x58>
 8000db4:	2000      	movs	r0, #0
 8000db6:	e7ea      	b.n	8000d8e <__lesf2+0x52>
 8000db8:	4243      	negs	r3, r0
 8000dba:	4158      	adcs	r0, r3
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7e5      	b.n	8000d8e <__lesf2+0x52>
 8000dc2:	46c0      	nop			; (mov r8, r8)

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc6:	46c6      	mov	lr, r8
 8000dc8:	0243      	lsls	r3, r0, #9
 8000dca:	0a5b      	lsrs	r3, r3, #9
 8000dcc:	0045      	lsls	r5, r0, #1
 8000dce:	00da      	lsls	r2, r3, #3
 8000dd0:	0fc4      	lsrs	r4, r0, #31
 8000dd2:	0248      	lsls	r0, r1, #9
 8000dd4:	004f      	lsls	r7, r1, #1
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	0a42      	lsrs	r2, r0, #9
 8000dda:	001e      	movs	r6, r3
 8000ddc:	4690      	mov	r8, r2
 8000dde:	b500      	push	{lr}
 8000de0:	0e2d      	lsrs	r5, r5, #24
 8000de2:	0e3f      	lsrs	r7, r7, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	0980      	lsrs	r0, r0, #6
 8000de8:	2fff      	cmp	r7, #255	; 0xff
 8000dea:	d059      	beq.n	8000ea0 <__aeabi_fsub+0xdc>
 8000dec:	2201      	movs	r2, #1
 8000dee:	4051      	eors	r1, r2
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d039      	beq.n	8000e68 <__aeabi_fsub+0xa4>
 8000df4:	1bea      	subs	r2, r5, r7
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	dd58      	ble.n	8000eac <__aeabi_fsub+0xe8>
 8000dfa:	2f00      	cmp	r7, #0
 8000dfc:	d068      	beq.n	8000ed0 <__aeabi_fsub+0x10c>
 8000dfe:	2dff      	cmp	r5, #255	; 0xff
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x40>
 8000e02:	e0d1      	b.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	04db      	lsls	r3, r3, #19
 8000e08:	4318      	orrs	r0, r3
 8000e0a:	2a1b      	cmp	r2, #27
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_fsub+0x4c>
 8000e0e:	e0e3      	b.n	8000fd8 <__aeabi_fsub+0x214>
 8000e10:	2301      	movs	r3, #1
 8000e12:	4662      	mov	r2, ip
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	d400      	bmi.n	8000e1c <__aeabi_fsub+0x58>
 8000e1a:	e0ac      	b.n	8000f76 <__aeabi_fsub+0x1b2>
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	099e      	lsrs	r6, r3, #6
 8000e20:	0030      	movs	r0, r6
 8000e22:	f002 f8cd 	bl	8002fc0 <__clzsi2>
 8000e26:	0033      	movs	r3, r6
 8000e28:	3805      	subs	r0, #5
 8000e2a:	4083      	lsls	r3, r0
 8000e2c:	4285      	cmp	r5, r0
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_fsub+0x6e>
 8000e30:	e0c6      	b.n	8000fc0 <__aeabi_fsub+0x1fc>
 8000e32:	4ab2      	ldr	r2, [pc, #712]	; (80010fc <__aeabi_fsub+0x338>)
 8000e34:	1a2d      	subs	r5, r5, r0
 8000e36:	4013      	ands	r3, r2
 8000e38:	075a      	lsls	r2, r3, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fsub+0x82>
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	401a      	ands	r2, r3
 8000e40:	2a04      	cmp	r2, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fsub+0x82>
 8000e44:	3304      	adds	r3, #4
 8000e46:	015a      	lsls	r2, r3, #5
 8000e48:	d400      	bmi.n	8000e4c <__aeabi_fsub+0x88>
 8000e4a:	e097      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000e4c:	1c6a      	adds	r2, r5, #1
 8000e4e:	2dfe      	cmp	r5, #254	; 0xfe
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fsub+0x90>
 8000e52:	e084      	b.n	8000f5e <__aeabi_fsub+0x19a>
 8000e54:	019b      	lsls	r3, r3, #6
 8000e56:	0a5e      	lsrs	r6, r3, #9
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	05d0      	lsls	r0, r2, #23
 8000e5c:	4330      	orrs	r0, r6
 8000e5e:	07e4      	lsls	r4, r4, #31
 8000e60:	4320      	orrs	r0, r4
 8000e62:	bc80      	pop	{r7}
 8000e64:	46b8      	mov	r8, r7
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e68:	1bea      	subs	r2, r5, r7
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	dd41      	ble.n	8000ef2 <__aeabi_fsub+0x12e>
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d06b      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000e72:	2dff      	cmp	r5, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0xb4>
 8000e76:	e097      	b.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	04db      	lsls	r3, r3, #19
 8000e7c:	4318      	orrs	r0, r3
 8000e7e:	2a1b      	cmp	r2, #27
 8000e80:	dc00      	bgt.n	8000e84 <__aeabi_fsub+0xc0>
 8000e82:	e0cc      	b.n	800101e <__aeabi_fsub+0x25a>
 8000e84:	2301      	movs	r3, #1
 8000e86:	4463      	add	r3, ip
 8000e88:	015a      	lsls	r2, r3, #5
 8000e8a:	d574      	bpl.n	8000f76 <__aeabi_fsub+0x1b2>
 8000e8c:	3501      	adds	r5, #1
 8000e8e:	2dff      	cmp	r5, #255	; 0xff
 8000e90:	d065      	beq.n	8000f5e <__aeabi_fsub+0x19a>
 8000e92:	2201      	movs	r2, #1
 8000e94:	499a      	ldr	r1, [pc, #616]	; (8001100 <__aeabi_fsub+0x33c>)
 8000e96:	401a      	ands	r2, r3
 8000e98:	085b      	lsrs	r3, r3, #1
 8000e9a:	400b      	ands	r3, r1
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	e7cb      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d01f      	beq.n	8000ee4 <__aeabi_fsub+0x120>
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d022      	beq.n	8000eee <__aeabi_fsub+0x12a>
 8000ea8:	002a      	movs	r2, r5
 8000eaa:	3aff      	subs	r2, #255	; 0xff
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	d035      	beq.n	8000f1c <__aeabi_fsub+0x158>
 8000eb0:	1b7a      	subs	r2, r7, r5
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_fsub+0xf4>
 8000eb6:	e099      	b.n	8000fec <__aeabi_fsub+0x228>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0xfc>
 8000ebe:	e0dd      	b.n	800107c <__aeabi_fsub+0x2b8>
 8000ec0:	1e53      	subs	r3, r2, #1
 8000ec2:	2a01      	cmp	r2, #1
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x104>
 8000ec6:	e105      	b.n	80010d4 <__aeabi_fsub+0x310>
 8000ec8:	2aff      	cmp	r2, #255	; 0xff
 8000eca:	d06b      	beq.n	8000fa4 <__aeabi_fsub+0x1e0>
 8000ecc:	001a      	movs	r2, r3
 8000ece:	e094      	b.n	8000ffa <__aeabi_fsub+0x236>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d073      	beq.n	8000fbc <__aeabi_fsub+0x1f8>
 8000ed4:	1e51      	subs	r1, r2, #1
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x118>
 8000eda:	e0df      	b.n	800109c <__aeabi_fsub+0x2d8>
 8000edc:	2aff      	cmp	r2, #255	; 0xff
 8000ede:	d063      	beq.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	e792      	b.n	8000e0a <__aeabi_fsub+0x46>
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4051      	eors	r1, r2
 8000ee8:	42a1      	cmp	r1, r4
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x12a>
 8000eec:	e782      	b.n	8000df4 <__aeabi_fsub+0x30>
 8000eee:	002a      	movs	r2, r5
 8000ef0:	3aff      	subs	r2, #255	; 0xff
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	d036      	beq.n	8000f64 <__aeabi_fsub+0x1a0>
 8000ef6:	1b7a      	subs	r2, r7, r5
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x13a>
 8000efc:	e0aa      	b.n	8001054 <__aeabi_fsub+0x290>
 8000efe:	2fff      	cmp	r7, #255	; 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x140>
 8000f02:	e0da      	b.n	80010ba <__aeabi_fsub+0x2f6>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	4661      	mov	r1, ip
 8000f08:	04db      	lsls	r3, r3, #19
 8000f0a:	4319      	orrs	r1, r3
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	2a1b      	cmp	r2, #27
 8000f10:	dc00      	bgt.n	8000f14 <__aeabi_fsub+0x150>
 8000f12:	e0d4      	b.n	80010be <__aeabi_fsub+0x2fa>
 8000f14:	2301      	movs	r3, #1
 8000f16:	003d      	movs	r5, r7
 8000f18:	181b      	adds	r3, r3, r0
 8000f1a:	e7b5      	b.n	8000e88 <__aeabi_fsub+0xc4>
 8000f1c:	27fe      	movs	r7, #254	; 0xfe
 8000f1e:	1c6a      	adds	r2, r5, #1
 8000f20:	4217      	tst	r7, r2
 8000f22:	d171      	bne.n	8001008 <__aeabi_fsub+0x244>
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x166>
 8000f28:	e09e      	b.n	8001068 <__aeabi_fsub+0x2a4>
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x16e>
 8000f30:	e0d5      	b.n	80010de <__aeabi_fsub+0x31a>
 8000f32:	2200      	movs	r2, #0
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x176>
 8000f38:	e78f      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f3a:	1a1b      	subs	r3, r3, r0
 8000f3c:	015e      	lsls	r6, r3, #5
 8000f3e:	d400      	bmi.n	8000f42 <__aeabi_fsub+0x17e>
 8000f40:	e0d6      	b.n	80010f0 <__aeabi_fsub+0x32c>
 8000f42:	4663      	mov	r3, ip
 8000f44:	000c      	movs	r4, r1
 8000f46:	1ac3      	subs	r3, r0, r3
 8000f48:	e776      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d036      	beq.n	8000fbc <__aeabi_fsub+0x1f8>
 8000f4e:	1e51      	subs	r1, r2, #1
 8000f50:	2a01      	cmp	r2, #1
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x192>
 8000f54:	e09a      	b.n	800108c <__aeabi_fsub+0x2c8>
 8000f56:	2aff      	cmp	r2, #255	; 0xff
 8000f58:	d026      	beq.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	e78f      	b.n	8000e7e <__aeabi_fsub+0xba>
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	2600      	movs	r6, #0
 8000f62:	e77a      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f64:	27fe      	movs	r7, #254	; 0xfe
 8000f66:	1c6a      	adds	r2, r5, #1
 8000f68:	4217      	tst	r7, r2
 8000f6a:	d062      	beq.n	8001032 <__aeabi_fsub+0x26e>
 8000f6c:	2aff      	cmp	r2, #255	; 0xff
 8000f6e:	d0f6      	beq.n	8000f5e <__aeabi_fsub+0x19a>
 8000f70:	0015      	movs	r5, r2
 8000f72:	4460      	add	r0, ip
 8000f74:	0843      	lsrs	r3, r0, #1
 8000f76:	075a      	lsls	r2, r3, #29
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x1b8>
 8000f7a:	e75f      	b.n	8000e3c <__aeabi_fsub+0x78>
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	2dff      	cmp	r5, #255	; 0xff
 8000f80:	d012      	beq.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	0a5e      	lsrs	r6, r3, #9
 8000f86:	b2ea      	uxtb	r2, r5
 8000f88:	e767      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f8a:	4662      	mov	r2, ip
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x1ce>
 8000f90:	e093      	b.n	80010ba <__aeabi_fsub+0x2f6>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d008      	beq.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	03d2      	lsls	r2, r2, #15
 8000f9a:	4213      	tst	r3, r2
 8000f9c:	d004      	beq.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	4210      	tst	r0, r2
 8000fa2:	d101      	bne.n	8000fa8 <__aeabi_fsub+0x1e4>
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	4643      	mov	r3, r8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0d8      	beq.n	8000f5e <__aeabi_fsub+0x19a>
 8000fac:	2680      	movs	r6, #128	; 0x80
 8000fae:	03f6      	lsls	r6, r6, #15
 8000fb0:	431e      	orrs	r6, r3
 8000fb2:	0276      	lsls	r6, r6, #9
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	0a76      	lsrs	r6, r6, #9
 8000fb8:	e74f      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	0015      	movs	r5, r2
 8000fbe:	e7de      	b.n	8000f7e <__aeabi_fsub+0x1ba>
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	3001      	adds	r0, #1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	0019      	movs	r1, r3
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	40c1      	lsrs	r1, r0
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	4193      	sbcs	r3, r2
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	e72f      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000fd8:	2320      	movs	r3, #32
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	0001      	movs	r1, r0
 8000fde:	4098      	lsls	r0, r3
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	40d1      	lsrs	r1, r2
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	4193      	sbcs	r3, r2
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	e712      	b.n	8000e12 <__aeabi_fsub+0x4e>
 8000fec:	2fff      	cmp	r7, #255	; 0xff
 8000fee:	d0d9      	beq.n	8000fa4 <__aeabi_fsub+0x1e0>
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	4664      	mov	r4, ip
 8000ff4:	04db      	lsls	r3, r3, #19
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	46a4      	mov	ip, r4
 8000ffa:	2a1b      	cmp	r2, #27
 8000ffc:	dd52      	ble.n	80010a4 <__aeabi_fsub+0x2e0>
 8000ffe:	2301      	movs	r3, #1
 8001000:	000c      	movs	r4, r1
 8001002:	003d      	movs	r5, r7
 8001004:	1ac3      	subs	r3, r0, r3
 8001006:	e706      	b.n	8000e16 <__aeabi_fsub+0x52>
 8001008:	4663      	mov	r3, ip
 800100a:	1a1e      	subs	r6, r3, r0
 800100c:	0173      	lsls	r3, r6, #5
 800100e:	d439      	bmi.n	8001084 <__aeabi_fsub+0x2c0>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d000      	beq.n	8001016 <__aeabi_fsub+0x252>
 8001014:	e704      	b.n	8000e20 <__aeabi_fsub+0x5c>
 8001016:	2400      	movs	r4, #0
 8001018:	2200      	movs	r2, #0
 800101a:	2600      	movs	r6, #0
 800101c:	e71d      	b.n	8000e5a <__aeabi_fsub+0x96>
 800101e:	2320      	movs	r3, #32
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	0001      	movs	r1, r0
 8001024:	4098      	lsls	r0, r3
 8001026:	0003      	movs	r3, r0
 8001028:	40d1      	lsrs	r1, r2
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	4193      	sbcs	r3, r2
 800102e:	430b      	orrs	r3, r1
 8001030:	e729      	b.n	8000e86 <__aeabi_fsub+0xc2>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d1a9      	bne.n	8000f8a <__aeabi_fsub+0x1c6>
 8001036:	4663      	mov	r3, ip
 8001038:	2b00      	cmp	r3, #0
 800103a:	d056      	beq.n	80010ea <__aeabi_fsub+0x326>
 800103c:	2200      	movs	r2, #0
 800103e:	2800      	cmp	r0, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_fsub+0x280>
 8001042:	e70a      	b.n	8000e5a <__aeabi_fsub+0x96>
 8001044:	0003      	movs	r3, r0
 8001046:	4463      	add	r3, ip
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	d594      	bpl.n	8000f76 <__aeabi_fsub+0x1b2>
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <__aeabi_fsub+0x338>)
 800104e:	3501      	adds	r5, #1
 8001050:	4013      	ands	r3, r2
 8001052:	e790      	b.n	8000f76 <__aeabi_fsub+0x1b2>
 8001054:	4663      	mov	r3, ip
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0af      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 800105a:	1e53      	subs	r3, r2, #1
 800105c:	2a01      	cmp	r2, #1
 800105e:	d015      	beq.n	800108c <__aeabi_fsub+0x2c8>
 8001060:	2aff      	cmp	r2, #255	; 0xff
 8001062:	d02a      	beq.n	80010ba <__aeabi_fsub+0x2f6>
 8001064:	001a      	movs	r2, r3
 8001066:	e752      	b.n	8000f0e <__aeabi_fsub+0x14a>
 8001068:	4662      	mov	r2, ip
 800106a:	2a00      	cmp	r2, #0
 800106c:	d191      	bne.n	8000f92 <__aeabi_fsub+0x1ce>
 800106e:	2800      	cmp	r0, #0
 8001070:	d198      	bne.n	8000fa4 <__aeabi_fsub+0x1e0>
 8001072:	2680      	movs	r6, #128	; 0x80
 8001074:	2400      	movs	r4, #0
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	03f6      	lsls	r6, r6, #15
 800107a:	e6ee      	b.n	8000e5a <__aeabi_fsub+0x96>
 800107c:	000c      	movs	r4, r1
 800107e:	4643      	mov	r3, r8
 8001080:	0015      	movs	r5, r2
 8001082:	e77c      	b.n	8000f7e <__aeabi_fsub+0x1ba>
 8001084:	4663      	mov	r3, ip
 8001086:	000c      	movs	r4, r1
 8001088:	1ac6      	subs	r6, r0, r3
 800108a:	e6c9      	b.n	8000e20 <__aeabi_fsub+0x5c>
 800108c:	0003      	movs	r3, r0
 800108e:	4463      	add	r3, ip
 8001090:	2501      	movs	r5, #1
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	d400      	bmi.n	8001098 <__aeabi_fsub+0x2d4>
 8001096:	e76e      	b.n	8000f76 <__aeabi_fsub+0x1b2>
 8001098:	2502      	movs	r5, #2
 800109a:	e6fa      	b.n	8000e92 <__aeabi_fsub+0xce>
 800109c:	4663      	mov	r3, ip
 800109e:	2501      	movs	r5, #1
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	e6b8      	b.n	8000e16 <__aeabi_fsub+0x52>
 80010a4:	4664      	mov	r4, ip
 80010a6:	2320      	movs	r3, #32
 80010a8:	40d4      	lsrs	r4, r2
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	4662      	mov	r2, ip
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	4193      	sbcs	r3, r2
 80010b6:	4323      	orrs	r3, r4
 80010b8:	e7a2      	b.n	8001000 <__aeabi_fsub+0x23c>
 80010ba:	4643      	mov	r3, r8
 80010bc:	e774      	b.n	8000fa8 <__aeabi_fsub+0x1e4>
 80010be:	4661      	mov	r1, ip
 80010c0:	2320      	movs	r3, #32
 80010c2:	40d1      	lsrs	r1, r2
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	4662      	mov	r2, ip
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	4193      	sbcs	r3, r2
 80010d0:	430b      	orrs	r3, r1
 80010d2:	e720      	b.n	8000f16 <__aeabi_fsub+0x152>
 80010d4:	4663      	mov	r3, ip
 80010d6:	000c      	movs	r4, r1
 80010d8:	2501      	movs	r5, #1
 80010da:	1ac3      	subs	r3, r0, r3
 80010dc:	e69b      	b.n	8000e16 <__aeabi_fsub+0x52>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d099      	beq.n	8001016 <__aeabi_fsub+0x252>
 80010e2:	000c      	movs	r4, r1
 80010e4:	4646      	mov	r6, r8
 80010e6:	2200      	movs	r2, #0
 80010e8:	e6b7      	b.n	8000e5a <__aeabi_fsub+0x96>
 80010ea:	4646      	mov	r6, r8
 80010ec:	2200      	movs	r2, #0
 80010ee:	e6b4      	b.n	8000e5a <__aeabi_fsub+0x96>
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d000      	beq.n	80010f6 <__aeabi_fsub+0x332>
 80010f4:	e73f      	b.n	8000f76 <__aeabi_fsub+0x1b2>
 80010f6:	2400      	movs	r4, #0
 80010f8:	2600      	movs	r6, #0
 80010fa:	e6ae      	b.n	8000e5a <__aeabi_fsub+0x96>
 80010fc:	fbffffff 	.word	0xfbffffff
 8001100:	7dffffff 	.word	0x7dffffff

08001104 <__aeabi_ui2f>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	1e04      	subs	r4, r0, #0
 8001108:	d00e      	beq.n	8001128 <__aeabi_ui2f+0x24>
 800110a:	f001 ff59 	bl	8002fc0 <__clzsi2>
 800110e:	239e      	movs	r3, #158	; 0x9e
 8001110:	0001      	movs	r1, r0
 8001112:	1a1b      	subs	r3, r3, r0
 8001114:	2b96      	cmp	r3, #150	; 0x96
 8001116:	dc0c      	bgt.n	8001132 <__aeabi_ui2f+0x2e>
 8001118:	2808      	cmp	r0, #8
 800111a:	d02c      	beq.n	8001176 <__aeabi_ui2f+0x72>
 800111c:	3908      	subs	r1, #8
 800111e:	408c      	lsls	r4, r1
 8001120:	0264      	lsls	r4, r4, #9
 8001122:	0a64      	lsrs	r4, r4, #9
 8001124:	b2d8      	uxtb	r0, r3
 8001126:	e001      	b.n	800112c <__aeabi_ui2f+0x28>
 8001128:	2000      	movs	r0, #0
 800112a:	2400      	movs	r4, #0
 800112c:	05c0      	lsls	r0, r0, #23
 800112e:	4320      	orrs	r0, r4
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	2b99      	cmp	r3, #153	; 0x99
 8001134:	dd0a      	ble.n	800114c <__aeabi_ui2f+0x48>
 8001136:	0002      	movs	r2, r0
 8001138:	0020      	movs	r0, r4
 800113a:	321b      	adds	r2, #27
 800113c:	4090      	lsls	r0, r2
 800113e:	0002      	movs	r2, r0
 8001140:	1e50      	subs	r0, r2, #1
 8001142:	4182      	sbcs	r2, r0
 8001144:	2005      	movs	r0, #5
 8001146:	1a40      	subs	r0, r0, r1
 8001148:	40c4      	lsrs	r4, r0
 800114a:	4314      	orrs	r4, r2
 800114c:	2905      	cmp	r1, #5
 800114e:	dc16      	bgt.n	800117e <__aeabi_ui2f+0x7a>
 8001150:	0022      	movs	r2, r4
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <__aeabi_ui2f+0x8c>)
 8001154:	4002      	ands	r2, r0
 8001156:	0765      	lsls	r5, r4, #29
 8001158:	d009      	beq.n	800116e <__aeabi_ui2f+0x6a>
 800115a:	250f      	movs	r5, #15
 800115c:	402c      	ands	r4, r5
 800115e:	2c04      	cmp	r4, #4
 8001160:	d005      	beq.n	800116e <__aeabi_ui2f+0x6a>
 8001162:	3204      	adds	r2, #4
 8001164:	0154      	lsls	r4, r2, #5
 8001166:	d502      	bpl.n	800116e <__aeabi_ui2f+0x6a>
 8001168:	239f      	movs	r3, #159	; 0x9f
 800116a:	4002      	ands	r2, r0
 800116c:	1a5b      	subs	r3, r3, r1
 800116e:	0192      	lsls	r2, r2, #6
 8001170:	0a54      	lsrs	r4, r2, #9
 8001172:	b2d8      	uxtb	r0, r3
 8001174:	e7da      	b.n	800112c <__aeabi_ui2f+0x28>
 8001176:	0264      	lsls	r4, r4, #9
 8001178:	2096      	movs	r0, #150	; 0x96
 800117a:	0a64      	lsrs	r4, r4, #9
 800117c:	e7d6      	b.n	800112c <__aeabi_ui2f+0x28>
 800117e:	1f4a      	subs	r2, r1, #5
 8001180:	4094      	lsls	r4, r2
 8001182:	0022      	movs	r2, r4
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <__aeabi_ui2f+0x8c>)
 8001186:	4002      	ands	r2, r0
 8001188:	0765      	lsls	r5, r4, #29
 800118a:	d0f0      	beq.n	800116e <__aeabi_ui2f+0x6a>
 800118c:	e7e5      	b.n	800115a <__aeabi_ui2f+0x56>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	fbffffff 	.word	0xfbffffff

08001194 <__aeabi_dadd>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	464f      	mov	r7, r9
 8001198:	4646      	mov	r6, r8
 800119a:	46d6      	mov	lr, sl
 800119c:	0004      	movs	r4, r0
 800119e:	b5c0      	push	{r6, r7, lr}
 80011a0:	001f      	movs	r7, r3
 80011a2:	030b      	lsls	r3, r1, #12
 80011a4:	0010      	movs	r0, r2
 80011a6:	004e      	lsls	r6, r1, #1
 80011a8:	0a5b      	lsrs	r3, r3, #9
 80011aa:	0fcd      	lsrs	r5, r1, #31
 80011ac:	0f61      	lsrs	r1, r4, #29
 80011ae:	007a      	lsls	r2, r7, #1
 80011b0:	4319      	orrs	r1, r3
 80011b2:	00e3      	lsls	r3, r4, #3
 80011b4:	033c      	lsls	r4, r7, #12
 80011b6:	0fff      	lsrs	r7, r7, #31
 80011b8:	46bc      	mov	ip, r7
 80011ba:	0a64      	lsrs	r4, r4, #9
 80011bc:	0f47      	lsrs	r7, r0, #29
 80011be:	4327      	orrs	r7, r4
 80011c0:	0d76      	lsrs	r6, r6, #21
 80011c2:	0d52      	lsrs	r2, r2, #21
 80011c4:	00c0      	lsls	r0, r0, #3
 80011c6:	46b9      	mov	r9, r7
 80011c8:	4680      	mov	r8, r0
 80011ca:	1ab7      	subs	r7, r6, r2
 80011cc:	4565      	cmp	r5, ip
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x3e>
 80011d0:	e09b      	b.n	800130a <__aeabi_dadd+0x176>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x44>
 80011d6:	e084      	b.n	80012e2 <__aeabi_dadd+0x14e>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x4a>
 80011dc:	e0be      	b.n	800135c <__aeabi_dadd+0x1c8>
 80011de:	4ac8      	ldr	r2, [pc, #800]	; (8001500 <__aeabi_dadd+0x36c>)
 80011e0:	4296      	cmp	r6, r2
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x52>
 80011e4:	e124      	b.n	8001430 <__aeabi_dadd+0x29c>
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	464c      	mov	r4, r9
 80011ea:	0412      	lsls	r2, r2, #16
 80011ec:	4314      	orrs	r4, r2
 80011ee:	46a1      	mov	r9, r4
 80011f0:	2f38      	cmp	r7, #56	; 0x38
 80011f2:	dd00      	ble.n	80011f6 <__aeabi_dadd+0x62>
 80011f4:	e167      	b.n	80014c6 <__aeabi_dadd+0x332>
 80011f6:	2f1f      	cmp	r7, #31
 80011f8:	dd00      	ble.n	80011fc <__aeabi_dadd+0x68>
 80011fa:	e1d6      	b.n	80015aa <__aeabi_dadd+0x416>
 80011fc:	2220      	movs	r2, #32
 80011fe:	464c      	mov	r4, r9
 8001200:	1bd2      	subs	r2, r2, r7
 8001202:	4094      	lsls	r4, r2
 8001204:	46a2      	mov	sl, r4
 8001206:	4644      	mov	r4, r8
 8001208:	40fc      	lsrs	r4, r7
 800120a:	0020      	movs	r0, r4
 800120c:	4654      	mov	r4, sl
 800120e:	4304      	orrs	r4, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4090      	lsls	r0, r2
 8001214:	1e42      	subs	r2, r0, #1
 8001216:	4190      	sbcs	r0, r2
 8001218:	464a      	mov	r2, r9
 800121a:	40fa      	lsrs	r2, r7
 800121c:	4304      	orrs	r4, r0
 800121e:	1a89      	subs	r1, r1, r2
 8001220:	1b1c      	subs	r4, r3, r4
 8001222:	42a3      	cmp	r3, r4
 8001224:	4192      	sbcs	r2, r2
 8001226:	4252      	negs	r2, r2
 8001228:	1a8b      	subs	r3, r1, r2
 800122a:	469a      	mov	sl, r3
 800122c:	4653      	mov	r3, sl
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	d400      	bmi.n	8001234 <__aeabi_dadd+0xa0>
 8001232:	e0d4      	b.n	80013de <__aeabi_dadd+0x24a>
 8001234:	4653      	mov	r3, sl
 8001236:	025a      	lsls	r2, r3, #9
 8001238:	0a53      	lsrs	r3, r2, #9
 800123a:	469a      	mov	sl, r3
 800123c:	4653      	mov	r3, sl
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0xb0>
 8001242:	e104      	b.n	800144e <__aeabi_dadd+0x2ba>
 8001244:	4650      	mov	r0, sl
 8001246:	f001 febb 	bl	8002fc0 <__clzsi2>
 800124a:	0003      	movs	r3, r0
 800124c:	3b08      	subs	r3, #8
 800124e:	2220      	movs	r2, #32
 8001250:	0020      	movs	r0, r4
 8001252:	1ad2      	subs	r2, r2, r3
 8001254:	4651      	mov	r1, sl
 8001256:	40d0      	lsrs	r0, r2
 8001258:	4099      	lsls	r1, r3
 800125a:	0002      	movs	r2, r0
 800125c:	409c      	lsls	r4, r3
 800125e:	430a      	orrs	r2, r1
 8001260:	42b3      	cmp	r3, r6
 8001262:	da00      	bge.n	8001266 <__aeabi_dadd+0xd2>
 8001264:	e102      	b.n	800146c <__aeabi_dadd+0x2d8>
 8001266:	1b9b      	subs	r3, r3, r6
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	291f      	cmp	r1, #31
 800126c:	dd00      	ble.n	8001270 <__aeabi_dadd+0xdc>
 800126e:	e0a7      	b.n	80013c0 <__aeabi_dadd+0x22c>
 8001270:	2320      	movs	r3, #32
 8001272:	0010      	movs	r0, r2
 8001274:	0026      	movs	r6, r4
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	409c      	lsls	r4, r3
 800127a:	4098      	lsls	r0, r3
 800127c:	40ce      	lsrs	r6, r1
 800127e:	40ca      	lsrs	r2, r1
 8001280:	1e63      	subs	r3, r4, #1
 8001282:	419c      	sbcs	r4, r3
 8001284:	4330      	orrs	r0, r6
 8001286:	4692      	mov	sl, r2
 8001288:	2600      	movs	r6, #0
 800128a:	4304      	orrs	r4, r0
 800128c:	0763      	lsls	r3, r4, #29
 800128e:	d009      	beq.n	80012a4 <__aeabi_dadd+0x110>
 8001290:	230f      	movs	r3, #15
 8001292:	4023      	ands	r3, r4
 8001294:	2b04      	cmp	r3, #4
 8001296:	d005      	beq.n	80012a4 <__aeabi_dadd+0x110>
 8001298:	1d23      	adds	r3, r4, #4
 800129a:	42a3      	cmp	r3, r4
 800129c:	41a4      	sbcs	r4, r4
 800129e:	4264      	negs	r4, r4
 80012a0:	44a2      	add	sl, r4
 80012a2:	001c      	movs	r4, r3
 80012a4:	4653      	mov	r3, sl
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	d400      	bmi.n	80012ac <__aeabi_dadd+0x118>
 80012aa:	e09b      	b.n	80013e4 <__aeabi_dadd+0x250>
 80012ac:	4b94      	ldr	r3, [pc, #592]	; (8001500 <__aeabi_dadd+0x36c>)
 80012ae:	3601      	adds	r6, #1
 80012b0:	429e      	cmp	r6, r3
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dadd+0x122>
 80012b4:	e0b8      	b.n	8001428 <__aeabi_dadd+0x294>
 80012b6:	4653      	mov	r3, sl
 80012b8:	4992      	ldr	r1, [pc, #584]	; (8001504 <__aeabi_dadd+0x370>)
 80012ba:	08e4      	lsrs	r4, r4, #3
 80012bc:	400b      	ands	r3, r1
 80012be:	0019      	movs	r1, r3
 80012c0:	075b      	lsls	r3, r3, #29
 80012c2:	4323      	orrs	r3, r4
 80012c4:	0572      	lsls	r2, r6, #21
 80012c6:	024c      	lsls	r4, r1, #9
 80012c8:	0b24      	lsrs	r4, r4, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0512      	lsls	r2, r2, #20
 80012ce:	07ed      	lsls	r5, r5, #31
 80012d0:	4322      	orrs	r2, r4
 80012d2:	432a      	orrs	r2, r5
 80012d4:	0018      	movs	r0, r3
 80012d6:	0011      	movs	r1, r2
 80012d8:	bce0      	pop	{r5, r6, r7}
 80012da:	46ba      	mov	sl, r7
 80012dc:	46b1      	mov	r9, r6
 80012de:	46a8      	mov	r8, r5
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d048      	beq.n	8001378 <__aeabi_dadd+0x1e4>
 80012e6:	1b97      	subs	r7, r2, r6
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d000      	beq.n	80012ee <__aeabi_dadd+0x15a>
 80012ec:	e10e      	b.n	800150c <__aeabi_dadd+0x378>
 80012ee:	000c      	movs	r4, r1
 80012f0:	431c      	orrs	r4, r3
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x162>
 80012f4:	e1b7      	b.n	8001666 <__aeabi_dadd+0x4d2>
 80012f6:	1e7c      	subs	r4, r7, #1
 80012f8:	2f01      	cmp	r7, #1
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x16a>
 80012fc:	e226      	b.n	800174c <__aeabi_dadd+0x5b8>
 80012fe:	4d80      	ldr	r5, [pc, #512]	; (8001500 <__aeabi_dadd+0x36c>)
 8001300:	42af      	cmp	r7, r5
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x172>
 8001304:	e1d5      	b.n	80016b2 <__aeabi_dadd+0x51e>
 8001306:	0027      	movs	r7, r4
 8001308:	e107      	b.n	800151a <__aeabi_dadd+0x386>
 800130a:	2f00      	cmp	r7, #0
 800130c:	dc00      	bgt.n	8001310 <__aeabi_dadd+0x17c>
 800130e:	e0b2      	b.n	8001476 <__aeabi_dadd+0x2e2>
 8001310:	2a00      	cmp	r2, #0
 8001312:	d047      	beq.n	80013a4 <__aeabi_dadd+0x210>
 8001314:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <__aeabi_dadd+0x36c>)
 8001316:	4296      	cmp	r6, r2
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x188>
 800131a:	e089      	b.n	8001430 <__aeabi_dadd+0x29c>
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	464c      	mov	r4, r9
 8001320:	0412      	lsls	r2, r2, #16
 8001322:	4314      	orrs	r4, r2
 8001324:	46a1      	mov	r9, r4
 8001326:	2f38      	cmp	r7, #56	; 0x38
 8001328:	dc6b      	bgt.n	8001402 <__aeabi_dadd+0x26e>
 800132a:	2f1f      	cmp	r7, #31
 800132c:	dc00      	bgt.n	8001330 <__aeabi_dadd+0x19c>
 800132e:	e16e      	b.n	800160e <__aeabi_dadd+0x47a>
 8001330:	003a      	movs	r2, r7
 8001332:	4648      	mov	r0, r9
 8001334:	3a20      	subs	r2, #32
 8001336:	40d0      	lsrs	r0, r2
 8001338:	4684      	mov	ip, r0
 800133a:	2f20      	cmp	r7, #32
 800133c:	d007      	beq.n	800134e <__aeabi_dadd+0x1ba>
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	4648      	mov	r0, r9
 8001342:	1bd2      	subs	r2, r2, r7
 8001344:	4090      	lsls	r0, r2
 8001346:	0002      	movs	r2, r0
 8001348:	4640      	mov	r0, r8
 800134a:	4310      	orrs	r0, r2
 800134c:	4680      	mov	r8, r0
 800134e:	4640      	mov	r0, r8
 8001350:	1e42      	subs	r2, r0, #1
 8001352:	4190      	sbcs	r0, r2
 8001354:	4662      	mov	r2, ip
 8001356:	0004      	movs	r4, r0
 8001358:	4314      	orrs	r4, r2
 800135a:	e057      	b.n	800140c <__aeabi_dadd+0x278>
 800135c:	464a      	mov	r2, r9
 800135e:	4302      	orrs	r2, r0
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x1d0>
 8001362:	e103      	b.n	800156c <__aeabi_dadd+0x3d8>
 8001364:	1e7a      	subs	r2, r7, #1
 8001366:	2f01      	cmp	r7, #1
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x1d8>
 800136a:	e193      	b.n	8001694 <__aeabi_dadd+0x500>
 800136c:	4c64      	ldr	r4, [pc, #400]	; (8001500 <__aeabi_dadd+0x36c>)
 800136e:	42a7      	cmp	r7, r4
 8001370:	d100      	bne.n	8001374 <__aeabi_dadd+0x1e0>
 8001372:	e18a      	b.n	800168a <__aeabi_dadd+0x4f6>
 8001374:	0017      	movs	r7, r2
 8001376:	e73b      	b.n	80011f0 <__aeabi_dadd+0x5c>
 8001378:	4c63      	ldr	r4, [pc, #396]	; (8001508 <__aeabi_dadd+0x374>)
 800137a:	1c72      	adds	r2, r6, #1
 800137c:	4222      	tst	r2, r4
 800137e:	d000      	beq.n	8001382 <__aeabi_dadd+0x1ee>
 8001380:	e0e0      	b.n	8001544 <__aeabi_dadd+0x3b0>
 8001382:	000a      	movs	r2, r1
 8001384:	431a      	orrs	r2, r3
 8001386:	2e00      	cmp	r6, #0
 8001388:	d000      	beq.n	800138c <__aeabi_dadd+0x1f8>
 800138a:	e174      	b.n	8001676 <__aeabi_dadd+0x4e2>
 800138c:	2a00      	cmp	r2, #0
 800138e:	d100      	bne.n	8001392 <__aeabi_dadd+0x1fe>
 8001390:	e1d0      	b.n	8001734 <__aeabi_dadd+0x5a0>
 8001392:	464a      	mov	r2, r9
 8001394:	4302      	orrs	r2, r0
 8001396:	d000      	beq.n	800139a <__aeabi_dadd+0x206>
 8001398:	e1e3      	b.n	8001762 <__aeabi_dadd+0x5ce>
 800139a:	074a      	lsls	r2, r1, #29
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	4313      	orrs	r3, r2
 80013a0:	08c9      	lsrs	r1, r1, #3
 80013a2:	e029      	b.n	80013f8 <__aeabi_dadd+0x264>
 80013a4:	464a      	mov	r2, r9
 80013a6:	4302      	orrs	r2, r0
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x218>
 80013aa:	e17d      	b.n	80016a8 <__aeabi_dadd+0x514>
 80013ac:	1e7a      	subs	r2, r7, #1
 80013ae:	2f01      	cmp	r7, #1
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x220>
 80013b2:	e0e0      	b.n	8001576 <__aeabi_dadd+0x3e2>
 80013b4:	4c52      	ldr	r4, [pc, #328]	; (8001500 <__aeabi_dadd+0x36c>)
 80013b6:	42a7      	cmp	r7, r4
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x228>
 80013ba:	e166      	b.n	800168a <__aeabi_dadd+0x4f6>
 80013bc:	0017      	movs	r7, r2
 80013be:	e7b2      	b.n	8001326 <__aeabi_dadd+0x192>
 80013c0:	0010      	movs	r0, r2
 80013c2:	3b1f      	subs	r3, #31
 80013c4:	40d8      	lsrs	r0, r3
 80013c6:	2920      	cmp	r1, #32
 80013c8:	d003      	beq.n	80013d2 <__aeabi_dadd+0x23e>
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	1a5b      	subs	r3, r3, r1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	4314      	orrs	r4, r2
 80013d2:	1e63      	subs	r3, r4, #1
 80013d4:	419c      	sbcs	r4, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	2600      	movs	r6, #0
 80013da:	469a      	mov	sl, r3
 80013dc:	4304      	orrs	r4, r0
 80013de:	0763      	lsls	r3, r4, #29
 80013e0:	d000      	beq.n	80013e4 <__aeabi_dadd+0x250>
 80013e2:	e755      	b.n	8001290 <__aeabi_dadd+0xfc>
 80013e4:	4652      	mov	r2, sl
 80013e6:	08e3      	lsrs	r3, r4, #3
 80013e8:	0752      	lsls	r2, r2, #29
 80013ea:	4313      	orrs	r3, r2
 80013ec:	4652      	mov	r2, sl
 80013ee:	0037      	movs	r7, r6
 80013f0:	08d1      	lsrs	r1, r2, #3
 80013f2:	4a43      	ldr	r2, [pc, #268]	; (8001500 <__aeabi_dadd+0x36c>)
 80013f4:	4297      	cmp	r7, r2
 80013f6:	d01f      	beq.n	8001438 <__aeabi_dadd+0x2a4>
 80013f8:	0309      	lsls	r1, r1, #12
 80013fa:	057a      	lsls	r2, r7, #21
 80013fc:	0b0c      	lsrs	r4, r1, #12
 80013fe:	0d52      	lsrs	r2, r2, #21
 8001400:	e764      	b.n	80012cc <__aeabi_dadd+0x138>
 8001402:	4642      	mov	r2, r8
 8001404:	464c      	mov	r4, r9
 8001406:	4314      	orrs	r4, r2
 8001408:	1e62      	subs	r2, r4, #1
 800140a:	4194      	sbcs	r4, r2
 800140c:	18e4      	adds	r4, r4, r3
 800140e:	429c      	cmp	r4, r3
 8001410:	4192      	sbcs	r2, r2
 8001412:	4252      	negs	r2, r2
 8001414:	4692      	mov	sl, r2
 8001416:	448a      	add	sl, r1
 8001418:	4653      	mov	r3, sl
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	d5df      	bpl.n	80013de <__aeabi_dadd+0x24a>
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <__aeabi_dadd+0x36c>)
 8001420:	3601      	adds	r6, #1
 8001422:	429e      	cmp	r6, r3
 8001424:	d000      	beq.n	8001428 <__aeabi_dadd+0x294>
 8001426:	e0b3      	b.n	8001590 <__aeabi_dadd+0x3fc>
 8001428:	0032      	movs	r2, r6
 800142a:	2400      	movs	r4, #0
 800142c:	2300      	movs	r3, #0
 800142e:	e74d      	b.n	80012cc <__aeabi_dadd+0x138>
 8001430:	074a      	lsls	r2, r1, #29
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	4313      	orrs	r3, r2
 8001436:	08c9      	lsrs	r1, r1, #3
 8001438:	001a      	movs	r2, r3
 800143a:	430a      	orrs	r2, r1
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x2ac>
 800143e:	e200      	b.n	8001842 <__aeabi_dadd+0x6ae>
 8001440:	2480      	movs	r4, #128	; 0x80
 8001442:	0324      	lsls	r4, r4, #12
 8001444:	430c      	orrs	r4, r1
 8001446:	0324      	lsls	r4, r4, #12
 8001448:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <__aeabi_dadd+0x36c>)
 800144a:	0b24      	lsrs	r4, r4, #12
 800144c:	e73e      	b.n	80012cc <__aeabi_dadd+0x138>
 800144e:	0020      	movs	r0, r4
 8001450:	f001 fdb6 	bl	8002fc0 <__clzsi2>
 8001454:	0003      	movs	r3, r0
 8001456:	3318      	adds	r3, #24
 8001458:	2b1f      	cmp	r3, #31
 800145a:	dc00      	bgt.n	800145e <__aeabi_dadd+0x2ca>
 800145c:	e6f7      	b.n	800124e <__aeabi_dadd+0xba>
 800145e:	0022      	movs	r2, r4
 8001460:	3808      	subs	r0, #8
 8001462:	4082      	lsls	r2, r0
 8001464:	2400      	movs	r4, #0
 8001466:	42b3      	cmp	r3, r6
 8001468:	db00      	blt.n	800146c <__aeabi_dadd+0x2d8>
 800146a:	e6fc      	b.n	8001266 <__aeabi_dadd+0xd2>
 800146c:	1af6      	subs	r6, r6, r3
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <__aeabi_dadd+0x370>)
 8001470:	401a      	ands	r2, r3
 8001472:	4692      	mov	sl, r2
 8001474:	e70a      	b.n	800128c <__aeabi_dadd+0xf8>
 8001476:	2f00      	cmp	r7, #0
 8001478:	d02b      	beq.n	80014d2 <__aeabi_dadd+0x33e>
 800147a:	1b97      	subs	r7, r2, r6
 800147c:	2e00      	cmp	r6, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x2ee>
 8001480:	e0b8      	b.n	80015f4 <__aeabi_dadd+0x460>
 8001482:	4c1f      	ldr	r4, [pc, #124]	; (8001500 <__aeabi_dadd+0x36c>)
 8001484:	42a2      	cmp	r2, r4
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x2f6>
 8001488:	e11c      	b.n	80016c4 <__aeabi_dadd+0x530>
 800148a:	2480      	movs	r4, #128	; 0x80
 800148c:	0424      	lsls	r4, r4, #16
 800148e:	4321      	orrs	r1, r4
 8001490:	2f38      	cmp	r7, #56	; 0x38
 8001492:	dd00      	ble.n	8001496 <__aeabi_dadd+0x302>
 8001494:	e11e      	b.n	80016d4 <__aeabi_dadd+0x540>
 8001496:	2f1f      	cmp	r7, #31
 8001498:	dd00      	ble.n	800149c <__aeabi_dadd+0x308>
 800149a:	e19e      	b.n	80017da <__aeabi_dadd+0x646>
 800149c:	2620      	movs	r6, #32
 800149e:	000c      	movs	r4, r1
 80014a0:	1bf6      	subs	r6, r6, r7
 80014a2:	0018      	movs	r0, r3
 80014a4:	40b3      	lsls	r3, r6
 80014a6:	40b4      	lsls	r4, r6
 80014a8:	40f8      	lsrs	r0, r7
 80014aa:	1e5e      	subs	r6, r3, #1
 80014ac:	41b3      	sbcs	r3, r6
 80014ae:	40f9      	lsrs	r1, r7
 80014b0:	4304      	orrs	r4, r0
 80014b2:	431c      	orrs	r4, r3
 80014b4:	4489      	add	r9, r1
 80014b6:	4444      	add	r4, r8
 80014b8:	4544      	cmp	r4, r8
 80014ba:	419b      	sbcs	r3, r3
 80014bc:	425b      	negs	r3, r3
 80014be:	444b      	add	r3, r9
 80014c0:	469a      	mov	sl, r3
 80014c2:	0016      	movs	r6, r2
 80014c4:	e7a8      	b.n	8001418 <__aeabi_dadd+0x284>
 80014c6:	4642      	mov	r2, r8
 80014c8:	464c      	mov	r4, r9
 80014ca:	4314      	orrs	r4, r2
 80014cc:	1e62      	subs	r2, r4, #1
 80014ce:	4194      	sbcs	r4, r2
 80014d0:	e6a6      	b.n	8001220 <__aeabi_dadd+0x8c>
 80014d2:	4c0d      	ldr	r4, [pc, #52]	; (8001508 <__aeabi_dadd+0x374>)
 80014d4:	1c72      	adds	r2, r6, #1
 80014d6:	4222      	tst	r2, r4
 80014d8:	d000      	beq.n	80014dc <__aeabi_dadd+0x348>
 80014da:	e0a8      	b.n	800162e <__aeabi_dadd+0x49a>
 80014dc:	000a      	movs	r2, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	2e00      	cmp	r6, #0
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x352>
 80014e4:	e10a      	b.n	80016fc <__aeabi_dadd+0x568>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x358>
 80014ea:	e15e      	b.n	80017aa <__aeabi_dadd+0x616>
 80014ec:	464a      	mov	r2, r9
 80014ee:	4302      	orrs	r2, r0
 80014f0:	d000      	beq.n	80014f4 <__aeabi_dadd+0x360>
 80014f2:	e161      	b.n	80017b8 <__aeabi_dadd+0x624>
 80014f4:	074a      	lsls	r2, r1, #29
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	08c9      	lsrs	r1, r1, #3
 80014fc:	e77c      	b.n	80013f8 <__aeabi_dadd+0x264>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	000007ff 	.word	0x000007ff
 8001504:	ff7fffff 	.word	0xff7fffff
 8001508:	000007fe 	.word	0x000007fe
 800150c:	4ccf      	ldr	r4, [pc, #828]	; (800184c <__aeabi_dadd+0x6b8>)
 800150e:	42a2      	cmp	r2, r4
 8001510:	d100      	bne.n	8001514 <__aeabi_dadd+0x380>
 8001512:	e0ce      	b.n	80016b2 <__aeabi_dadd+0x51e>
 8001514:	2480      	movs	r4, #128	; 0x80
 8001516:	0424      	lsls	r4, r4, #16
 8001518:	4321      	orrs	r1, r4
 800151a:	2f38      	cmp	r7, #56	; 0x38
 800151c:	dc5b      	bgt.n	80015d6 <__aeabi_dadd+0x442>
 800151e:	2f1f      	cmp	r7, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x390>
 8001522:	e0dc      	b.n	80016de <__aeabi_dadd+0x54a>
 8001524:	2520      	movs	r5, #32
 8001526:	000c      	movs	r4, r1
 8001528:	1bed      	subs	r5, r5, r7
 800152a:	001e      	movs	r6, r3
 800152c:	40ab      	lsls	r3, r5
 800152e:	40ac      	lsls	r4, r5
 8001530:	40fe      	lsrs	r6, r7
 8001532:	1e5d      	subs	r5, r3, #1
 8001534:	41ab      	sbcs	r3, r5
 8001536:	4334      	orrs	r4, r6
 8001538:	40f9      	lsrs	r1, r7
 800153a:	431c      	orrs	r4, r3
 800153c:	464b      	mov	r3, r9
 800153e:	1a5b      	subs	r3, r3, r1
 8001540:	4699      	mov	r9, r3
 8001542:	e04c      	b.n	80015de <__aeabi_dadd+0x44a>
 8001544:	464a      	mov	r2, r9
 8001546:	1a1c      	subs	r4, r3, r0
 8001548:	1a88      	subs	r0, r1, r2
 800154a:	42a3      	cmp	r3, r4
 800154c:	4192      	sbcs	r2, r2
 800154e:	4252      	negs	r2, r2
 8001550:	4692      	mov	sl, r2
 8001552:	0002      	movs	r2, r0
 8001554:	4650      	mov	r0, sl
 8001556:	1a12      	subs	r2, r2, r0
 8001558:	4692      	mov	sl, r2
 800155a:	0212      	lsls	r2, r2, #8
 800155c:	d478      	bmi.n	8001650 <__aeabi_dadd+0x4bc>
 800155e:	4653      	mov	r3, sl
 8001560:	4323      	orrs	r3, r4
 8001562:	d000      	beq.n	8001566 <__aeabi_dadd+0x3d2>
 8001564:	e66a      	b.n	800123c <__aeabi_dadd+0xa8>
 8001566:	2100      	movs	r1, #0
 8001568:	2500      	movs	r5, #0
 800156a:	e745      	b.n	80013f8 <__aeabi_dadd+0x264>
 800156c:	074a      	lsls	r2, r1, #29
 800156e:	08db      	lsrs	r3, r3, #3
 8001570:	4313      	orrs	r3, r2
 8001572:	08c9      	lsrs	r1, r1, #3
 8001574:	e73d      	b.n	80013f2 <__aeabi_dadd+0x25e>
 8001576:	181c      	adds	r4, r3, r0
 8001578:	429c      	cmp	r4, r3
 800157a:	419b      	sbcs	r3, r3
 800157c:	4449      	add	r1, r9
 800157e:	468a      	mov	sl, r1
 8001580:	425b      	negs	r3, r3
 8001582:	449a      	add	sl, r3
 8001584:	4653      	mov	r3, sl
 8001586:	2601      	movs	r6, #1
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	d400      	bmi.n	800158e <__aeabi_dadd+0x3fa>
 800158c:	e727      	b.n	80013de <__aeabi_dadd+0x24a>
 800158e:	2602      	movs	r6, #2
 8001590:	4652      	mov	r2, sl
 8001592:	4baf      	ldr	r3, [pc, #700]	; (8001850 <__aeabi_dadd+0x6bc>)
 8001594:	2101      	movs	r1, #1
 8001596:	401a      	ands	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	4021      	ands	r1, r4
 800159c:	0862      	lsrs	r2, r4, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	07dc      	lsls	r4, r3, #31
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	469a      	mov	sl, r3
 80015a6:	4314      	orrs	r4, r2
 80015a8:	e670      	b.n	800128c <__aeabi_dadd+0xf8>
 80015aa:	003a      	movs	r2, r7
 80015ac:	464c      	mov	r4, r9
 80015ae:	3a20      	subs	r2, #32
 80015b0:	40d4      	lsrs	r4, r2
 80015b2:	46a4      	mov	ip, r4
 80015b4:	2f20      	cmp	r7, #32
 80015b6:	d007      	beq.n	80015c8 <__aeabi_dadd+0x434>
 80015b8:	2240      	movs	r2, #64	; 0x40
 80015ba:	4648      	mov	r0, r9
 80015bc:	1bd2      	subs	r2, r2, r7
 80015be:	4090      	lsls	r0, r2
 80015c0:	0002      	movs	r2, r0
 80015c2:	4640      	mov	r0, r8
 80015c4:	4310      	orrs	r0, r2
 80015c6:	4680      	mov	r8, r0
 80015c8:	4640      	mov	r0, r8
 80015ca:	1e42      	subs	r2, r0, #1
 80015cc:	4190      	sbcs	r0, r2
 80015ce:	4662      	mov	r2, ip
 80015d0:	0004      	movs	r4, r0
 80015d2:	4314      	orrs	r4, r2
 80015d4:	e624      	b.n	8001220 <__aeabi_dadd+0x8c>
 80015d6:	4319      	orrs	r1, r3
 80015d8:	000c      	movs	r4, r1
 80015da:	1e63      	subs	r3, r4, #1
 80015dc:	419c      	sbcs	r4, r3
 80015de:	4643      	mov	r3, r8
 80015e0:	1b1c      	subs	r4, r3, r4
 80015e2:	45a0      	cmp	r8, r4
 80015e4:	419b      	sbcs	r3, r3
 80015e6:	4649      	mov	r1, r9
 80015e8:	425b      	negs	r3, r3
 80015ea:	1acb      	subs	r3, r1, r3
 80015ec:	469a      	mov	sl, r3
 80015ee:	4665      	mov	r5, ip
 80015f0:	0016      	movs	r6, r2
 80015f2:	e61b      	b.n	800122c <__aeabi_dadd+0x98>
 80015f4:	000c      	movs	r4, r1
 80015f6:	431c      	orrs	r4, r3
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x468>
 80015fa:	e0c7      	b.n	800178c <__aeabi_dadd+0x5f8>
 80015fc:	1e7c      	subs	r4, r7, #1
 80015fe:	2f01      	cmp	r7, #1
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x470>
 8001602:	e0f9      	b.n	80017f8 <__aeabi_dadd+0x664>
 8001604:	4e91      	ldr	r6, [pc, #580]	; (800184c <__aeabi_dadd+0x6b8>)
 8001606:	42b7      	cmp	r7, r6
 8001608:	d05c      	beq.n	80016c4 <__aeabi_dadd+0x530>
 800160a:	0027      	movs	r7, r4
 800160c:	e740      	b.n	8001490 <__aeabi_dadd+0x2fc>
 800160e:	2220      	movs	r2, #32
 8001610:	464c      	mov	r4, r9
 8001612:	4640      	mov	r0, r8
 8001614:	1bd2      	subs	r2, r2, r7
 8001616:	4094      	lsls	r4, r2
 8001618:	40f8      	lsrs	r0, r7
 800161a:	4304      	orrs	r4, r0
 800161c:	4640      	mov	r0, r8
 800161e:	4090      	lsls	r0, r2
 8001620:	1e42      	subs	r2, r0, #1
 8001622:	4190      	sbcs	r0, r2
 8001624:	464a      	mov	r2, r9
 8001626:	40fa      	lsrs	r2, r7
 8001628:	4304      	orrs	r4, r0
 800162a:	1889      	adds	r1, r1, r2
 800162c:	e6ee      	b.n	800140c <__aeabi_dadd+0x278>
 800162e:	4c87      	ldr	r4, [pc, #540]	; (800184c <__aeabi_dadd+0x6b8>)
 8001630:	42a2      	cmp	r2, r4
 8001632:	d100      	bne.n	8001636 <__aeabi_dadd+0x4a2>
 8001634:	e6f9      	b.n	800142a <__aeabi_dadd+0x296>
 8001636:	1818      	adds	r0, r3, r0
 8001638:	4298      	cmp	r0, r3
 800163a:	419b      	sbcs	r3, r3
 800163c:	4449      	add	r1, r9
 800163e:	425b      	negs	r3, r3
 8001640:	18cb      	adds	r3, r1, r3
 8001642:	07dc      	lsls	r4, r3, #31
 8001644:	0840      	lsrs	r0, r0, #1
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	469a      	mov	sl, r3
 800164a:	0016      	movs	r6, r2
 800164c:	4304      	orrs	r4, r0
 800164e:	e6c6      	b.n	80013de <__aeabi_dadd+0x24a>
 8001650:	4642      	mov	r2, r8
 8001652:	1ad4      	subs	r4, r2, r3
 8001654:	45a0      	cmp	r8, r4
 8001656:	4180      	sbcs	r0, r0
 8001658:	464b      	mov	r3, r9
 800165a:	4240      	negs	r0, r0
 800165c:	1a59      	subs	r1, r3, r1
 800165e:	1a0b      	subs	r3, r1, r0
 8001660:	469a      	mov	sl, r3
 8001662:	4665      	mov	r5, ip
 8001664:	e5ea      	b.n	800123c <__aeabi_dadd+0xa8>
 8001666:	464b      	mov	r3, r9
 8001668:	464a      	mov	r2, r9
 800166a:	08c0      	lsrs	r0, r0, #3
 800166c:	075b      	lsls	r3, r3, #29
 800166e:	4665      	mov	r5, ip
 8001670:	4303      	orrs	r3, r0
 8001672:	08d1      	lsrs	r1, r2, #3
 8001674:	e6bd      	b.n	80013f2 <__aeabi_dadd+0x25e>
 8001676:	2a00      	cmp	r2, #0
 8001678:	d000      	beq.n	800167c <__aeabi_dadd+0x4e8>
 800167a:	e08e      	b.n	800179a <__aeabi_dadd+0x606>
 800167c:	464b      	mov	r3, r9
 800167e:	4303      	orrs	r3, r0
 8001680:	d117      	bne.n	80016b2 <__aeabi_dadd+0x51e>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	2500      	movs	r5, #0
 8001686:	0309      	lsls	r1, r1, #12
 8001688:	e6da      	b.n	8001440 <__aeabi_dadd+0x2ac>
 800168a:	074a      	lsls	r2, r1, #29
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	4313      	orrs	r3, r2
 8001690:	08c9      	lsrs	r1, r1, #3
 8001692:	e6d1      	b.n	8001438 <__aeabi_dadd+0x2a4>
 8001694:	1a1c      	subs	r4, r3, r0
 8001696:	464a      	mov	r2, r9
 8001698:	42a3      	cmp	r3, r4
 800169a:	419b      	sbcs	r3, r3
 800169c:	1a89      	subs	r1, r1, r2
 800169e:	425b      	negs	r3, r3
 80016a0:	1acb      	subs	r3, r1, r3
 80016a2:	469a      	mov	sl, r3
 80016a4:	2601      	movs	r6, #1
 80016a6:	e5c1      	b.n	800122c <__aeabi_dadd+0x98>
 80016a8:	074a      	lsls	r2, r1, #29
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	08c9      	lsrs	r1, r1, #3
 80016b0:	e69f      	b.n	80013f2 <__aeabi_dadd+0x25e>
 80016b2:	4643      	mov	r3, r8
 80016b4:	08d8      	lsrs	r0, r3, #3
 80016b6:	464b      	mov	r3, r9
 80016b8:	464a      	mov	r2, r9
 80016ba:	075b      	lsls	r3, r3, #29
 80016bc:	4665      	mov	r5, ip
 80016be:	4303      	orrs	r3, r0
 80016c0:	08d1      	lsrs	r1, r2, #3
 80016c2:	e6b9      	b.n	8001438 <__aeabi_dadd+0x2a4>
 80016c4:	4643      	mov	r3, r8
 80016c6:	08d8      	lsrs	r0, r3, #3
 80016c8:	464b      	mov	r3, r9
 80016ca:	464a      	mov	r2, r9
 80016cc:	075b      	lsls	r3, r3, #29
 80016ce:	4303      	orrs	r3, r0
 80016d0:	08d1      	lsrs	r1, r2, #3
 80016d2:	e6b1      	b.n	8001438 <__aeabi_dadd+0x2a4>
 80016d4:	4319      	orrs	r1, r3
 80016d6:	000c      	movs	r4, r1
 80016d8:	1e63      	subs	r3, r4, #1
 80016da:	419c      	sbcs	r4, r3
 80016dc:	e6eb      	b.n	80014b6 <__aeabi_dadd+0x322>
 80016de:	003c      	movs	r4, r7
 80016e0:	000d      	movs	r5, r1
 80016e2:	3c20      	subs	r4, #32
 80016e4:	40e5      	lsrs	r5, r4
 80016e6:	2f20      	cmp	r7, #32
 80016e8:	d003      	beq.n	80016f2 <__aeabi_dadd+0x55e>
 80016ea:	2440      	movs	r4, #64	; 0x40
 80016ec:	1be4      	subs	r4, r4, r7
 80016ee:	40a1      	lsls	r1, r4
 80016f0:	430b      	orrs	r3, r1
 80016f2:	001c      	movs	r4, r3
 80016f4:	1e63      	subs	r3, r4, #1
 80016f6:	419c      	sbcs	r4, r3
 80016f8:	432c      	orrs	r4, r5
 80016fa:	e770      	b.n	80015de <__aeabi_dadd+0x44a>
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	d0e1      	beq.n	80016c4 <__aeabi_dadd+0x530>
 8001700:	464a      	mov	r2, r9
 8001702:	4302      	orrs	r2, r0
 8001704:	d0c1      	beq.n	800168a <__aeabi_dadd+0x4f6>
 8001706:	074a      	lsls	r2, r1, #29
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	4313      	orrs	r3, r2
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	08c9      	lsrs	r1, r1, #3
 8001710:	0312      	lsls	r2, r2, #12
 8001712:	4211      	tst	r1, r2
 8001714:	d008      	beq.n	8001728 <__aeabi_dadd+0x594>
 8001716:	4648      	mov	r0, r9
 8001718:	08c4      	lsrs	r4, r0, #3
 800171a:	4214      	tst	r4, r2
 800171c:	d104      	bne.n	8001728 <__aeabi_dadd+0x594>
 800171e:	4643      	mov	r3, r8
 8001720:	0021      	movs	r1, r4
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	0742      	lsls	r2, r0, #29
 8001726:	4313      	orrs	r3, r2
 8001728:	0f5a      	lsrs	r2, r3, #29
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	0752      	lsls	r2, r2, #29
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	4313      	orrs	r3, r2
 8001732:	e681      	b.n	8001438 <__aeabi_dadd+0x2a4>
 8001734:	464b      	mov	r3, r9
 8001736:	4303      	orrs	r3, r0
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x5a8>
 800173a:	e714      	b.n	8001566 <__aeabi_dadd+0x3d2>
 800173c:	464b      	mov	r3, r9
 800173e:	464a      	mov	r2, r9
 8001740:	08c0      	lsrs	r0, r0, #3
 8001742:	075b      	lsls	r3, r3, #29
 8001744:	4665      	mov	r5, ip
 8001746:	4303      	orrs	r3, r0
 8001748:	08d1      	lsrs	r1, r2, #3
 800174a:	e655      	b.n	80013f8 <__aeabi_dadd+0x264>
 800174c:	1ac4      	subs	r4, r0, r3
 800174e:	45a0      	cmp	r8, r4
 8001750:	4180      	sbcs	r0, r0
 8001752:	464b      	mov	r3, r9
 8001754:	4240      	negs	r0, r0
 8001756:	1a59      	subs	r1, r3, r1
 8001758:	1a0b      	subs	r3, r1, r0
 800175a:	469a      	mov	sl, r3
 800175c:	4665      	mov	r5, ip
 800175e:	2601      	movs	r6, #1
 8001760:	e564      	b.n	800122c <__aeabi_dadd+0x98>
 8001762:	1a1c      	subs	r4, r3, r0
 8001764:	464a      	mov	r2, r9
 8001766:	42a3      	cmp	r3, r4
 8001768:	4180      	sbcs	r0, r0
 800176a:	1a8a      	subs	r2, r1, r2
 800176c:	4240      	negs	r0, r0
 800176e:	1a12      	subs	r2, r2, r0
 8001770:	4692      	mov	sl, r2
 8001772:	0212      	lsls	r2, r2, #8
 8001774:	d549      	bpl.n	800180a <__aeabi_dadd+0x676>
 8001776:	4642      	mov	r2, r8
 8001778:	1ad4      	subs	r4, r2, r3
 800177a:	45a0      	cmp	r8, r4
 800177c:	4180      	sbcs	r0, r0
 800177e:	464b      	mov	r3, r9
 8001780:	4240      	negs	r0, r0
 8001782:	1a59      	subs	r1, r3, r1
 8001784:	1a0b      	subs	r3, r1, r0
 8001786:	469a      	mov	sl, r3
 8001788:	4665      	mov	r5, ip
 800178a:	e57f      	b.n	800128c <__aeabi_dadd+0xf8>
 800178c:	464b      	mov	r3, r9
 800178e:	464a      	mov	r2, r9
 8001790:	08c0      	lsrs	r0, r0, #3
 8001792:	075b      	lsls	r3, r3, #29
 8001794:	4303      	orrs	r3, r0
 8001796:	08d1      	lsrs	r1, r2, #3
 8001798:	e62b      	b.n	80013f2 <__aeabi_dadd+0x25e>
 800179a:	464a      	mov	r2, r9
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	4302      	orrs	r2, r0
 80017a0:	d138      	bne.n	8001814 <__aeabi_dadd+0x680>
 80017a2:	074a      	lsls	r2, r1, #29
 80017a4:	4313      	orrs	r3, r2
 80017a6:	08c9      	lsrs	r1, r1, #3
 80017a8:	e646      	b.n	8001438 <__aeabi_dadd+0x2a4>
 80017aa:	464b      	mov	r3, r9
 80017ac:	464a      	mov	r2, r9
 80017ae:	08c0      	lsrs	r0, r0, #3
 80017b0:	075b      	lsls	r3, r3, #29
 80017b2:	4303      	orrs	r3, r0
 80017b4:	08d1      	lsrs	r1, r2, #3
 80017b6:	e61f      	b.n	80013f8 <__aeabi_dadd+0x264>
 80017b8:	181c      	adds	r4, r3, r0
 80017ba:	429c      	cmp	r4, r3
 80017bc:	419b      	sbcs	r3, r3
 80017be:	4449      	add	r1, r9
 80017c0:	468a      	mov	sl, r1
 80017c2:	425b      	negs	r3, r3
 80017c4:	449a      	add	sl, r3
 80017c6:	4653      	mov	r3, sl
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	d400      	bmi.n	80017ce <__aeabi_dadd+0x63a>
 80017cc:	e607      	b.n	80013de <__aeabi_dadd+0x24a>
 80017ce:	4652      	mov	r2, sl
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <__aeabi_dadd+0x6bc>)
 80017d2:	2601      	movs	r6, #1
 80017d4:	401a      	ands	r2, r3
 80017d6:	4692      	mov	sl, r2
 80017d8:	e601      	b.n	80013de <__aeabi_dadd+0x24a>
 80017da:	003c      	movs	r4, r7
 80017dc:	000e      	movs	r6, r1
 80017de:	3c20      	subs	r4, #32
 80017e0:	40e6      	lsrs	r6, r4
 80017e2:	2f20      	cmp	r7, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x65a>
 80017e6:	2440      	movs	r4, #64	; 0x40
 80017e8:	1be4      	subs	r4, r4, r7
 80017ea:	40a1      	lsls	r1, r4
 80017ec:	430b      	orrs	r3, r1
 80017ee:	001c      	movs	r4, r3
 80017f0:	1e63      	subs	r3, r4, #1
 80017f2:	419c      	sbcs	r4, r3
 80017f4:	4334      	orrs	r4, r6
 80017f6:	e65e      	b.n	80014b6 <__aeabi_dadd+0x322>
 80017f8:	4443      	add	r3, r8
 80017fa:	4283      	cmp	r3, r0
 80017fc:	4180      	sbcs	r0, r0
 80017fe:	4449      	add	r1, r9
 8001800:	468a      	mov	sl, r1
 8001802:	4240      	negs	r0, r0
 8001804:	001c      	movs	r4, r3
 8001806:	4482      	add	sl, r0
 8001808:	e6bc      	b.n	8001584 <__aeabi_dadd+0x3f0>
 800180a:	4653      	mov	r3, sl
 800180c:	4323      	orrs	r3, r4
 800180e:	d100      	bne.n	8001812 <__aeabi_dadd+0x67e>
 8001810:	e6a9      	b.n	8001566 <__aeabi_dadd+0x3d2>
 8001812:	e5e4      	b.n	80013de <__aeabi_dadd+0x24a>
 8001814:	074a      	lsls	r2, r1, #29
 8001816:	4313      	orrs	r3, r2
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	08c9      	lsrs	r1, r1, #3
 800181c:	0312      	lsls	r2, r2, #12
 800181e:	4211      	tst	r1, r2
 8001820:	d009      	beq.n	8001836 <__aeabi_dadd+0x6a2>
 8001822:	4648      	mov	r0, r9
 8001824:	08c4      	lsrs	r4, r0, #3
 8001826:	4214      	tst	r4, r2
 8001828:	d105      	bne.n	8001836 <__aeabi_dadd+0x6a2>
 800182a:	4643      	mov	r3, r8
 800182c:	4665      	mov	r5, ip
 800182e:	0021      	movs	r1, r4
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	0742      	lsls	r2, r0, #29
 8001834:	4313      	orrs	r3, r2
 8001836:	0f5a      	lsrs	r2, r3, #29
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	0752      	lsls	r2, r2, #29
 800183e:	4313      	orrs	r3, r2
 8001840:	e5fa      	b.n	8001438 <__aeabi_dadd+0x2a4>
 8001842:	2300      	movs	r3, #0
 8001844:	4a01      	ldr	r2, [pc, #4]	; (800184c <__aeabi_dadd+0x6b8>)
 8001846:	001c      	movs	r4, r3
 8001848:	e540      	b.n	80012cc <__aeabi_dadd+0x138>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff

08001854 <__aeabi_ddiv>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	4657      	mov	r7, sl
 8001858:	464e      	mov	r6, r9
 800185a:	4645      	mov	r5, r8
 800185c:	46de      	mov	lr, fp
 800185e:	b5e0      	push	{r5, r6, r7, lr}
 8001860:	030c      	lsls	r4, r1, #12
 8001862:	001f      	movs	r7, r3
 8001864:	004b      	lsls	r3, r1, #1
 8001866:	4681      	mov	r9, r0
 8001868:	4692      	mov	sl, r2
 800186a:	0005      	movs	r5, r0
 800186c:	b085      	sub	sp, #20
 800186e:	0b24      	lsrs	r4, r4, #12
 8001870:	0d5b      	lsrs	r3, r3, #21
 8001872:	0fce      	lsrs	r6, r1, #31
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0x26>
 8001878:	e152      	b.n	8001b20 <__aeabi_ddiv+0x2cc>
 800187a:	4ad2      	ldr	r2, [pc, #840]	; (8001bc4 <__aeabi_ddiv+0x370>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_ddiv+0x2e>
 8001880:	e16e      	b.n	8001b60 <__aeabi_ddiv+0x30c>
 8001882:	0f42      	lsrs	r2, r0, #29
 8001884:	00e4      	lsls	r4, r4, #3
 8001886:	4314      	orrs	r4, r2
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0412      	lsls	r2, r2, #16
 800188c:	4322      	orrs	r2, r4
 800188e:	4690      	mov	r8, r2
 8001890:	4acd      	ldr	r2, [pc, #820]	; (8001bc8 <__aeabi_ddiv+0x374>)
 8001892:	00c5      	lsls	r5, r0, #3
 8001894:	4693      	mov	fp, r2
 8001896:	449b      	add	fp, r3
 8001898:	2300      	movs	r3, #0
 800189a:	4699      	mov	r9, r3
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	033c      	lsls	r4, r7, #12
 80018a0:	007b      	lsls	r3, r7, #1
 80018a2:	4650      	mov	r0, sl
 80018a4:	0b24      	lsrs	r4, r4, #12
 80018a6:	0d5b      	lsrs	r3, r3, #21
 80018a8:	0fff      	lsrs	r7, r7, #31
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_ddiv+0x5c>
 80018ae:	e11a      	b.n	8001ae6 <__aeabi_ddiv+0x292>
 80018b0:	4ac4      	ldr	r2, [pc, #784]	; (8001bc4 <__aeabi_ddiv+0x370>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d100      	bne.n	80018b8 <__aeabi_ddiv+0x64>
 80018b6:	e15e      	b.n	8001b76 <__aeabi_ddiv+0x322>
 80018b8:	0f42      	lsrs	r2, r0, #29
 80018ba:	00e4      	lsls	r4, r4, #3
 80018bc:	4322      	orrs	r2, r4
 80018be:	2480      	movs	r4, #128	; 0x80
 80018c0:	0424      	lsls	r4, r4, #16
 80018c2:	4314      	orrs	r4, r2
 80018c4:	4ac0      	ldr	r2, [pc, #768]	; (8001bc8 <__aeabi_ddiv+0x374>)
 80018c6:	00c1      	lsls	r1, r0, #3
 80018c8:	4694      	mov	ip, r2
 80018ca:	465a      	mov	r2, fp
 80018cc:	4463      	add	r3, ip
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	469b      	mov	fp, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	0033      	movs	r3, r6
 80018d6:	407b      	eors	r3, r7
 80018d8:	469a      	mov	sl, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d827      	bhi.n	8001930 <__aeabi_ddiv+0xdc>
 80018e0:	4aba      	ldr	r2, [pc, #744]	; (8001bcc <__aeabi_ddiv+0x378>)
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	58d3      	ldr	r3, [r2, r3]
 80018e6:	469f      	mov	pc, r3
 80018e8:	46b2      	mov	sl, r6
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d016      	beq.n	800191e <__aeabi_ddiv+0xca>
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0xa2>
 80018f4:	e287      	b.n	8001e06 <__aeabi_ddiv+0x5b2>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d000      	beq.n	80018fc <__aeabi_ddiv+0xa8>
 80018fa:	e0d5      	b.n	8001aa8 <__aeabi_ddiv+0x254>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2200      	movs	r2, #0
 8001900:	2500      	movs	r5, #0
 8001902:	051b      	lsls	r3, r3, #20
 8001904:	4313      	orrs	r3, r2
 8001906:	4652      	mov	r2, sl
 8001908:	07d2      	lsls	r2, r2, #31
 800190a:	4313      	orrs	r3, r2
 800190c:	0028      	movs	r0, r5
 800190e:	0019      	movs	r1, r3
 8001910:	b005      	add	sp, #20
 8001912:	bcf0      	pop	{r4, r5, r6, r7}
 8001914:	46bb      	mov	fp, r7
 8001916:	46b2      	mov	sl, r6
 8001918:	46a9      	mov	r9, r5
 800191a:	46a0      	mov	r8, r4
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	2200      	movs	r2, #0
 8001920:	2500      	movs	r5, #0
 8001922:	4ba8      	ldr	r3, [pc, #672]	; (8001bc4 <__aeabi_ddiv+0x370>)
 8001924:	e7ed      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001926:	46ba      	mov	sl, r7
 8001928:	46a0      	mov	r8, r4
 800192a:	000d      	movs	r5, r1
 800192c:	9000      	str	r0, [sp, #0]
 800192e:	e7dc      	b.n	80018ea <__aeabi_ddiv+0x96>
 8001930:	4544      	cmp	r4, r8
 8001932:	d200      	bcs.n	8001936 <__aeabi_ddiv+0xe2>
 8001934:	e1c4      	b.n	8001cc0 <__aeabi_ddiv+0x46c>
 8001936:	d100      	bne.n	800193a <__aeabi_ddiv+0xe6>
 8001938:	e1bf      	b.n	8001cba <__aeabi_ddiv+0x466>
 800193a:	2301      	movs	r3, #1
 800193c:	425b      	negs	r3, r3
 800193e:	469c      	mov	ip, r3
 8001940:	002e      	movs	r6, r5
 8001942:	4640      	mov	r0, r8
 8001944:	2500      	movs	r5, #0
 8001946:	44e3      	add	fp, ip
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	0e0c      	lsrs	r4, r1, #24
 800194c:	431c      	orrs	r4, r3
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	4699      	mov	r9, r3
 8001952:	0423      	lsls	r3, r4, #16
 8001954:	020a      	lsls	r2, r1, #8
 8001956:	0c1f      	lsrs	r7, r3, #16
 8001958:	4649      	mov	r1, r9
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	9701      	str	r7, [sp, #4]
 800195e:	f7fe fc73 	bl	8000248 <__aeabi_uidivmod>
 8001962:	0002      	movs	r2, r0
 8001964:	437a      	muls	r2, r7
 8001966:	040b      	lsls	r3, r1, #16
 8001968:	0c31      	lsrs	r1, r6, #16
 800196a:	4680      	mov	r8, r0
 800196c:	4319      	orrs	r1, r3
 800196e:	428a      	cmp	r2, r1
 8001970:	d907      	bls.n	8001982 <__aeabi_ddiv+0x12e>
 8001972:	2301      	movs	r3, #1
 8001974:	425b      	negs	r3, r3
 8001976:	469c      	mov	ip, r3
 8001978:	1909      	adds	r1, r1, r4
 800197a:	44e0      	add	r8, ip
 800197c:	428c      	cmp	r4, r1
 800197e:	d800      	bhi.n	8001982 <__aeabi_ddiv+0x12e>
 8001980:	e201      	b.n	8001d86 <__aeabi_ddiv+0x532>
 8001982:	1a88      	subs	r0, r1, r2
 8001984:	4649      	mov	r1, r9
 8001986:	f7fe fc5f 	bl	8000248 <__aeabi_uidivmod>
 800198a:	9a01      	ldr	r2, [sp, #4]
 800198c:	0436      	lsls	r6, r6, #16
 800198e:	4342      	muls	r2, r0
 8001990:	0409      	lsls	r1, r1, #16
 8001992:	0c36      	lsrs	r6, r6, #16
 8001994:	0003      	movs	r3, r0
 8001996:	430e      	orrs	r6, r1
 8001998:	42b2      	cmp	r2, r6
 800199a:	d904      	bls.n	80019a6 <__aeabi_ddiv+0x152>
 800199c:	1936      	adds	r6, r6, r4
 800199e:	3b01      	subs	r3, #1
 80019a0:	42b4      	cmp	r4, r6
 80019a2:	d800      	bhi.n	80019a6 <__aeabi_ddiv+0x152>
 80019a4:	e1e9      	b.n	8001d7a <__aeabi_ddiv+0x526>
 80019a6:	1ab0      	subs	r0, r6, r2
 80019a8:	4642      	mov	r2, r8
 80019aa:	9e00      	ldr	r6, [sp, #0]
 80019ac:	0412      	lsls	r2, r2, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	0c33      	lsrs	r3, r6, #16
 80019b2:	001f      	movs	r7, r3
 80019b4:	0c11      	lsrs	r1, r2, #16
 80019b6:	4690      	mov	r8, r2
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	0413      	lsls	r3, r2, #16
 80019bc:	0432      	lsls	r2, r6, #16
 80019be:	0c16      	lsrs	r6, r2, #16
 80019c0:	0032      	movs	r2, r6
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	435a      	muls	r2, r3
 80019c6:	9603      	str	r6, [sp, #12]
 80019c8:	437b      	muls	r3, r7
 80019ca:	434e      	muls	r6, r1
 80019cc:	4379      	muls	r1, r7
 80019ce:	0c17      	lsrs	r7, r2, #16
 80019d0:	46bc      	mov	ip, r7
 80019d2:	199b      	adds	r3, r3, r6
 80019d4:	4463      	add	r3, ip
 80019d6:	429e      	cmp	r6, r3
 80019d8:	d903      	bls.n	80019e2 <__aeabi_ddiv+0x18e>
 80019da:	2680      	movs	r6, #128	; 0x80
 80019dc:	0276      	lsls	r6, r6, #9
 80019de:	46b4      	mov	ip, r6
 80019e0:	4461      	add	r1, ip
 80019e2:	0c1e      	lsrs	r6, r3, #16
 80019e4:	1871      	adds	r1, r6, r1
 80019e6:	0416      	lsls	r6, r2, #16
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	0c36      	lsrs	r6, r6, #16
 80019ec:	199e      	adds	r6, r3, r6
 80019ee:	4288      	cmp	r0, r1
 80019f0:	d302      	bcc.n	80019f8 <__aeabi_ddiv+0x1a4>
 80019f2:	d112      	bne.n	8001a1a <__aeabi_ddiv+0x1c6>
 80019f4:	42b5      	cmp	r5, r6
 80019f6:	d210      	bcs.n	8001a1a <__aeabi_ddiv+0x1c6>
 80019f8:	4643      	mov	r3, r8
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	469c      	mov	ip, r3
 8001a00:	4465      	add	r5, ip
 8001a02:	001f      	movs	r7, r3
 8001a04:	429d      	cmp	r5, r3
 8001a06:	419b      	sbcs	r3, r3
 8001a08:	425b      	negs	r3, r3
 8001a0a:	191b      	adds	r3, r3, r4
 8001a0c:	18c0      	adds	r0, r0, r3
 8001a0e:	4284      	cmp	r4, r0
 8001a10:	d200      	bcs.n	8001a14 <__aeabi_ddiv+0x1c0>
 8001a12:	e19e      	b.n	8001d52 <__aeabi_ddiv+0x4fe>
 8001a14:	d100      	bne.n	8001a18 <__aeabi_ddiv+0x1c4>
 8001a16:	e199      	b.n	8001d4c <__aeabi_ddiv+0x4f8>
 8001a18:	4690      	mov	r8, r2
 8001a1a:	1bae      	subs	r6, r5, r6
 8001a1c:	42b5      	cmp	r5, r6
 8001a1e:	41ad      	sbcs	r5, r5
 8001a20:	1a40      	subs	r0, r0, r1
 8001a22:	426d      	negs	r5, r5
 8001a24:	1b40      	subs	r0, r0, r5
 8001a26:	4284      	cmp	r4, r0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x1d8>
 8001a2a:	e1d2      	b.n	8001dd2 <__aeabi_ddiv+0x57e>
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	f7fe fc0b 	bl	8000248 <__aeabi_uidivmod>
 8001a32:	9a01      	ldr	r2, [sp, #4]
 8001a34:	040b      	lsls	r3, r1, #16
 8001a36:	4342      	muls	r2, r0
 8001a38:	0c31      	lsrs	r1, r6, #16
 8001a3a:	0005      	movs	r5, r0
 8001a3c:	4319      	orrs	r1, r3
 8001a3e:	428a      	cmp	r2, r1
 8001a40:	d900      	bls.n	8001a44 <__aeabi_ddiv+0x1f0>
 8001a42:	e16c      	b.n	8001d1e <__aeabi_ddiv+0x4ca>
 8001a44:	1a88      	subs	r0, r1, r2
 8001a46:	4649      	mov	r1, r9
 8001a48:	f7fe fbfe 	bl	8000248 <__aeabi_uidivmod>
 8001a4c:	9a01      	ldr	r2, [sp, #4]
 8001a4e:	0436      	lsls	r6, r6, #16
 8001a50:	4342      	muls	r2, r0
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	0c36      	lsrs	r6, r6, #16
 8001a56:	0003      	movs	r3, r0
 8001a58:	430e      	orrs	r6, r1
 8001a5a:	42b2      	cmp	r2, r6
 8001a5c:	d900      	bls.n	8001a60 <__aeabi_ddiv+0x20c>
 8001a5e:	e153      	b.n	8001d08 <__aeabi_ddiv+0x4b4>
 8001a60:	9803      	ldr	r0, [sp, #12]
 8001a62:	1ab6      	subs	r6, r6, r2
 8001a64:	0002      	movs	r2, r0
 8001a66:	042d      	lsls	r5, r5, #16
 8001a68:	431d      	orrs	r5, r3
 8001a6a:	9f02      	ldr	r7, [sp, #8]
 8001a6c:	042b      	lsls	r3, r5, #16
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	435a      	muls	r2, r3
 8001a72:	437b      	muls	r3, r7
 8001a74:	469c      	mov	ip, r3
 8001a76:	0c29      	lsrs	r1, r5, #16
 8001a78:	4348      	muls	r0, r1
 8001a7a:	0c13      	lsrs	r3, r2, #16
 8001a7c:	4484      	add	ip, r0
 8001a7e:	4463      	add	r3, ip
 8001a80:	4379      	muls	r1, r7
 8001a82:	4298      	cmp	r0, r3
 8001a84:	d903      	bls.n	8001a8e <__aeabi_ddiv+0x23a>
 8001a86:	2080      	movs	r0, #128	; 0x80
 8001a88:	0240      	lsls	r0, r0, #9
 8001a8a:	4684      	mov	ip, r0
 8001a8c:	4461      	add	r1, ip
 8001a8e:	0c18      	lsrs	r0, r3, #16
 8001a90:	0412      	lsls	r2, r2, #16
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	0c12      	lsrs	r2, r2, #16
 8001a96:	1840      	adds	r0, r0, r1
 8001a98:	189b      	adds	r3, r3, r2
 8001a9a:	4286      	cmp	r6, r0
 8001a9c:	d200      	bcs.n	8001aa0 <__aeabi_ddiv+0x24c>
 8001a9e:	e100      	b.n	8001ca2 <__aeabi_ddiv+0x44e>
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_ddiv+0x250>
 8001aa2:	e0fb      	b.n	8001c9c <__aeabi_ddiv+0x448>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	431d      	orrs	r5, r3
 8001aa8:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <__aeabi_ddiv+0x37c>)
 8001aaa:	445b      	add	r3, fp
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dc00      	bgt.n	8001ab2 <__aeabi_ddiv+0x25e>
 8001ab0:	e0aa      	b.n	8001c08 <__aeabi_ddiv+0x3b4>
 8001ab2:	076a      	lsls	r2, r5, #29
 8001ab4:	d000      	beq.n	8001ab8 <__aeabi_ddiv+0x264>
 8001ab6:	e13d      	b.n	8001d34 <__aeabi_ddiv+0x4e0>
 8001ab8:	08e9      	lsrs	r1, r5, #3
 8001aba:	4642      	mov	r2, r8
 8001abc:	01d2      	lsls	r2, r2, #7
 8001abe:	d506      	bpl.n	8001ace <__aeabi_ddiv+0x27a>
 8001ac0:	4642      	mov	r2, r8
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <__aeabi_ddiv+0x380>)
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	4690      	mov	r8, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	445b      	add	r3, fp
 8001ace:	4a42      	ldr	r2, [pc, #264]	; (8001bd8 <__aeabi_ddiv+0x384>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	dd00      	ble.n	8001ad6 <__aeabi_ddiv+0x282>
 8001ad4:	e723      	b.n	800191e <__aeabi_ddiv+0xca>
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	055b      	lsls	r3, r3, #21
 8001ada:	0755      	lsls	r5, r2, #29
 8001adc:	0252      	lsls	r2, r2, #9
 8001ade:	430d      	orrs	r5, r1
 8001ae0:	0b12      	lsrs	r2, r2, #12
 8001ae2:	0d5b      	lsrs	r3, r3, #21
 8001ae4:	e70d      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	4321      	orrs	r1, r4
 8001aea:	d100      	bne.n	8001aee <__aeabi_ddiv+0x29a>
 8001aec:	e07c      	b.n	8001be8 <__aeabi_ddiv+0x394>
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x2a0>
 8001af2:	e0fb      	b.n	8001cec <__aeabi_ddiv+0x498>
 8001af4:	0020      	movs	r0, r4
 8001af6:	f001 fa63 	bl	8002fc0 <__clzsi2>
 8001afa:	0002      	movs	r2, r0
 8001afc:	3a0b      	subs	r2, #11
 8001afe:	231d      	movs	r3, #29
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	4652      	mov	r2, sl
 8001b04:	0001      	movs	r1, r0
 8001b06:	40da      	lsrs	r2, r3
 8001b08:	4653      	mov	r3, sl
 8001b0a:	3908      	subs	r1, #8
 8001b0c:	408b      	lsls	r3, r1
 8001b0e:	408c      	lsls	r4, r1
 8001b10:	0019      	movs	r1, r3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <__aeabi_ddiv+0x388>)
 8001b16:	4458      	add	r0, fp
 8001b18:	469b      	mov	fp, r3
 8001b1a:	4483      	add	fp, r0
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	e6d9      	b.n	80018d4 <__aeabi_ddiv+0x80>
 8001b20:	0003      	movs	r3, r0
 8001b22:	4323      	orrs	r3, r4
 8001b24:	4698      	mov	r8, r3
 8001b26:	d044      	beq.n	8001bb2 <__aeabi_ddiv+0x35e>
 8001b28:	2c00      	cmp	r4, #0
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_ddiv+0x2da>
 8001b2c:	e0cf      	b.n	8001cce <__aeabi_ddiv+0x47a>
 8001b2e:	0020      	movs	r0, r4
 8001b30:	f001 fa46 	bl	8002fc0 <__clzsi2>
 8001b34:	0001      	movs	r1, r0
 8001b36:	0002      	movs	r2, r0
 8001b38:	390b      	subs	r1, #11
 8001b3a:	231d      	movs	r3, #29
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	4649      	mov	r1, r9
 8001b40:	0010      	movs	r0, r2
 8001b42:	40d9      	lsrs	r1, r3
 8001b44:	3808      	subs	r0, #8
 8001b46:	4084      	lsls	r4, r0
 8001b48:	000b      	movs	r3, r1
 8001b4a:	464d      	mov	r5, r9
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	4698      	mov	r8, r3
 8001b50:	4085      	lsls	r5, r0
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <__aeabi_ddiv+0x38c>)
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	469b      	mov	fp, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	e69e      	b.n	800189e <__aeabi_ddiv+0x4a>
 8001b60:	0002      	movs	r2, r0
 8001b62:	4322      	orrs	r2, r4
 8001b64:	4690      	mov	r8, r2
 8001b66:	d11d      	bne.n	8001ba4 <__aeabi_ddiv+0x350>
 8001b68:	2208      	movs	r2, #8
 8001b6a:	469b      	mov	fp, r3
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2500      	movs	r5, #0
 8001b70:	4691      	mov	r9, r2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	e693      	b.n	800189e <__aeabi_ddiv+0x4a>
 8001b76:	4651      	mov	r1, sl
 8001b78:	4321      	orrs	r1, r4
 8001b7a:	d109      	bne.n	8001b90 <__aeabi_ddiv+0x33c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	464a      	mov	r2, r9
 8001b80:	431a      	orrs	r2, r3
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <__aeabi_ddiv+0x390>)
 8001b84:	4691      	mov	r9, r2
 8001b86:	469c      	mov	ip, r3
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	44e3      	add	fp, ip
 8001b8e:	e6a1      	b.n	80018d4 <__aeabi_ddiv+0x80>
 8001b90:	2303      	movs	r3, #3
 8001b92:	464a      	mov	r2, r9
 8001b94:	431a      	orrs	r2, r3
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <__aeabi_ddiv+0x390>)
 8001b98:	4691      	mov	r9, r2
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	4651      	mov	r1, sl
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	44e3      	add	fp, ip
 8001ba2:	e697      	b.n	80018d4 <__aeabi_ddiv+0x80>
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	469b      	mov	fp, r3
 8001ba8:	2303      	movs	r3, #3
 8001baa:	46a0      	mov	r8, r4
 8001bac:	4691      	mov	r9, r2
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	e675      	b.n	800189e <__aeabi_ddiv+0x4a>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	469b      	mov	fp, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	e66d      	b.n	800189e <__aeabi_ddiv+0x4a>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	fffffc01 	.word	0xfffffc01
 8001bcc:	0800cc10 	.word	0x0800cc10
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	000003f3 	.word	0x000003f3
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	fffff801 	.word	0xfffff801
 8001be8:	464a      	mov	r2, r9
 8001bea:	2301      	movs	r3, #1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	4691      	mov	r9, r2
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	e66e      	b.n	80018d4 <__aeabi_ddiv+0x80>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	469a      	mov	sl, r3
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <__aeabi_ddiv+0x5cc>)
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	e67e      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001c04:	2501      	movs	r5, #1
 8001c06:	426d      	negs	r5, r5
 8001c08:	2201      	movs	r2, #1
 8001c0a:	1ad2      	subs	r2, r2, r3
 8001c0c:	2a38      	cmp	r2, #56	; 0x38
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_ddiv+0x3be>
 8001c10:	e674      	b.n	80018fc <__aeabi_ddiv+0xa8>
 8001c12:	2a1f      	cmp	r2, #31
 8001c14:	dc00      	bgt.n	8001c18 <__aeabi_ddiv+0x3c4>
 8001c16:	e0bd      	b.n	8001d94 <__aeabi_ddiv+0x540>
 8001c18:	211f      	movs	r1, #31
 8001c1a:	4249      	negs	r1, r1
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	4641      	mov	r1, r8
 8001c20:	40d9      	lsrs	r1, r3
 8001c22:	000b      	movs	r3, r1
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d004      	beq.n	8001c32 <__aeabi_ddiv+0x3de>
 8001c28:	4641      	mov	r1, r8
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	; (8001e24 <__aeabi_ddiv+0x5d0>)
 8001c2c:	445a      	add	r2, fp
 8001c2e:	4091      	lsls	r1, r2
 8001c30:	430d      	orrs	r5, r1
 8001c32:	0029      	movs	r1, r5
 8001c34:	1e4a      	subs	r2, r1, #1
 8001c36:	4191      	sbcs	r1, r2
 8001c38:	4319      	orrs	r1, r3
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	001d      	movs	r5, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	400d      	ands	r5, r1
 8001c42:	420b      	tst	r3, r1
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x3f4>
 8001c46:	e0d0      	b.n	8001dea <__aeabi_ddiv+0x596>
 8001c48:	220f      	movs	r2, #15
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	2a04      	cmp	r2, #4
 8001c50:	d100      	bne.n	8001c54 <__aeabi_ddiv+0x400>
 8001c52:	e0c7      	b.n	8001de4 <__aeabi_ddiv+0x590>
 8001c54:	1d0a      	adds	r2, r1, #4
 8001c56:	428a      	cmp	r2, r1
 8001c58:	4189      	sbcs	r1, r1
 8001c5a:	4249      	negs	r1, r1
 8001c5c:	185b      	adds	r3, r3, r1
 8001c5e:	0011      	movs	r1, r2
 8001c60:	021a      	lsls	r2, r3, #8
 8001c62:	d400      	bmi.n	8001c66 <__aeabi_ddiv+0x412>
 8001c64:	e0be      	b.n	8001de4 <__aeabi_ddiv+0x590>
 8001c66:	2301      	movs	r3, #1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2500      	movs	r5, #0
 8001c6c:	e649      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	4643      	mov	r3, r8
 8001c72:	0312      	lsls	r2, r2, #12
 8001c74:	4213      	tst	r3, r2
 8001c76:	d008      	beq.n	8001c8a <__aeabi_ddiv+0x436>
 8001c78:	4214      	tst	r4, r2
 8001c7a:	d106      	bne.n	8001c8a <__aeabi_ddiv+0x436>
 8001c7c:	4322      	orrs	r2, r4
 8001c7e:	0312      	lsls	r2, r2, #12
 8001c80:	46ba      	mov	sl, r7
 8001c82:	000d      	movs	r5, r1
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <__aeabi_ddiv+0x5cc>)
 8001c86:	0b12      	lsrs	r2, r2, #12
 8001c88:	e63b      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	0312      	lsls	r2, r2, #12
 8001c90:	431a      	orrs	r2, r3
 8001c92:	0312      	lsls	r2, r2, #12
 8001c94:	46b2      	mov	sl, r6
 8001c96:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <__aeabi_ddiv+0x5cc>)
 8001c98:	0b12      	lsrs	r2, r2, #12
 8001c9a:	e632      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_ddiv+0x44e>
 8001ca0:	e702      	b.n	8001aa8 <__aeabi_ddiv+0x254>
 8001ca2:	19a6      	adds	r6, r4, r6
 8001ca4:	1e6a      	subs	r2, r5, #1
 8001ca6:	42a6      	cmp	r6, r4
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x458>
 8001caa:	e089      	b.n	8001dc0 <__aeabi_ddiv+0x56c>
 8001cac:	4286      	cmp	r6, r0
 8001cae:	d200      	bcs.n	8001cb2 <__aeabi_ddiv+0x45e>
 8001cb0:	e09f      	b.n	8001df2 <__aeabi_ddiv+0x59e>
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_ddiv+0x462>
 8001cb4:	e0af      	b.n	8001e16 <__aeabi_ddiv+0x5c2>
 8001cb6:	0015      	movs	r5, r2
 8001cb8:	e6f4      	b.n	8001aa4 <__aeabi_ddiv+0x250>
 8001cba:	42a9      	cmp	r1, r5
 8001cbc:	d900      	bls.n	8001cc0 <__aeabi_ddiv+0x46c>
 8001cbe:	e63c      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	07de      	lsls	r6, r3, #31
 8001cc4:	0858      	lsrs	r0, r3, #1
 8001cc6:	086b      	lsrs	r3, r5, #1
 8001cc8:	431e      	orrs	r6, r3
 8001cca:	07ed      	lsls	r5, r5, #31
 8001ccc:	e63c      	b.n	8001948 <__aeabi_ddiv+0xf4>
 8001cce:	f001 f977 	bl	8002fc0 <__clzsi2>
 8001cd2:	0001      	movs	r1, r0
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	3115      	adds	r1, #21
 8001cd8:	3220      	adds	r2, #32
 8001cda:	291c      	cmp	r1, #28
 8001cdc:	dc00      	bgt.n	8001ce0 <__aeabi_ddiv+0x48c>
 8001cde:	e72c      	b.n	8001b3a <__aeabi_ddiv+0x2e6>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	3808      	subs	r0, #8
 8001ce4:	4083      	lsls	r3, r0
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	4698      	mov	r8, r3
 8001cea:	e732      	b.n	8001b52 <__aeabi_ddiv+0x2fe>
 8001cec:	f001 f968 	bl	8002fc0 <__clzsi2>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	3215      	adds	r2, #21
 8001cf6:	3020      	adds	r0, #32
 8001cf8:	2a1c      	cmp	r2, #28
 8001cfa:	dc00      	bgt.n	8001cfe <__aeabi_ddiv+0x4aa>
 8001cfc:	e6ff      	b.n	8001afe <__aeabi_ddiv+0x2aa>
 8001cfe:	4654      	mov	r4, sl
 8001d00:	3b08      	subs	r3, #8
 8001d02:	2100      	movs	r1, #0
 8001d04:	409c      	lsls	r4, r3
 8001d06:	e705      	b.n	8001b14 <__aeabi_ddiv+0x2c0>
 8001d08:	1936      	adds	r6, r6, r4
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	42b4      	cmp	r4, r6
 8001d0e:	d900      	bls.n	8001d12 <__aeabi_ddiv+0x4be>
 8001d10:	e6a6      	b.n	8001a60 <__aeabi_ddiv+0x20c>
 8001d12:	42b2      	cmp	r2, r6
 8001d14:	d800      	bhi.n	8001d18 <__aeabi_ddiv+0x4c4>
 8001d16:	e6a3      	b.n	8001a60 <__aeabi_ddiv+0x20c>
 8001d18:	1e83      	subs	r3, r0, #2
 8001d1a:	1936      	adds	r6, r6, r4
 8001d1c:	e6a0      	b.n	8001a60 <__aeabi_ddiv+0x20c>
 8001d1e:	1909      	adds	r1, r1, r4
 8001d20:	3d01      	subs	r5, #1
 8001d22:	428c      	cmp	r4, r1
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x4d4>
 8001d26:	e68d      	b.n	8001a44 <__aeabi_ddiv+0x1f0>
 8001d28:	428a      	cmp	r2, r1
 8001d2a:	d800      	bhi.n	8001d2e <__aeabi_ddiv+0x4da>
 8001d2c:	e68a      	b.n	8001a44 <__aeabi_ddiv+0x1f0>
 8001d2e:	1e85      	subs	r5, r0, #2
 8001d30:	1909      	adds	r1, r1, r4
 8001d32:	e687      	b.n	8001a44 <__aeabi_ddiv+0x1f0>
 8001d34:	220f      	movs	r2, #15
 8001d36:	402a      	ands	r2, r5
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_ddiv+0x4ea>
 8001d3c:	e6bc      	b.n	8001ab8 <__aeabi_ddiv+0x264>
 8001d3e:	1d29      	adds	r1, r5, #4
 8001d40:	42a9      	cmp	r1, r5
 8001d42:	41ad      	sbcs	r5, r5
 8001d44:	426d      	negs	r5, r5
 8001d46:	08c9      	lsrs	r1, r1, #3
 8001d48:	44a8      	add	r8, r5
 8001d4a:	e6b6      	b.n	8001aba <__aeabi_ddiv+0x266>
 8001d4c:	42af      	cmp	r7, r5
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x4fe>
 8001d50:	e662      	b.n	8001a18 <__aeabi_ddiv+0x1c4>
 8001d52:	4281      	cmp	r1, r0
 8001d54:	d804      	bhi.n	8001d60 <__aeabi_ddiv+0x50c>
 8001d56:	d000      	beq.n	8001d5a <__aeabi_ddiv+0x506>
 8001d58:	e65e      	b.n	8001a18 <__aeabi_ddiv+0x1c4>
 8001d5a:	42ae      	cmp	r6, r5
 8001d5c:	d800      	bhi.n	8001d60 <__aeabi_ddiv+0x50c>
 8001d5e:	e65b      	b.n	8001a18 <__aeabi_ddiv+0x1c4>
 8001d60:	2302      	movs	r3, #2
 8001d62:	425b      	negs	r3, r3
 8001d64:	469c      	mov	ip, r3
 8001d66:	9b00      	ldr	r3, [sp, #0]
 8001d68:	44e0      	add	r8, ip
 8001d6a:	469c      	mov	ip, r3
 8001d6c:	4465      	add	r5, ip
 8001d6e:	429d      	cmp	r5, r3
 8001d70:	419b      	sbcs	r3, r3
 8001d72:	425b      	negs	r3, r3
 8001d74:	191b      	adds	r3, r3, r4
 8001d76:	18c0      	adds	r0, r0, r3
 8001d78:	e64f      	b.n	8001a1a <__aeabi_ddiv+0x1c6>
 8001d7a:	42b2      	cmp	r2, r6
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x52c>
 8001d7e:	e612      	b.n	80019a6 <__aeabi_ddiv+0x152>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	1936      	adds	r6, r6, r4
 8001d84:	e60f      	b.n	80019a6 <__aeabi_ddiv+0x152>
 8001d86:	428a      	cmp	r2, r1
 8001d88:	d800      	bhi.n	8001d8c <__aeabi_ddiv+0x538>
 8001d8a:	e5fa      	b.n	8001982 <__aeabi_ddiv+0x12e>
 8001d8c:	1e83      	subs	r3, r0, #2
 8001d8e:	4698      	mov	r8, r3
 8001d90:	1909      	adds	r1, r1, r4
 8001d92:	e5f6      	b.n	8001982 <__aeabi_ddiv+0x12e>
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <__aeabi_ddiv+0x5d4>)
 8001d96:	0028      	movs	r0, r5
 8001d98:	445b      	add	r3, fp
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	409d      	lsls	r5, r3
 8001d9e:	4099      	lsls	r1, r3
 8001da0:	40d0      	lsrs	r0, r2
 8001da2:	1e6b      	subs	r3, r5, #1
 8001da4:	419d      	sbcs	r5, r3
 8001da6:	4643      	mov	r3, r8
 8001da8:	4301      	orrs	r1, r0
 8001daa:	4329      	orrs	r1, r5
 8001dac:	40d3      	lsrs	r3, r2
 8001dae:	074a      	lsls	r2, r1, #29
 8001db0:	d100      	bne.n	8001db4 <__aeabi_ddiv+0x560>
 8001db2:	e755      	b.n	8001c60 <__aeabi_ddiv+0x40c>
 8001db4:	220f      	movs	r2, #15
 8001db6:	400a      	ands	r2, r1
 8001db8:	2a04      	cmp	r2, #4
 8001dba:	d000      	beq.n	8001dbe <__aeabi_ddiv+0x56a>
 8001dbc:	e74a      	b.n	8001c54 <__aeabi_ddiv+0x400>
 8001dbe:	e74f      	b.n	8001c60 <__aeabi_ddiv+0x40c>
 8001dc0:	0015      	movs	r5, r2
 8001dc2:	4286      	cmp	r6, r0
 8001dc4:	d000      	beq.n	8001dc8 <__aeabi_ddiv+0x574>
 8001dc6:	e66d      	b.n	8001aa4 <__aeabi_ddiv+0x250>
 8001dc8:	9a00      	ldr	r2, [sp, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_ddiv+0x57c>
 8001dce:	e669      	b.n	8001aa4 <__aeabi_ddiv+0x250>
 8001dd0:	e66a      	b.n	8001aa8 <__aeabi_ddiv+0x254>
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <__aeabi_ddiv+0x5d8>)
 8001dd4:	445b      	add	r3, fp
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	dc00      	bgt.n	8001ddc <__aeabi_ddiv+0x588>
 8001dda:	e713      	b.n	8001c04 <__aeabi_ddiv+0x3b0>
 8001ddc:	2501      	movs	r5, #1
 8001dde:	2100      	movs	r1, #0
 8001de0:	44a8      	add	r8, r5
 8001de2:	e66a      	b.n	8001aba <__aeabi_ddiv+0x266>
 8001de4:	075d      	lsls	r5, r3, #29
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	0b1a      	lsrs	r2, r3, #12
 8001dea:	08c9      	lsrs	r1, r1, #3
 8001dec:	2300      	movs	r3, #0
 8001dee:	430d      	orrs	r5, r1
 8001df0:	e587      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001df2:	9900      	ldr	r1, [sp, #0]
 8001df4:	3d02      	subs	r5, #2
 8001df6:	004a      	lsls	r2, r1, #1
 8001df8:	428a      	cmp	r2, r1
 8001dfa:	41bf      	sbcs	r7, r7
 8001dfc:	427f      	negs	r7, r7
 8001dfe:	193f      	adds	r7, r7, r4
 8001e00:	19f6      	adds	r6, r6, r7
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	e7dd      	b.n	8001dc2 <__aeabi_ddiv+0x56e>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	4643      	mov	r3, r8
 8001e0a:	0312      	lsls	r2, r2, #12
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <__aeabi_ddiv+0x5cc>)
 8001e12:	0b12      	lsrs	r2, r2, #12
 8001e14:	e575      	b.n	8001902 <__aeabi_ddiv+0xae>
 8001e16:	9900      	ldr	r1, [sp, #0]
 8001e18:	4299      	cmp	r1, r3
 8001e1a:	d3ea      	bcc.n	8001df2 <__aeabi_ddiv+0x59e>
 8001e1c:	0015      	movs	r5, r2
 8001e1e:	e7d3      	b.n	8001dc8 <__aeabi_ddiv+0x574>
 8001e20:	000007ff 	.word	0x000007ff
 8001e24:	0000043e 	.word	0x0000043e
 8001e28:	0000041e 	.word	0x0000041e
 8001e2c:	000003ff 	.word	0x000003ff

08001e30 <__eqdf2>:
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	464e      	mov	r6, r9
 8001e34:	4645      	mov	r5, r8
 8001e36:	46de      	mov	lr, fp
 8001e38:	4657      	mov	r7, sl
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	b5e0      	push	{r5, r6, r7, lr}
 8001e3e:	0017      	movs	r7, r2
 8001e40:	031a      	lsls	r2, r3, #12
 8001e42:	0b12      	lsrs	r2, r2, #12
 8001e44:	0005      	movs	r5, r0
 8001e46:	4684      	mov	ip, r0
 8001e48:	4819      	ldr	r0, [pc, #100]	; (8001eb0 <__eqdf2+0x80>)
 8001e4a:	030e      	lsls	r6, r1, #12
 8001e4c:	004c      	lsls	r4, r1, #1
 8001e4e:	4691      	mov	r9, r2
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	0fdb      	lsrs	r3, r3, #31
 8001e54:	469b      	mov	fp, r3
 8001e56:	0b36      	lsrs	r6, r6, #12
 8001e58:	0d64      	lsrs	r4, r4, #21
 8001e5a:	0fc9      	lsrs	r1, r1, #31
 8001e5c:	0d52      	lsrs	r2, r2, #21
 8001e5e:	4284      	cmp	r4, r0
 8001e60:	d019      	beq.n	8001e96 <__eqdf2+0x66>
 8001e62:	4282      	cmp	r2, r0
 8001e64:	d010      	beq.n	8001e88 <__eqdf2+0x58>
 8001e66:	2001      	movs	r0, #1
 8001e68:	4294      	cmp	r4, r2
 8001e6a:	d10e      	bne.n	8001e8a <__eqdf2+0x5a>
 8001e6c:	454e      	cmp	r6, r9
 8001e6e:	d10c      	bne.n	8001e8a <__eqdf2+0x5a>
 8001e70:	2001      	movs	r0, #1
 8001e72:	45c4      	cmp	ip, r8
 8001e74:	d109      	bne.n	8001e8a <__eqdf2+0x5a>
 8001e76:	4559      	cmp	r1, fp
 8001e78:	d017      	beq.n	8001eaa <__eqdf2+0x7a>
 8001e7a:	2c00      	cmp	r4, #0
 8001e7c:	d105      	bne.n	8001e8a <__eqdf2+0x5a>
 8001e7e:	0030      	movs	r0, r6
 8001e80:	4328      	orrs	r0, r5
 8001e82:	1e43      	subs	r3, r0, #1
 8001e84:	4198      	sbcs	r0, r3
 8001e86:	e000      	b.n	8001e8a <__eqdf2+0x5a>
 8001e88:	2001      	movs	r0, #1
 8001e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8c:	46bb      	mov	fp, r7
 8001e8e:	46b2      	mov	sl, r6
 8001e90:	46a9      	mov	r9, r5
 8001e92:	46a0      	mov	r8, r4
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e96:	0033      	movs	r3, r6
 8001e98:	2001      	movs	r0, #1
 8001e9a:	432b      	orrs	r3, r5
 8001e9c:	d1f5      	bne.n	8001e8a <__eqdf2+0x5a>
 8001e9e:	42a2      	cmp	r2, r4
 8001ea0:	d1f3      	bne.n	8001e8a <__eqdf2+0x5a>
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	d1f0      	bne.n	8001e8a <__eqdf2+0x5a>
 8001ea8:	e7e2      	b.n	8001e70 <__eqdf2+0x40>
 8001eaa:	2000      	movs	r0, #0
 8001eac:	e7ed      	b.n	8001e8a <__eqdf2+0x5a>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	000007ff 	.word	0x000007ff

08001eb4 <__gedf2>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	4647      	mov	r7, r8
 8001eb8:	46ce      	mov	lr, r9
 8001eba:	0004      	movs	r4, r0
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	0016      	movs	r6, r2
 8001ec0:	031b      	lsls	r3, r3, #12
 8001ec2:	0b1b      	lsrs	r3, r3, #12
 8001ec4:	4d2d      	ldr	r5, [pc, #180]	; (8001f7c <__gedf2+0xc8>)
 8001ec6:	004a      	lsls	r2, r1, #1
 8001ec8:	4699      	mov	r9, r3
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	0043      	lsls	r3, r0, #1
 8001ece:	030f      	lsls	r7, r1, #12
 8001ed0:	46a4      	mov	ip, r4
 8001ed2:	46b0      	mov	r8, r6
 8001ed4:	0b3f      	lsrs	r7, r7, #12
 8001ed6:	0d52      	lsrs	r2, r2, #21
 8001ed8:	0fc9      	lsrs	r1, r1, #31
 8001eda:	0d5b      	lsrs	r3, r3, #21
 8001edc:	0fc0      	lsrs	r0, r0, #31
 8001ede:	42aa      	cmp	r2, r5
 8001ee0:	d021      	beq.n	8001f26 <__gedf2+0x72>
 8001ee2:	42ab      	cmp	r3, r5
 8001ee4:	d013      	beq.n	8001f0e <__gedf2+0x5a>
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d122      	bne.n	8001f30 <__gedf2+0x7c>
 8001eea:	433c      	orrs	r4, r7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <__gedf2+0x42>
 8001ef0:	464d      	mov	r5, r9
 8001ef2:	432e      	orrs	r6, r5
 8001ef4:	d022      	beq.n	8001f3c <__gedf2+0x88>
 8001ef6:	2c00      	cmp	r4, #0
 8001ef8:	d010      	beq.n	8001f1c <__gedf2+0x68>
 8001efa:	4281      	cmp	r1, r0
 8001efc:	d022      	beq.n	8001f44 <__gedf2+0x90>
 8001efe:	2002      	movs	r0, #2
 8001f00:	3901      	subs	r1, #1
 8001f02:	4008      	ands	r0, r1
 8001f04:	3801      	subs	r0, #1
 8001f06:	bcc0      	pop	{r6, r7}
 8001f08:	46b9      	mov	r9, r7
 8001f0a:	46b0      	mov	r8, r6
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0e:	464d      	mov	r5, r9
 8001f10:	432e      	orrs	r6, r5
 8001f12:	d129      	bne.n	8001f68 <__gedf2+0xb4>
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d1f0      	bne.n	8001efa <__gedf2+0x46>
 8001f18:	433c      	orrs	r4, r7
 8001f1a:	d1ee      	bne.n	8001efa <__gedf2+0x46>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d1f2      	bne.n	8001f06 <__gedf2+0x52>
 8001f20:	2001      	movs	r0, #1
 8001f22:	4240      	negs	r0, r0
 8001f24:	e7ef      	b.n	8001f06 <__gedf2+0x52>
 8001f26:	003d      	movs	r5, r7
 8001f28:	4325      	orrs	r5, r4
 8001f2a:	d11d      	bne.n	8001f68 <__gedf2+0xb4>
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d0ee      	beq.n	8001f0e <__gedf2+0x5a>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e2      	bne.n	8001efa <__gedf2+0x46>
 8001f34:	464c      	mov	r4, r9
 8001f36:	4326      	orrs	r6, r4
 8001f38:	d1df      	bne.n	8001efa <__gedf2+0x46>
 8001f3a:	e7e0      	b.n	8001efe <__gedf2+0x4a>
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d0e1      	beq.n	8001f06 <__gedf2+0x52>
 8001f42:	e7dc      	b.n	8001efe <__gedf2+0x4a>
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dc0a      	bgt.n	8001f5e <__gedf2+0xaa>
 8001f48:	dbe8      	blt.n	8001f1c <__gedf2+0x68>
 8001f4a:	454f      	cmp	r7, r9
 8001f4c:	d8d7      	bhi.n	8001efe <__gedf2+0x4a>
 8001f4e:	d00e      	beq.n	8001f6e <__gedf2+0xba>
 8001f50:	2000      	movs	r0, #0
 8001f52:	454f      	cmp	r7, r9
 8001f54:	d2d7      	bcs.n	8001f06 <__gedf2+0x52>
 8001f56:	2900      	cmp	r1, #0
 8001f58:	d0e2      	beq.n	8001f20 <__gedf2+0x6c>
 8001f5a:	0008      	movs	r0, r1
 8001f5c:	e7d3      	b.n	8001f06 <__gedf2+0x52>
 8001f5e:	4243      	negs	r3, r0
 8001f60:	4158      	adcs	r0, r3
 8001f62:	0040      	lsls	r0, r0, #1
 8001f64:	3801      	subs	r0, #1
 8001f66:	e7ce      	b.n	8001f06 <__gedf2+0x52>
 8001f68:	2002      	movs	r0, #2
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	e7cb      	b.n	8001f06 <__gedf2+0x52>
 8001f6e:	45c4      	cmp	ip, r8
 8001f70:	d8c5      	bhi.n	8001efe <__gedf2+0x4a>
 8001f72:	2000      	movs	r0, #0
 8001f74:	45c4      	cmp	ip, r8
 8001f76:	d2c6      	bcs.n	8001f06 <__gedf2+0x52>
 8001f78:	e7ed      	b.n	8001f56 <__gedf2+0xa2>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000007ff 	.word	0x000007ff

08001f80 <__ledf2>:
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	4647      	mov	r7, r8
 8001f84:	46ce      	mov	lr, r9
 8001f86:	0004      	movs	r4, r0
 8001f88:	0018      	movs	r0, r3
 8001f8a:	0016      	movs	r6, r2
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	0b1b      	lsrs	r3, r3, #12
 8001f90:	4d2c      	ldr	r5, [pc, #176]	; (8002044 <__ledf2+0xc4>)
 8001f92:	004a      	lsls	r2, r1, #1
 8001f94:	4699      	mov	r9, r3
 8001f96:	b580      	push	{r7, lr}
 8001f98:	0043      	lsls	r3, r0, #1
 8001f9a:	030f      	lsls	r7, r1, #12
 8001f9c:	46a4      	mov	ip, r4
 8001f9e:	46b0      	mov	r8, r6
 8001fa0:	0b3f      	lsrs	r7, r7, #12
 8001fa2:	0d52      	lsrs	r2, r2, #21
 8001fa4:	0fc9      	lsrs	r1, r1, #31
 8001fa6:	0d5b      	lsrs	r3, r3, #21
 8001fa8:	0fc0      	lsrs	r0, r0, #31
 8001faa:	42aa      	cmp	r2, r5
 8001fac:	d00d      	beq.n	8001fca <__ledf2+0x4a>
 8001fae:	42ab      	cmp	r3, r5
 8001fb0:	d010      	beq.n	8001fd4 <__ledf2+0x54>
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d127      	bne.n	8002006 <__ledf2+0x86>
 8001fb6:	433c      	orrs	r4, r7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <__ledf2+0x60>
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	432e      	orrs	r6, r5
 8001fc0:	d10e      	bne.n	8001fe0 <__ledf2+0x60>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	2c00      	cmp	r4, #0
 8001fc6:	d015      	beq.n	8001ff4 <__ledf2+0x74>
 8001fc8:	e00e      	b.n	8001fe8 <__ledf2+0x68>
 8001fca:	003d      	movs	r5, r7
 8001fcc:	4325      	orrs	r5, r4
 8001fce:	d110      	bne.n	8001ff2 <__ledf2+0x72>
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d118      	bne.n	8002006 <__ledf2+0x86>
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	432e      	orrs	r6, r5
 8001fd8:	d10b      	bne.n	8001ff2 <__ledf2+0x72>
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d102      	bne.n	8001fe4 <__ledf2+0x64>
 8001fde:	433c      	orrs	r4, r7
 8001fe0:	2c00      	cmp	r4, #0
 8001fe2:	d00b      	beq.n	8001ffc <__ledf2+0x7c>
 8001fe4:	4281      	cmp	r1, r0
 8001fe6:	d014      	beq.n	8002012 <__ledf2+0x92>
 8001fe8:	2002      	movs	r0, #2
 8001fea:	3901      	subs	r1, #1
 8001fec:	4008      	ands	r0, r1
 8001fee:	3801      	subs	r0, #1
 8001ff0:	e000      	b.n	8001ff4 <__ledf2+0x74>
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	bcc0      	pop	{r6, r7}
 8001ff6:	46b9      	mov	r9, r7
 8001ff8:	46b0      	mov	r8, r6
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <__ledf2+0x74>
 8002000:	2001      	movs	r0, #1
 8002002:	4240      	negs	r0, r0
 8002004:	e7f6      	b.n	8001ff4 <__ledf2+0x74>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ec      	bne.n	8001fe4 <__ledf2+0x64>
 800200a:	464c      	mov	r4, r9
 800200c:	4326      	orrs	r6, r4
 800200e:	d1e9      	bne.n	8001fe4 <__ledf2+0x64>
 8002010:	e7ea      	b.n	8001fe8 <__ledf2+0x68>
 8002012:	429a      	cmp	r2, r3
 8002014:	dd04      	ble.n	8002020 <__ledf2+0xa0>
 8002016:	4243      	negs	r3, r0
 8002018:	4158      	adcs	r0, r3
 800201a:	0040      	lsls	r0, r0, #1
 800201c:	3801      	subs	r0, #1
 800201e:	e7e9      	b.n	8001ff4 <__ledf2+0x74>
 8002020:	429a      	cmp	r2, r3
 8002022:	dbeb      	blt.n	8001ffc <__ledf2+0x7c>
 8002024:	454f      	cmp	r7, r9
 8002026:	d8df      	bhi.n	8001fe8 <__ledf2+0x68>
 8002028:	d006      	beq.n	8002038 <__ledf2+0xb8>
 800202a:	2000      	movs	r0, #0
 800202c:	454f      	cmp	r7, r9
 800202e:	d2e1      	bcs.n	8001ff4 <__ledf2+0x74>
 8002030:	2900      	cmp	r1, #0
 8002032:	d0e5      	beq.n	8002000 <__ledf2+0x80>
 8002034:	0008      	movs	r0, r1
 8002036:	e7dd      	b.n	8001ff4 <__ledf2+0x74>
 8002038:	45c4      	cmp	ip, r8
 800203a:	d8d5      	bhi.n	8001fe8 <__ledf2+0x68>
 800203c:	2000      	movs	r0, #0
 800203e:	45c4      	cmp	ip, r8
 8002040:	d2d8      	bcs.n	8001ff4 <__ledf2+0x74>
 8002042:	e7f5      	b.n	8002030 <__ledf2+0xb0>
 8002044:	000007ff 	.word	0x000007ff

08002048 <__aeabi_dmul>:
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	4645      	mov	r5, r8
 800204c:	46de      	mov	lr, fp
 800204e:	4657      	mov	r7, sl
 8002050:	464e      	mov	r6, r9
 8002052:	b5e0      	push	{r5, r6, r7, lr}
 8002054:	001f      	movs	r7, r3
 8002056:	030b      	lsls	r3, r1, #12
 8002058:	0b1b      	lsrs	r3, r3, #12
 800205a:	469b      	mov	fp, r3
 800205c:	004d      	lsls	r5, r1, #1
 800205e:	0fcb      	lsrs	r3, r1, #31
 8002060:	0004      	movs	r4, r0
 8002062:	4691      	mov	r9, r2
 8002064:	4698      	mov	r8, r3
 8002066:	b087      	sub	sp, #28
 8002068:	0d6d      	lsrs	r5, r5, #21
 800206a:	d100      	bne.n	800206e <__aeabi_dmul+0x26>
 800206c:	e1cd      	b.n	800240a <__aeabi_dmul+0x3c2>
 800206e:	4bce      	ldr	r3, [pc, #824]	; (80023a8 <__aeabi_dmul+0x360>)
 8002070:	429d      	cmp	r5, r3
 8002072:	d100      	bne.n	8002076 <__aeabi_dmul+0x2e>
 8002074:	e1e9      	b.n	800244a <__aeabi_dmul+0x402>
 8002076:	465a      	mov	r2, fp
 8002078:	0f43      	lsrs	r3, r0, #29
 800207a:	00d2      	lsls	r2, r2, #3
 800207c:	4313      	orrs	r3, r2
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	0412      	lsls	r2, r2, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	00c3      	lsls	r3, r0, #3
 8002086:	469a      	mov	sl, r3
 8002088:	4bc8      	ldr	r3, [pc, #800]	; (80023ac <__aeabi_dmul+0x364>)
 800208a:	4693      	mov	fp, r2
 800208c:	469c      	mov	ip, r3
 800208e:	2300      	movs	r3, #0
 8002090:	2600      	movs	r6, #0
 8002092:	4465      	add	r5, ip
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	033c      	lsls	r4, r7, #12
 8002098:	007b      	lsls	r3, r7, #1
 800209a:	4648      	mov	r0, r9
 800209c:	0b24      	lsrs	r4, r4, #12
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	0fff      	lsrs	r7, r7, #31
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dmul+0x60>
 80020a6:	e189      	b.n	80023bc <__aeabi_dmul+0x374>
 80020a8:	4abf      	ldr	r2, [pc, #764]	; (80023a8 <__aeabi_dmul+0x360>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <__aeabi_dmul+0x9a>
 80020ae:	0f42      	lsrs	r2, r0, #29
 80020b0:	00e4      	lsls	r4, r4, #3
 80020b2:	4322      	orrs	r2, r4
 80020b4:	2480      	movs	r4, #128	; 0x80
 80020b6:	0424      	lsls	r4, r4, #16
 80020b8:	4314      	orrs	r4, r2
 80020ba:	4abc      	ldr	r2, [pc, #752]	; (80023ac <__aeabi_dmul+0x364>)
 80020bc:	2100      	movs	r1, #0
 80020be:	4694      	mov	ip, r2
 80020c0:	4642      	mov	r2, r8
 80020c2:	4463      	add	r3, ip
 80020c4:	195b      	adds	r3, r3, r5
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9b01      	ldr	r3, [sp, #4]
 80020ca:	407a      	eors	r2, r7
 80020cc:	3301      	adds	r3, #1
 80020ce:	00c0      	lsls	r0, r0, #3
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2e0a      	cmp	r6, #10
 80020d6:	dd1c      	ble.n	8002112 <__aeabi_dmul+0xca>
 80020d8:	003a      	movs	r2, r7
 80020da:	2e0b      	cmp	r6, #11
 80020dc:	d05e      	beq.n	800219c <__aeabi_dmul+0x154>
 80020de:	4647      	mov	r7, r8
 80020e0:	e056      	b.n	8002190 <__aeabi_dmul+0x148>
 80020e2:	4649      	mov	r1, r9
 80020e4:	4bb0      	ldr	r3, [pc, #704]	; (80023a8 <__aeabi_dmul+0x360>)
 80020e6:	4321      	orrs	r1, r4
 80020e8:	18eb      	adds	r3, r5, r3
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d12a      	bne.n	8002146 <__aeabi_dmul+0xfe>
 80020f0:	2080      	movs	r0, #128	; 0x80
 80020f2:	2202      	movs	r2, #2
 80020f4:	0100      	lsls	r0, r0, #4
 80020f6:	002b      	movs	r3, r5
 80020f8:	4684      	mov	ip, r0
 80020fa:	4316      	orrs	r6, r2
 80020fc:	4642      	mov	r2, r8
 80020fe:	4463      	add	r3, ip
 8002100:	407a      	eors	r2, r7
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	2e0a      	cmp	r6, #10
 8002108:	dd00      	ble.n	800210c <__aeabi_dmul+0xc4>
 800210a:	e231      	b.n	8002570 <__aeabi_dmul+0x528>
 800210c:	2000      	movs	r0, #0
 800210e:	2400      	movs	r4, #0
 8002110:	2102      	movs	r1, #2
 8002112:	2e02      	cmp	r6, #2
 8002114:	dc26      	bgt.n	8002164 <__aeabi_dmul+0x11c>
 8002116:	3e01      	subs	r6, #1
 8002118:	2e01      	cmp	r6, #1
 800211a:	d852      	bhi.n	80021c2 <__aeabi_dmul+0x17a>
 800211c:	2902      	cmp	r1, #2
 800211e:	d04c      	beq.n	80021ba <__aeabi_dmul+0x172>
 8002120:	2901      	cmp	r1, #1
 8002122:	d000      	beq.n	8002126 <__aeabi_dmul+0xde>
 8002124:	e118      	b.n	8002358 <__aeabi_dmul+0x310>
 8002126:	2300      	movs	r3, #0
 8002128:	2400      	movs	r4, #0
 800212a:	2500      	movs	r5, #0
 800212c:	051b      	lsls	r3, r3, #20
 800212e:	4323      	orrs	r3, r4
 8002130:	07d2      	lsls	r2, r2, #31
 8002132:	4313      	orrs	r3, r2
 8002134:	0028      	movs	r0, r5
 8002136:	0019      	movs	r1, r3
 8002138:	b007      	add	sp, #28
 800213a:	bcf0      	pop	{r4, r5, r6, r7}
 800213c:	46bb      	mov	fp, r7
 800213e:	46b2      	mov	sl, r6
 8002140:	46a9      	mov	r9, r5
 8002142:	46a0      	mov	r8, r4
 8002144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	2203      	movs	r2, #3
 800214a:	0109      	lsls	r1, r1, #4
 800214c:	002b      	movs	r3, r5
 800214e:	468c      	mov	ip, r1
 8002150:	4316      	orrs	r6, r2
 8002152:	4642      	mov	r2, r8
 8002154:	4463      	add	r3, ip
 8002156:	407a      	eors	r2, r7
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2e0a      	cmp	r6, #10
 800215e:	dd00      	ble.n	8002162 <__aeabi_dmul+0x11a>
 8002160:	e228      	b.n	80025b4 <__aeabi_dmul+0x56c>
 8002162:	2103      	movs	r1, #3
 8002164:	2501      	movs	r5, #1
 8002166:	40b5      	lsls	r5, r6
 8002168:	46ac      	mov	ip, r5
 800216a:	26a6      	movs	r6, #166	; 0xa6
 800216c:	4663      	mov	r3, ip
 800216e:	00f6      	lsls	r6, r6, #3
 8002170:	4035      	ands	r5, r6
 8002172:	4233      	tst	r3, r6
 8002174:	d10b      	bne.n	800218e <__aeabi_dmul+0x146>
 8002176:	2690      	movs	r6, #144	; 0x90
 8002178:	00b6      	lsls	r6, r6, #2
 800217a:	4233      	tst	r3, r6
 800217c:	d118      	bne.n	80021b0 <__aeabi_dmul+0x168>
 800217e:	3eb9      	subs	r6, #185	; 0xb9
 8002180:	3eff      	subs	r6, #255	; 0xff
 8002182:	421e      	tst	r6, r3
 8002184:	d01d      	beq.n	80021c2 <__aeabi_dmul+0x17a>
 8002186:	46a3      	mov	fp, r4
 8002188:	4682      	mov	sl, r0
 800218a:	9100      	str	r1, [sp, #0]
 800218c:	e000      	b.n	8002190 <__aeabi_dmul+0x148>
 800218e:	0017      	movs	r7, r2
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	003a      	movs	r2, r7
 8002194:	2902      	cmp	r1, #2
 8002196:	d010      	beq.n	80021ba <__aeabi_dmul+0x172>
 8002198:	465c      	mov	r4, fp
 800219a:	4650      	mov	r0, sl
 800219c:	2903      	cmp	r1, #3
 800219e:	d1bf      	bne.n	8002120 <__aeabi_dmul+0xd8>
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	031b      	lsls	r3, r3, #12
 80021a4:	431c      	orrs	r4, r3
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	0005      	movs	r5, r0
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <__aeabi_dmul+0x360>)
 80021ac:	0b24      	lsrs	r4, r4, #12
 80021ae:	e7bd      	b.n	800212c <__aeabi_dmul+0xe4>
 80021b0:	2480      	movs	r4, #128	; 0x80
 80021b2:	2200      	movs	r2, #0
 80021b4:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <__aeabi_dmul+0x360>)
 80021b6:	0324      	lsls	r4, r4, #12
 80021b8:	e7b8      	b.n	800212c <__aeabi_dmul+0xe4>
 80021ba:	2400      	movs	r4, #0
 80021bc:	2500      	movs	r5, #0
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <__aeabi_dmul+0x360>)
 80021c0:	e7b4      	b.n	800212c <__aeabi_dmul+0xe4>
 80021c2:	4653      	mov	r3, sl
 80021c4:	041e      	lsls	r6, r3, #16
 80021c6:	0c36      	lsrs	r6, r6, #16
 80021c8:	0c1f      	lsrs	r7, r3, #16
 80021ca:	0033      	movs	r3, r6
 80021cc:	0c01      	lsrs	r1, r0, #16
 80021ce:	0400      	lsls	r0, r0, #16
 80021d0:	0c00      	lsrs	r0, r0, #16
 80021d2:	4343      	muls	r3, r0
 80021d4:	4698      	mov	r8, r3
 80021d6:	0003      	movs	r3, r0
 80021d8:	437b      	muls	r3, r7
 80021da:	4699      	mov	r9, r3
 80021dc:	0033      	movs	r3, r6
 80021de:	434b      	muls	r3, r1
 80021e0:	469c      	mov	ip, r3
 80021e2:	4643      	mov	r3, r8
 80021e4:	000d      	movs	r5, r1
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	469a      	mov	sl, r3
 80021ea:	437d      	muls	r5, r7
 80021ec:	44cc      	add	ip, r9
 80021ee:	44d4      	add	ip, sl
 80021f0:	9500      	str	r5, [sp, #0]
 80021f2:	45e1      	cmp	r9, ip
 80021f4:	d904      	bls.n	8002200 <__aeabi_dmul+0x1b8>
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	4699      	mov	r9, r3
 80021fc:	444d      	add	r5, r9
 80021fe:	9500      	str	r5, [sp, #0]
 8002200:	4663      	mov	r3, ip
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	001d      	movs	r5, r3
 8002206:	4663      	mov	r3, ip
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	469c      	mov	ip, r3
 800220c:	4643      	mov	r3, r8
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	4698      	mov	r8, r3
 8002214:	4663      	mov	r3, ip
 8002216:	4443      	add	r3, r8
 8002218:	9303      	str	r3, [sp, #12]
 800221a:	0c23      	lsrs	r3, r4, #16
 800221c:	4698      	mov	r8, r3
 800221e:	0033      	movs	r3, r6
 8002220:	0424      	lsls	r4, r4, #16
 8002222:	0c24      	lsrs	r4, r4, #16
 8002224:	4363      	muls	r3, r4
 8002226:	469c      	mov	ip, r3
 8002228:	0023      	movs	r3, r4
 800222a:	437b      	muls	r3, r7
 800222c:	4699      	mov	r9, r3
 800222e:	4643      	mov	r3, r8
 8002230:	435e      	muls	r6, r3
 8002232:	435f      	muls	r7, r3
 8002234:	444e      	add	r6, r9
 8002236:	4663      	mov	r3, ip
 8002238:	46b2      	mov	sl, r6
 800223a:	0c1e      	lsrs	r6, r3, #16
 800223c:	4456      	add	r6, sl
 800223e:	45b1      	cmp	r9, r6
 8002240:	d903      	bls.n	800224a <__aeabi_dmul+0x202>
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	025b      	lsls	r3, r3, #9
 8002246:	4699      	mov	r9, r3
 8002248:	444f      	add	r7, r9
 800224a:	0c33      	lsrs	r3, r6, #16
 800224c:	4699      	mov	r9, r3
 800224e:	003b      	movs	r3, r7
 8002250:	444b      	add	r3, r9
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	4663      	mov	r3, ip
 8002256:	46ac      	mov	ip, r5
 8002258:	041f      	lsls	r7, r3, #16
 800225a:	0c3f      	lsrs	r7, r7, #16
 800225c:	0436      	lsls	r6, r6, #16
 800225e:	19f6      	adds	r6, r6, r7
 8002260:	44b4      	add	ip, r6
 8002262:	4663      	mov	r3, ip
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	465b      	mov	r3, fp
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	469c      	mov	ip, r3
 800226c:	465b      	mov	r3, fp
 800226e:	041f      	lsls	r7, r3, #16
 8002270:	0c3f      	lsrs	r7, r7, #16
 8002272:	003b      	movs	r3, r7
 8002274:	4343      	muls	r3, r0
 8002276:	4699      	mov	r9, r3
 8002278:	4663      	mov	r3, ip
 800227a:	4343      	muls	r3, r0
 800227c:	469a      	mov	sl, r3
 800227e:	464b      	mov	r3, r9
 8002280:	4660      	mov	r0, ip
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	469b      	mov	fp, r3
 8002286:	4348      	muls	r0, r1
 8002288:	4379      	muls	r1, r7
 800228a:	4451      	add	r1, sl
 800228c:	4459      	add	r1, fp
 800228e:	458a      	cmp	sl, r1
 8002290:	d903      	bls.n	800229a <__aeabi_dmul+0x252>
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	469a      	mov	sl, r3
 8002298:	4450      	add	r0, sl
 800229a:	0c0b      	lsrs	r3, r1, #16
 800229c:	469a      	mov	sl, r3
 800229e:	464b      	mov	r3, r9
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	4699      	mov	r9, r3
 80022a6:	003b      	movs	r3, r7
 80022a8:	4363      	muls	r3, r4
 80022aa:	0409      	lsls	r1, r1, #16
 80022ac:	4645      	mov	r5, r8
 80022ae:	4449      	add	r1, r9
 80022b0:	4699      	mov	r9, r3
 80022b2:	4663      	mov	r3, ip
 80022b4:	435c      	muls	r4, r3
 80022b6:	436b      	muls	r3, r5
 80022b8:	469c      	mov	ip, r3
 80022ba:	464b      	mov	r3, r9
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	4698      	mov	r8, r3
 80022c0:	436f      	muls	r7, r5
 80022c2:	193f      	adds	r7, r7, r4
 80022c4:	4447      	add	r7, r8
 80022c6:	4450      	add	r0, sl
 80022c8:	42bc      	cmp	r4, r7
 80022ca:	d903      	bls.n	80022d4 <__aeabi_dmul+0x28c>
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	025b      	lsls	r3, r3, #9
 80022d0:	4698      	mov	r8, r3
 80022d2:	44c4      	add	ip, r8
 80022d4:	9b04      	ldr	r3, [sp, #16]
 80022d6:	9d00      	ldr	r5, [sp, #0]
 80022d8:	4698      	mov	r8, r3
 80022da:	4445      	add	r5, r8
 80022dc:	42b5      	cmp	r5, r6
 80022de:	41b6      	sbcs	r6, r6
 80022e0:	4273      	negs	r3, r6
 80022e2:	4698      	mov	r8, r3
 80022e4:	464b      	mov	r3, r9
 80022e6:	041e      	lsls	r6, r3, #16
 80022e8:	9b05      	ldr	r3, [sp, #20]
 80022ea:	043c      	lsls	r4, r7, #16
 80022ec:	4699      	mov	r9, r3
 80022ee:	0c36      	lsrs	r6, r6, #16
 80022f0:	19a4      	adds	r4, r4, r6
 80022f2:	444c      	add	r4, r9
 80022f4:	46a1      	mov	r9, r4
 80022f6:	4683      	mov	fp, r0
 80022f8:	186e      	adds	r6, r5, r1
 80022fa:	44c1      	add	r9, r8
 80022fc:	428e      	cmp	r6, r1
 80022fe:	4189      	sbcs	r1, r1
 8002300:	44cb      	add	fp, r9
 8002302:	465d      	mov	r5, fp
 8002304:	4249      	negs	r1, r1
 8002306:	186d      	adds	r5, r5, r1
 8002308:	429c      	cmp	r4, r3
 800230a:	41a4      	sbcs	r4, r4
 800230c:	45c1      	cmp	r9, r8
 800230e:	419b      	sbcs	r3, r3
 8002310:	4583      	cmp	fp, r0
 8002312:	4180      	sbcs	r0, r0
 8002314:	428d      	cmp	r5, r1
 8002316:	4189      	sbcs	r1, r1
 8002318:	425b      	negs	r3, r3
 800231a:	4264      	negs	r4, r4
 800231c:	431c      	orrs	r4, r3
 800231e:	4240      	negs	r0, r0
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	4249      	negs	r1, r1
 8002324:	4301      	orrs	r1, r0
 8002326:	0270      	lsls	r0, r6, #9
 8002328:	0c3f      	lsrs	r7, r7, #16
 800232a:	4318      	orrs	r0, r3
 800232c:	19e4      	adds	r4, r4, r7
 800232e:	1e47      	subs	r7, r0, #1
 8002330:	41b8      	sbcs	r0, r7
 8002332:	1864      	adds	r4, r4, r1
 8002334:	4464      	add	r4, ip
 8002336:	0df6      	lsrs	r6, r6, #23
 8002338:	0261      	lsls	r1, r4, #9
 800233a:	4330      	orrs	r0, r6
 800233c:	0dec      	lsrs	r4, r5, #23
 800233e:	026e      	lsls	r6, r5, #9
 8002340:	430c      	orrs	r4, r1
 8002342:	4330      	orrs	r0, r6
 8002344:	01c9      	lsls	r1, r1, #7
 8002346:	d400      	bmi.n	800234a <__aeabi_dmul+0x302>
 8002348:	e0f1      	b.n	800252e <__aeabi_dmul+0x4e6>
 800234a:	2101      	movs	r1, #1
 800234c:	0843      	lsrs	r3, r0, #1
 800234e:	4001      	ands	r1, r0
 8002350:	430b      	orrs	r3, r1
 8002352:	07e0      	lsls	r0, r4, #31
 8002354:	4318      	orrs	r0, r3
 8002356:	0864      	lsrs	r4, r4, #1
 8002358:	4915      	ldr	r1, [pc, #84]	; (80023b0 <__aeabi_dmul+0x368>)
 800235a:	9b02      	ldr	r3, [sp, #8]
 800235c:	468c      	mov	ip, r1
 800235e:	4463      	add	r3, ip
 8002360:	2b00      	cmp	r3, #0
 8002362:	dc00      	bgt.n	8002366 <__aeabi_dmul+0x31e>
 8002364:	e097      	b.n	8002496 <__aeabi_dmul+0x44e>
 8002366:	0741      	lsls	r1, r0, #29
 8002368:	d009      	beq.n	800237e <__aeabi_dmul+0x336>
 800236a:	210f      	movs	r1, #15
 800236c:	4001      	ands	r1, r0
 800236e:	2904      	cmp	r1, #4
 8002370:	d005      	beq.n	800237e <__aeabi_dmul+0x336>
 8002372:	1d01      	adds	r1, r0, #4
 8002374:	4281      	cmp	r1, r0
 8002376:	4180      	sbcs	r0, r0
 8002378:	4240      	negs	r0, r0
 800237a:	1824      	adds	r4, r4, r0
 800237c:	0008      	movs	r0, r1
 800237e:	01e1      	lsls	r1, r4, #7
 8002380:	d506      	bpl.n	8002390 <__aeabi_dmul+0x348>
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	00c9      	lsls	r1, r1, #3
 8002386:	468c      	mov	ip, r1
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <__aeabi_dmul+0x36c>)
 800238a:	401c      	ands	r4, r3
 800238c:	9b02      	ldr	r3, [sp, #8]
 800238e:	4463      	add	r3, ip
 8002390:	4909      	ldr	r1, [pc, #36]	; (80023b8 <__aeabi_dmul+0x370>)
 8002392:	428b      	cmp	r3, r1
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0x350>
 8002396:	e710      	b.n	80021ba <__aeabi_dmul+0x172>
 8002398:	0761      	lsls	r1, r4, #29
 800239a:	08c5      	lsrs	r5, r0, #3
 800239c:	0264      	lsls	r4, r4, #9
 800239e:	055b      	lsls	r3, r3, #21
 80023a0:	430d      	orrs	r5, r1
 80023a2:	0b24      	lsrs	r4, r4, #12
 80023a4:	0d5b      	lsrs	r3, r3, #21
 80023a6:	e6c1      	b.n	800212c <__aeabi_dmul+0xe4>
 80023a8:	000007ff 	.word	0x000007ff
 80023ac:	fffffc01 	.word	0xfffffc01
 80023b0:	000003ff 	.word	0x000003ff
 80023b4:	feffffff 	.word	0xfeffffff
 80023b8:	000007fe 	.word	0x000007fe
 80023bc:	464b      	mov	r3, r9
 80023be:	4323      	orrs	r3, r4
 80023c0:	d059      	beq.n	8002476 <__aeabi_dmul+0x42e>
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dmul+0x380>
 80023c6:	e0a3      	b.n	8002510 <__aeabi_dmul+0x4c8>
 80023c8:	0020      	movs	r0, r4
 80023ca:	f000 fdf9 	bl	8002fc0 <__clzsi2>
 80023ce:	0001      	movs	r1, r0
 80023d0:	0003      	movs	r3, r0
 80023d2:	390b      	subs	r1, #11
 80023d4:	221d      	movs	r2, #29
 80023d6:	1a52      	subs	r2, r2, r1
 80023d8:	4649      	mov	r1, r9
 80023da:	0018      	movs	r0, r3
 80023dc:	40d1      	lsrs	r1, r2
 80023de:	464a      	mov	r2, r9
 80023e0:	3808      	subs	r0, #8
 80023e2:	4082      	lsls	r2, r0
 80023e4:	4084      	lsls	r4, r0
 80023e6:	0010      	movs	r0, r2
 80023e8:	430c      	orrs	r4, r1
 80023ea:	4a74      	ldr	r2, [pc, #464]	; (80025bc <__aeabi_dmul+0x574>)
 80023ec:	1aeb      	subs	r3, r5, r3
 80023ee:	4694      	mov	ip, r2
 80023f0:	4642      	mov	r2, r8
 80023f2:	4463      	add	r3, ip
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	407a      	eors	r2, r7
 80023fa:	3301      	adds	r3, #1
 80023fc:	2100      	movs	r1, #0
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	2e0a      	cmp	r6, #10
 8002404:	dd00      	ble.n	8002408 <__aeabi_dmul+0x3c0>
 8002406:	e667      	b.n	80020d8 <__aeabi_dmul+0x90>
 8002408:	e683      	b.n	8002112 <__aeabi_dmul+0xca>
 800240a:	465b      	mov	r3, fp
 800240c:	4303      	orrs	r3, r0
 800240e:	469a      	mov	sl, r3
 8002410:	d02a      	beq.n	8002468 <__aeabi_dmul+0x420>
 8002412:	465b      	mov	r3, fp
 8002414:	2b00      	cmp	r3, #0
 8002416:	d06d      	beq.n	80024f4 <__aeabi_dmul+0x4ac>
 8002418:	4658      	mov	r0, fp
 800241a:	f000 fdd1 	bl	8002fc0 <__clzsi2>
 800241e:	0001      	movs	r1, r0
 8002420:	0003      	movs	r3, r0
 8002422:	390b      	subs	r1, #11
 8002424:	221d      	movs	r2, #29
 8002426:	1a52      	subs	r2, r2, r1
 8002428:	0021      	movs	r1, r4
 800242a:	0018      	movs	r0, r3
 800242c:	465d      	mov	r5, fp
 800242e:	40d1      	lsrs	r1, r2
 8002430:	3808      	subs	r0, #8
 8002432:	4085      	lsls	r5, r0
 8002434:	000a      	movs	r2, r1
 8002436:	4084      	lsls	r4, r0
 8002438:	432a      	orrs	r2, r5
 800243a:	4693      	mov	fp, r2
 800243c:	46a2      	mov	sl, r4
 800243e:	4d5f      	ldr	r5, [pc, #380]	; (80025bc <__aeabi_dmul+0x574>)
 8002440:	2600      	movs	r6, #0
 8002442:	1aed      	subs	r5, r5, r3
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	e625      	b.n	8002096 <__aeabi_dmul+0x4e>
 800244a:	465b      	mov	r3, fp
 800244c:	4303      	orrs	r3, r0
 800244e:	469a      	mov	sl, r3
 8002450:	d105      	bne.n	800245e <__aeabi_dmul+0x416>
 8002452:	2300      	movs	r3, #0
 8002454:	469b      	mov	fp, r3
 8002456:	3302      	adds	r3, #2
 8002458:	2608      	movs	r6, #8
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	e61b      	b.n	8002096 <__aeabi_dmul+0x4e>
 800245e:	2303      	movs	r3, #3
 8002460:	4682      	mov	sl, r0
 8002462:	260c      	movs	r6, #12
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e616      	b.n	8002096 <__aeabi_dmul+0x4e>
 8002468:	2300      	movs	r3, #0
 800246a:	469b      	mov	fp, r3
 800246c:	3301      	adds	r3, #1
 800246e:	2604      	movs	r6, #4
 8002470:	2500      	movs	r5, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	e60f      	b.n	8002096 <__aeabi_dmul+0x4e>
 8002476:	4642      	mov	r2, r8
 8002478:	3301      	adds	r3, #1
 800247a:	9501      	str	r5, [sp, #4]
 800247c:	431e      	orrs	r6, r3
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	407a      	eors	r2, r7
 8002482:	3301      	adds	r3, #1
 8002484:	2400      	movs	r4, #0
 8002486:	2000      	movs	r0, #0
 8002488:	2101      	movs	r1, #1
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	2e0a      	cmp	r6, #10
 8002490:	dd00      	ble.n	8002494 <__aeabi_dmul+0x44c>
 8002492:	e621      	b.n	80020d8 <__aeabi_dmul+0x90>
 8002494:	e63d      	b.n	8002112 <__aeabi_dmul+0xca>
 8002496:	2101      	movs	r1, #1
 8002498:	1ac9      	subs	r1, r1, r3
 800249a:	2938      	cmp	r1, #56	; 0x38
 800249c:	dd00      	ble.n	80024a0 <__aeabi_dmul+0x458>
 800249e:	e642      	b.n	8002126 <__aeabi_dmul+0xde>
 80024a0:	291f      	cmp	r1, #31
 80024a2:	dd47      	ble.n	8002534 <__aeabi_dmul+0x4ec>
 80024a4:	261f      	movs	r6, #31
 80024a6:	0025      	movs	r5, r4
 80024a8:	4276      	negs	r6, r6
 80024aa:	1af3      	subs	r3, r6, r3
 80024ac:	40dd      	lsrs	r5, r3
 80024ae:	002b      	movs	r3, r5
 80024b0:	2920      	cmp	r1, #32
 80024b2:	d005      	beq.n	80024c0 <__aeabi_dmul+0x478>
 80024b4:	4942      	ldr	r1, [pc, #264]	; (80025c0 <__aeabi_dmul+0x578>)
 80024b6:	9d02      	ldr	r5, [sp, #8]
 80024b8:	468c      	mov	ip, r1
 80024ba:	4465      	add	r5, ip
 80024bc:	40ac      	lsls	r4, r5
 80024be:	4320      	orrs	r0, r4
 80024c0:	1e41      	subs	r1, r0, #1
 80024c2:	4188      	sbcs	r0, r1
 80024c4:	4318      	orrs	r0, r3
 80024c6:	2307      	movs	r3, #7
 80024c8:	001d      	movs	r5, r3
 80024ca:	2400      	movs	r4, #0
 80024cc:	4005      	ands	r5, r0
 80024ce:	4203      	tst	r3, r0
 80024d0:	d04a      	beq.n	8002568 <__aeabi_dmul+0x520>
 80024d2:	230f      	movs	r3, #15
 80024d4:	2400      	movs	r4, #0
 80024d6:	4003      	ands	r3, r0
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d042      	beq.n	8002562 <__aeabi_dmul+0x51a>
 80024dc:	1d03      	adds	r3, r0, #4
 80024de:	4283      	cmp	r3, r0
 80024e0:	4180      	sbcs	r0, r0
 80024e2:	4240      	negs	r0, r0
 80024e4:	1824      	adds	r4, r4, r0
 80024e6:	0018      	movs	r0, r3
 80024e8:	0223      	lsls	r3, r4, #8
 80024ea:	d53a      	bpl.n	8002562 <__aeabi_dmul+0x51a>
 80024ec:	2301      	movs	r3, #1
 80024ee:	2400      	movs	r4, #0
 80024f0:	2500      	movs	r5, #0
 80024f2:	e61b      	b.n	800212c <__aeabi_dmul+0xe4>
 80024f4:	f000 fd64 	bl	8002fc0 <__clzsi2>
 80024f8:	0001      	movs	r1, r0
 80024fa:	0003      	movs	r3, r0
 80024fc:	3115      	adds	r1, #21
 80024fe:	3320      	adds	r3, #32
 8002500:	291c      	cmp	r1, #28
 8002502:	dd8f      	ble.n	8002424 <__aeabi_dmul+0x3dc>
 8002504:	3808      	subs	r0, #8
 8002506:	2200      	movs	r2, #0
 8002508:	4084      	lsls	r4, r0
 800250a:	4692      	mov	sl, r2
 800250c:	46a3      	mov	fp, r4
 800250e:	e796      	b.n	800243e <__aeabi_dmul+0x3f6>
 8002510:	f000 fd56 	bl	8002fc0 <__clzsi2>
 8002514:	0001      	movs	r1, r0
 8002516:	0003      	movs	r3, r0
 8002518:	3115      	adds	r1, #21
 800251a:	3320      	adds	r3, #32
 800251c:	291c      	cmp	r1, #28
 800251e:	dc00      	bgt.n	8002522 <__aeabi_dmul+0x4da>
 8002520:	e758      	b.n	80023d4 <__aeabi_dmul+0x38c>
 8002522:	0002      	movs	r2, r0
 8002524:	464c      	mov	r4, r9
 8002526:	3a08      	subs	r2, #8
 8002528:	2000      	movs	r0, #0
 800252a:	4094      	lsls	r4, r2
 800252c:	e75d      	b.n	80023ea <__aeabi_dmul+0x3a2>
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	e711      	b.n	8002358 <__aeabi_dmul+0x310>
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <__aeabi_dmul+0x57c>)
 8002536:	0026      	movs	r6, r4
 8002538:	469c      	mov	ip, r3
 800253a:	0003      	movs	r3, r0
 800253c:	9d02      	ldr	r5, [sp, #8]
 800253e:	40cb      	lsrs	r3, r1
 8002540:	4465      	add	r5, ip
 8002542:	40ae      	lsls	r6, r5
 8002544:	431e      	orrs	r6, r3
 8002546:	0003      	movs	r3, r0
 8002548:	40ab      	lsls	r3, r5
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	4183      	sbcs	r3, r0
 800254e:	0030      	movs	r0, r6
 8002550:	4318      	orrs	r0, r3
 8002552:	40cc      	lsrs	r4, r1
 8002554:	0743      	lsls	r3, r0, #29
 8002556:	d0c7      	beq.n	80024e8 <__aeabi_dmul+0x4a0>
 8002558:	230f      	movs	r3, #15
 800255a:	4003      	ands	r3, r0
 800255c:	2b04      	cmp	r3, #4
 800255e:	d1bd      	bne.n	80024dc <__aeabi_dmul+0x494>
 8002560:	e7c2      	b.n	80024e8 <__aeabi_dmul+0x4a0>
 8002562:	0765      	lsls	r5, r4, #29
 8002564:	0264      	lsls	r4, r4, #9
 8002566:	0b24      	lsrs	r4, r4, #12
 8002568:	08c0      	lsrs	r0, r0, #3
 800256a:	2300      	movs	r3, #0
 800256c:	4305      	orrs	r5, r0
 800256e:	e5dd      	b.n	800212c <__aeabi_dmul+0xe4>
 8002570:	2500      	movs	r5, #0
 8002572:	2302      	movs	r3, #2
 8002574:	2e0f      	cmp	r6, #15
 8002576:	d10c      	bne.n	8002592 <__aeabi_dmul+0x54a>
 8002578:	2480      	movs	r4, #128	; 0x80
 800257a:	465b      	mov	r3, fp
 800257c:	0324      	lsls	r4, r4, #12
 800257e:	4223      	tst	r3, r4
 8002580:	d00e      	beq.n	80025a0 <__aeabi_dmul+0x558>
 8002582:	4221      	tst	r1, r4
 8002584:	d10c      	bne.n	80025a0 <__aeabi_dmul+0x558>
 8002586:	430c      	orrs	r4, r1
 8002588:	0324      	lsls	r4, r4, #12
 800258a:	003a      	movs	r2, r7
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <__aeabi_dmul+0x580>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e5cc      	b.n	800212c <__aeabi_dmul+0xe4>
 8002592:	2e0b      	cmp	r6, #11
 8002594:	d000      	beq.n	8002598 <__aeabi_dmul+0x550>
 8002596:	e5a2      	b.n	80020de <__aeabi_dmul+0x96>
 8002598:	468b      	mov	fp, r1
 800259a:	46aa      	mov	sl, r5
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	e5f7      	b.n	8002190 <__aeabi_dmul+0x148>
 80025a0:	2480      	movs	r4, #128	; 0x80
 80025a2:	465b      	mov	r3, fp
 80025a4:	0324      	lsls	r4, r4, #12
 80025a6:	431c      	orrs	r4, r3
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	4642      	mov	r2, r8
 80025ac:	4655      	mov	r5, sl
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <__aeabi_dmul+0x580>)
 80025b0:	0b24      	lsrs	r4, r4, #12
 80025b2:	e5bb      	b.n	800212c <__aeabi_dmul+0xe4>
 80025b4:	464d      	mov	r5, r9
 80025b6:	0021      	movs	r1, r4
 80025b8:	2303      	movs	r3, #3
 80025ba:	e7db      	b.n	8002574 <__aeabi_dmul+0x52c>
 80025bc:	fffffc0d 	.word	0xfffffc0d
 80025c0:	0000043e 	.word	0x0000043e
 80025c4:	0000041e 	.word	0x0000041e
 80025c8:	000007ff 	.word	0x000007ff

080025cc <__aeabi_dsub>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	4657      	mov	r7, sl
 80025d0:	464e      	mov	r6, r9
 80025d2:	4645      	mov	r5, r8
 80025d4:	46de      	mov	lr, fp
 80025d6:	b5e0      	push	{r5, r6, r7, lr}
 80025d8:	000d      	movs	r5, r1
 80025da:	0004      	movs	r4, r0
 80025dc:	0019      	movs	r1, r3
 80025de:	0010      	movs	r0, r2
 80025e0:	032b      	lsls	r3, r5, #12
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	0f62      	lsrs	r2, r4, #29
 80025e6:	431a      	orrs	r2, r3
 80025e8:	00e3      	lsls	r3, r4, #3
 80025ea:	030c      	lsls	r4, r1, #12
 80025ec:	0a64      	lsrs	r4, r4, #9
 80025ee:	0f47      	lsrs	r7, r0, #29
 80025f0:	4327      	orrs	r7, r4
 80025f2:	4cd0      	ldr	r4, [pc, #832]	; (8002934 <__aeabi_dsub+0x368>)
 80025f4:	006e      	lsls	r6, r5, #1
 80025f6:	4691      	mov	r9, r2
 80025f8:	b083      	sub	sp, #12
 80025fa:	004a      	lsls	r2, r1, #1
 80025fc:	00c0      	lsls	r0, r0, #3
 80025fe:	4698      	mov	r8, r3
 8002600:	46a2      	mov	sl, r4
 8002602:	0d76      	lsrs	r6, r6, #21
 8002604:	0fed      	lsrs	r5, r5, #31
 8002606:	0d52      	lsrs	r2, r2, #21
 8002608:	0fc9      	lsrs	r1, r1, #31
 800260a:	9001      	str	r0, [sp, #4]
 800260c:	42a2      	cmp	r2, r4
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x46>
 8002610:	e0b9      	b.n	8002786 <__aeabi_dsub+0x1ba>
 8002612:	2401      	movs	r4, #1
 8002614:	4061      	eors	r1, r4
 8002616:	468b      	mov	fp, r1
 8002618:	428d      	cmp	r5, r1
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x52>
 800261c:	e08d      	b.n	800273a <__aeabi_dsub+0x16e>
 800261e:	1ab4      	subs	r4, r6, r2
 8002620:	46a4      	mov	ip, r4
 8002622:	2c00      	cmp	r4, #0
 8002624:	dc00      	bgt.n	8002628 <__aeabi_dsub+0x5c>
 8002626:	e0b7      	b.n	8002798 <__aeabi_dsub+0x1cc>
 8002628:	2a00      	cmp	r2, #0
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x62>
 800262c:	e0cb      	b.n	80027c6 <__aeabi_dsub+0x1fa>
 800262e:	4ac1      	ldr	r2, [pc, #772]	; (8002934 <__aeabi_dsub+0x368>)
 8002630:	4296      	cmp	r6, r2
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x6a>
 8002634:	e186      	b.n	8002944 <__aeabi_dsub+0x378>
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	0412      	lsls	r2, r2, #16
 800263a:	4317      	orrs	r7, r2
 800263c:	4662      	mov	r2, ip
 800263e:	2a38      	cmp	r2, #56	; 0x38
 8002640:	dd00      	ble.n	8002644 <__aeabi_dsub+0x78>
 8002642:	e1a4      	b.n	800298e <__aeabi_dsub+0x3c2>
 8002644:	2a1f      	cmp	r2, #31
 8002646:	dd00      	ble.n	800264a <__aeabi_dsub+0x7e>
 8002648:	e21d      	b.n	8002a86 <__aeabi_dsub+0x4ba>
 800264a:	4661      	mov	r1, ip
 800264c:	2220      	movs	r2, #32
 800264e:	003c      	movs	r4, r7
 8002650:	1a52      	subs	r2, r2, r1
 8002652:	0001      	movs	r1, r0
 8002654:	4090      	lsls	r0, r2
 8002656:	4094      	lsls	r4, r2
 8002658:	1e42      	subs	r2, r0, #1
 800265a:	4190      	sbcs	r0, r2
 800265c:	4662      	mov	r2, ip
 800265e:	46a0      	mov	r8, r4
 8002660:	4664      	mov	r4, ip
 8002662:	40d7      	lsrs	r7, r2
 8002664:	464a      	mov	r2, r9
 8002666:	40e1      	lsrs	r1, r4
 8002668:	4644      	mov	r4, r8
 800266a:	1bd2      	subs	r2, r2, r7
 800266c:	4691      	mov	r9, r2
 800266e:	430c      	orrs	r4, r1
 8002670:	4304      	orrs	r4, r0
 8002672:	1b1c      	subs	r4, r3, r4
 8002674:	42a3      	cmp	r3, r4
 8002676:	4192      	sbcs	r2, r2
 8002678:	464b      	mov	r3, r9
 800267a:	4252      	negs	r2, r2
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	469a      	mov	sl, r3
 8002680:	4653      	mov	r3, sl
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	d400      	bmi.n	8002688 <__aeabi_dsub+0xbc>
 8002686:	e12b      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002688:	4653      	mov	r3, sl
 800268a:	025a      	lsls	r2, r3, #9
 800268c:	0a53      	lsrs	r3, r2, #9
 800268e:	469a      	mov	sl, r3
 8002690:	4653      	mov	r3, sl
 8002692:	2b00      	cmp	r3, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0xcc>
 8002696:	e166      	b.n	8002966 <__aeabi_dsub+0x39a>
 8002698:	4650      	mov	r0, sl
 800269a:	f000 fc91 	bl	8002fc0 <__clzsi2>
 800269e:	0003      	movs	r3, r0
 80026a0:	3b08      	subs	r3, #8
 80026a2:	2220      	movs	r2, #32
 80026a4:	0020      	movs	r0, r4
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	4651      	mov	r1, sl
 80026aa:	40d0      	lsrs	r0, r2
 80026ac:	4099      	lsls	r1, r3
 80026ae:	0002      	movs	r2, r0
 80026b0:	409c      	lsls	r4, r3
 80026b2:	430a      	orrs	r2, r1
 80026b4:	429e      	cmp	r6, r3
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dsub+0xee>
 80026b8:	e164      	b.n	8002984 <__aeabi_dsub+0x3b8>
 80026ba:	1b9b      	subs	r3, r3, r6
 80026bc:	1c59      	adds	r1, r3, #1
 80026be:	291f      	cmp	r1, #31
 80026c0:	dd00      	ble.n	80026c4 <__aeabi_dsub+0xf8>
 80026c2:	e0fe      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 80026c4:	2320      	movs	r3, #32
 80026c6:	0010      	movs	r0, r2
 80026c8:	0026      	movs	r6, r4
 80026ca:	1a5b      	subs	r3, r3, r1
 80026cc:	409c      	lsls	r4, r3
 80026ce:	4098      	lsls	r0, r3
 80026d0:	40ce      	lsrs	r6, r1
 80026d2:	40ca      	lsrs	r2, r1
 80026d4:	1e63      	subs	r3, r4, #1
 80026d6:	419c      	sbcs	r4, r3
 80026d8:	4330      	orrs	r0, r6
 80026da:	4692      	mov	sl, r2
 80026dc:	2600      	movs	r6, #0
 80026de:	4304      	orrs	r4, r0
 80026e0:	0763      	lsls	r3, r4, #29
 80026e2:	d009      	beq.n	80026f8 <__aeabi_dsub+0x12c>
 80026e4:	230f      	movs	r3, #15
 80026e6:	4023      	ands	r3, r4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d005      	beq.n	80026f8 <__aeabi_dsub+0x12c>
 80026ec:	1d23      	adds	r3, r4, #4
 80026ee:	42a3      	cmp	r3, r4
 80026f0:	41a4      	sbcs	r4, r4
 80026f2:	4264      	negs	r4, r4
 80026f4:	44a2      	add	sl, r4
 80026f6:	001c      	movs	r4, r3
 80026f8:	4653      	mov	r3, sl
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	d400      	bmi.n	8002700 <__aeabi_dsub+0x134>
 80026fe:	e0f2      	b.n	80028e6 <__aeabi_dsub+0x31a>
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <__aeabi_dsub+0x368>)
 8002702:	3601      	adds	r6, #1
 8002704:	429e      	cmp	r6, r3
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0x13e>
 8002708:	e10f      	b.n	800292a <__aeabi_dsub+0x35e>
 800270a:	4653      	mov	r3, sl
 800270c:	498a      	ldr	r1, [pc, #552]	; (8002938 <__aeabi_dsub+0x36c>)
 800270e:	08e4      	lsrs	r4, r4, #3
 8002710:	400b      	ands	r3, r1
 8002712:	0019      	movs	r1, r3
 8002714:	075b      	lsls	r3, r3, #29
 8002716:	4323      	orrs	r3, r4
 8002718:	0572      	lsls	r2, r6, #21
 800271a:	024c      	lsls	r4, r1, #9
 800271c:	0b24      	lsrs	r4, r4, #12
 800271e:	0d52      	lsrs	r2, r2, #21
 8002720:	0512      	lsls	r2, r2, #20
 8002722:	4322      	orrs	r2, r4
 8002724:	07ed      	lsls	r5, r5, #31
 8002726:	432a      	orrs	r2, r5
 8002728:	0018      	movs	r0, r3
 800272a:	0011      	movs	r1, r2
 800272c:	b003      	add	sp, #12
 800272e:	bcf0      	pop	{r4, r5, r6, r7}
 8002730:	46bb      	mov	fp, r7
 8002732:	46b2      	mov	sl, r6
 8002734:	46a9      	mov	r9, r5
 8002736:	46a0      	mov	r8, r4
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273a:	1ab4      	subs	r4, r6, r2
 800273c:	46a4      	mov	ip, r4
 800273e:	2c00      	cmp	r4, #0
 8002740:	dd59      	ble.n	80027f6 <__aeabi_dsub+0x22a>
 8002742:	2a00      	cmp	r2, #0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x17c>
 8002746:	e0b0      	b.n	80028aa <__aeabi_dsub+0x2de>
 8002748:	4556      	cmp	r6, sl
 800274a:	d100      	bne.n	800274e <__aeabi_dsub+0x182>
 800274c:	e0fa      	b.n	8002944 <__aeabi_dsub+0x378>
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	0412      	lsls	r2, r2, #16
 8002752:	4317      	orrs	r7, r2
 8002754:	4662      	mov	r2, ip
 8002756:	2a38      	cmp	r2, #56	; 0x38
 8002758:	dd00      	ble.n	800275c <__aeabi_dsub+0x190>
 800275a:	e0d4      	b.n	8002906 <__aeabi_dsub+0x33a>
 800275c:	2a1f      	cmp	r2, #31
 800275e:	dc00      	bgt.n	8002762 <__aeabi_dsub+0x196>
 8002760:	e1c0      	b.n	8002ae4 <__aeabi_dsub+0x518>
 8002762:	0039      	movs	r1, r7
 8002764:	3a20      	subs	r2, #32
 8002766:	40d1      	lsrs	r1, r2
 8002768:	4662      	mov	r2, ip
 800276a:	2a20      	cmp	r2, #32
 800276c:	d006      	beq.n	800277c <__aeabi_dsub+0x1b0>
 800276e:	4664      	mov	r4, ip
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	1b12      	subs	r2, r2, r4
 8002774:	003c      	movs	r4, r7
 8002776:	4094      	lsls	r4, r2
 8002778:	4304      	orrs	r4, r0
 800277a:	9401      	str	r4, [sp, #4]
 800277c:	9c01      	ldr	r4, [sp, #4]
 800277e:	1e62      	subs	r2, r4, #1
 8002780:	4194      	sbcs	r4, r2
 8002782:	430c      	orrs	r4, r1
 8002784:	e0c3      	b.n	800290e <__aeabi_dsub+0x342>
 8002786:	003c      	movs	r4, r7
 8002788:	4304      	orrs	r4, r0
 800278a:	d02b      	beq.n	80027e4 <__aeabi_dsub+0x218>
 800278c:	468b      	mov	fp, r1
 800278e:	428d      	cmp	r5, r1
 8002790:	d02e      	beq.n	80027f0 <__aeabi_dsub+0x224>
 8002792:	4c6a      	ldr	r4, [pc, #424]	; (800293c <__aeabi_dsub+0x370>)
 8002794:	46a4      	mov	ip, r4
 8002796:	44b4      	add	ip, r6
 8002798:	4664      	mov	r4, ip
 800279a:	2c00      	cmp	r4, #0
 800279c:	d05f      	beq.n	800285e <__aeabi_dsub+0x292>
 800279e:	1b94      	subs	r4, r2, r6
 80027a0:	46a4      	mov	ip, r4
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d000      	beq.n	80027a8 <__aeabi_dsub+0x1dc>
 80027a6:	e120      	b.n	80029ea <__aeabi_dsub+0x41e>
 80027a8:	464c      	mov	r4, r9
 80027aa:	431c      	orrs	r4, r3
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x1e4>
 80027ae:	e1c7      	b.n	8002b40 <__aeabi_dsub+0x574>
 80027b0:	4661      	mov	r1, ip
 80027b2:	1e4c      	subs	r4, r1, #1
 80027b4:	2901      	cmp	r1, #1
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x1ee>
 80027b8:	e223      	b.n	8002c02 <__aeabi_dsub+0x636>
 80027ba:	4d5e      	ldr	r5, [pc, #376]	; (8002934 <__aeabi_dsub+0x368>)
 80027bc:	45ac      	cmp	ip, r5
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x1f6>
 80027c0:	e1d8      	b.n	8002b74 <__aeabi_dsub+0x5a8>
 80027c2:	46a4      	mov	ip, r4
 80027c4:	e11a      	b.n	80029fc <__aeabi_dsub+0x430>
 80027c6:	003a      	movs	r2, r7
 80027c8:	4302      	orrs	r2, r0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x202>
 80027cc:	e0e4      	b.n	8002998 <__aeabi_dsub+0x3cc>
 80027ce:	0022      	movs	r2, r4
 80027d0:	3a01      	subs	r2, #1
 80027d2:	2c01      	cmp	r4, #1
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x20c>
 80027d6:	e1c3      	b.n	8002b60 <__aeabi_dsub+0x594>
 80027d8:	4956      	ldr	r1, [pc, #344]	; (8002934 <__aeabi_dsub+0x368>)
 80027da:	428c      	cmp	r4, r1
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x214>
 80027de:	e0b1      	b.n	8002944 <__aeabi_dsub+0x378>
 80027e0:	4694      	mov	ip, r2
 80027e2:	e72b      	b.n	800263c <__aeabi_dsub+0x70>
 80027e4:	2401      	movs	r4, #1
 80027e6:	4061      	eors	r1, r4
 80027e8:	468b      	mov	fp, r1
 80027ea:	428d      	cmp	r5, r1
 80027ec:	d000      	beq.n	80027f0 <__aeabi_dsub+0x224>
 80027ee:	e716      	b.n	800261e <__aeabi_dsub+0x52>
 80027f0:	4952      	ldr	r1, [pc, #328]	; (800293c <__aeabi_dsub+0x370>)
 80027f2:	468c      	mov	ip, r1
 80027f4:	44b4      	add	ip, r6
 80027f6:	4664      	mov	r4, ip
 80027f8:	2c00      	cmp	r4, #0
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x232>
 80027fc:	e0d3      	b.n	80029a6 <__aeabi_dsub+0x3da>
 80027fe:	1b91      	subs	r1, r2, r6
 8002800:	468c      	mov	ip, r1
 8002802:	2e00      	cmp	r6, #0
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x23c>
 8002806:	e15e      	b.n	8002ac6 <__aeabi_dsub+0x4fa>
 8002808:	494a      	ldr	r1, [pc, #296]	; (8002934 <__aeabi_dsub+0x368>)
 800280a:	428a      	cmp	r2, r1
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x244>
 800280e:	e1be      	b.n	8002b8e <__aeabi_dsub+0x5c2>
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	464c      	mov	r4, r9
 8002814:	0409      	lsls	r1, r1, #16
 8002816:	430c      	orrs	r4, r1
 8002818:	46a1      	mov	r9, r4
 800281a:	4661      	mov	r1, ip
 800281c:	2938      	cmp	r1, #56	; 0x38
 800281e:	dd00      	ble.n	8002822 <__aeabi_dsub+0x256>
 8002820:	e1ba      	b.n	8002b98 <__aeabi_dsub+0x5cc>
 8002822:	291f      	cmp	r1, #31
 8002824:	dd00      	ble.n	8002828 <__aeabi_dsub+0x25c>
 8002826:	e227      	b.n	8002c78 <__aeabi_dsub+0x6ac>
 8002828:	2420      	movs	r4, #32
 800282a:	1a64      	subs	r4, r4, r1
 800282c:	4649      	mov	r1, r9
 800282e:	40a1      	lsls	r1, r4
 8002830:	001e      	movs	r6, r3
 8002832:	4688      	mov	r8, r1
 8002834:	4661      	mov	r1, ip
 8002836:	40a3      	lsls	r3, r4
 8002838:	40ce      	lsrs	r6, r1
 800283a:	4641      	mov	r1, r8
 800283c:	1e5c      	subs	r4, r3, #1
 800283e:	41a3      	sbcs	r3, r4
 8002840:	4331      	orrs	r1, r6
 8002842:	4319      	orrs	r1, r3
 8002844:	000c      	movs	r4, r1
 8002846:	4663      	mov	r3, ip
 8002848:	4649      	mov	r1, r9
 800284a:	40d9      	lsrs	r1, r3
 800284c:	187f      	adds	r7, r7, r1
 800284e:	1824      	adds	r4, r4, r0
 8002850:	4284      	cmp	r4, r0
 8002852:	419b      	sbcs	r3, r3
 8002854:	425b      	negs	r3, r3
 8002856:	469a      	mov	sl, r3
 8002858:	0016      	movs	r6, r2
 800285a:	44ba      	add	sl, r7
 800285c:	e05d      	b.n	800291a <__aeabi_dsub+0x34e>
 800285e:	4c38      	ldr	r4, [pc, #224]	; (8002940 <__aeabi_dsub+0x374>)
 8002860:	1c72      	adds	r2, r6, #1
 8002862:	4222      	tst	r2, r4
 8002864:	d000      	beq.n	8002868 <__aeabi_dsub+0x29c>
 8002866:	e0df      	b.n	8002a28 <__aeabi_dsub+0x45c>
 8002868:	464a      	mov	r2, r9
 800286a:	431a      	orrs	r2, r3
 800286c:	2e00      	cmp	r6, #0
 800286e:	d000      	beq.n	8002872 <__aeabi_dsub+0x2a6>
 8002870:	e15c      	b.n	8002b2c <__aeabi_dsub+0x560>
 8002872:	2a00      	cmp	r2, #0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x2ac>
 8002876:	e1cf      	b.n	8002c18 <__aeabi_dsub+0x64c>
 8002878:	003a      	movs	r2, r7
 800287a:	4302      	orrs	r2, r0
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x2b4>
 800287e:	e17f      	b.n	8002b80 <__aeabi_dsub+0x5b4>
 8002880:	1a1c      	subs	r4, r3, r0
 8002882:	464a      	mov	r2, r9
 8002884:	42a3      	cmp	r3, r4
 8002886:	4189      	sbcs	r1, r1
 8002888:	1bd2      	subs	r2, r2, r7
 800288a:	4249      	negs	r1, r1
 800288c:	1a52      	subs	r2, r2, r1
 800288e:	4692      	mov	sl, r2
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	d400      	bmi.n	8002896 <__aeabi_dsub+0x2ca>
 8002894:	e20a      	b.n	8002cac <__aeabi_dsub+0x6e0>
 8002896:	1ac4      	subs	r4, r0, r3
 8002898:	42a0      	cmp	r0, r4
 800289a:	4180      	sbcs	r0, r0
 800289c:	464b      	mov	r3, r9
 800289e:	4240      	negs	r0, r0
 80028a0:	1aff      	subs	r7, r7, r3
 80028a2:	1a3b      	subs	r3, r7, r0
 80028a4:	469a      	mov	sl, r3
 80028a6:	465d      	mov	r5, fp
 80028a8:	e71a      	b.n	80026e0 <__aeabi_dsub+0x114>
 80028aa:	003a      	movs	r2, r7
 80028ac:	4302      	orrs	r2, r0
 80028ae:	d073      	beq.n	8002998 <__aeabi_dsub+0x3cc>
 80028b0:	0022      	movs	r2, r4
 80028b2:	3a01      	subs	r2, #1
 80028b4:	2c01      	cmp	r4, #1
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x2ee>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x486>
 80028ba:	4554      	cmp	r4, sl
 80028bc:	d042      	beq.n	8002944 <__aeabi_dsub+0x378>
 80028be:	4694      	mov	ip, r2
 80028c0:	e748      	b.n	8002754 <__aeabi_dsub+0x188>
 80028c2:	0010      	movs	r0, r2
 80028c4:	3b1f      	subs	r3, #31
 80028c6:	40d8      	lsrs	r0, r3
 80028c8:	2920      	cmp	r1, #32
 80028ca:	d003      	beq.n	80028d4 <__aeabi_dsub+0x308>
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	1a5b      	subs	r3, r3, r1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	4314      	orrs	r4, r2
 80028d4:	1e63      	subs	r3, r4, #1
 80028d6:	419c      	sbcs	r4, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	2600      	movs	r6, #0
 80028dc:	469a      	mov	sl, r3
 80028de:	4304      	orrs	r4, r0
 80028e0:	0763      	lsls	r3, r4, #29
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x31a>
 80028e4:	e6fe      	b.n	80026e4 <__aeabi_dsub+0x118>
 80028e6:	4652      	mov	r2, sl
 80028e8:	08e3      	lsrs	r3, r4, #3
 80028ea:	0752      	lsls	r2, r2, #29
 80028ec:	4313      	orrs	r3, r2
 80028ee:	4652      	mov	r2, sl
 80028f0:	46b4      	mov	ip, r6
 80028f2:	08d2      	lsrs	r2, r2, #3
 80028f4:	490f      	ldr	r1, [pc, #60]	; (8002934 <__aeabi_dsub+0x368>)
 80028f6:	458c      	cmp	ip, r1
 80028f8:	d02a      	beq.n	8002950 <__aeabi_dsub+0x384>
 80028fa:	0312      	lsls	r2, r2, #12
 80028fc:	0b14      	lsrs	r4, r2, #12
 80028fe:	4662      	mov	r2, ip
 8002900:	0552      	lsls	r2, r2, #21
 8002902:	0d52      	lsrs	r2, r2, #21
 8002904:	e70c      	b.n	8002720 <__aeabi_dsub+0x154>
 8002906:	003c      	movs	r4, r7
 8002908:	4304      	orrs	r4, r0
 800290a:	1e62      	subs	r2, r4, #1
 800290c:	4194      	sbcs	r4, r2
 800290e:	18e4      	adds	r4, r4, r3
 8002910:	429c      	cmp	r4, r3
 8002912:	4192      	sbcs	r2, r2
 8002914:	4252      	negs	r2, r2
 8002916:	444a      	add	r2, r9
 8002918:	4692      	mov	sl, r2
 800291a:	4653      	mov	r3, sl
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	d5df      	bpl.n	80028e0 <__aeabi_dsub+0x314>
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__aeabi_dsub+0x368>)
 8002922:	3601      	adds	r6, #1
 8002924:	429e      	cmp	r6, r3
 8002926:	d000      	beq.n	800292a <__aeabi_dsub+0x35e>
 8002928:	e0a0      	b.n	8002a6c <__aeabi_dsub+0x4a0>
 800292a:	0032      	movs	r2, r6
 800292c:	2400      	movs	r4, #0
 800292e:	2300      	movs	r3, #0
 8002930:	e6f6      	b.n	8002720 <__aeabi_dsub+0x154>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff
 8002938:	ff7fffff 	.word	0xff7fffff
 800293c:	fffff801 	.word	0xfffff801
 8002940:	000007fe 	.word	0x000007fe
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	464a      	mov	r2, r9
 8002948:	0752      	lsls	r2, r2, #29
 800294a:	4313      	orrs	r3, r2
 800294c:	464a      	mov	r2, r9
 800294e:	08d2      	lsrs	r2, r2, #3
 8002950:	0019      	movs	r1, r3
 8002952:	4311      	orrs	r1, r2
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x38c>
 8002956:	e1b5      	b.n	8002cc4 <__aeabi_dsub+0x6f8>
 8002958:	2480      	movs	r4, #128	; 0x80
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4314      	orrs	r4, r2
 800295e:	0324      	lsls	r4, r4, #12
 8002960:	4ad5      	ldr	r2, [pc, #852]	; (8002cb8 <__aeabi_dsub+0x6ec>)
 8002962:	0b24      	lsrs	r4, r4, #12
 8002964:	e6dc      	b.n	8002720 <__aeabi_dsub+0x154>
 8002966:	0020      	movs	r0, r4
 8002968:	f000 fb2a 	bl	8002fc0 <__clzsi2>
 800296c:	0003      	movs	r3, r0
 800296e:	3318      	adds	r3, #24
 8002970:	2b1f      	cmp	r3, #31
 8002972:	dc00      	bgt.n	8002976 <__aeabi_dsub+0x3aa>
 8002974:	e695      	b.n	80026a2 <__aeabi_dsub+0xd6>
 8002976:	0022      	movs	r2, r4
 8002978:	3808      	subs	r0, #8
 800297a:	4082      	lsls	r2, r0
 800297c:	2400      	movs	r4, #0
 800297e:	429e      	cmp	r6, r3
 8002980:	dc00      	bgt.n	8002984 <__aeabi_dsub+0x3b8>
 8002982:	e69a      	b.n	80026ba <__aeabi_dsub+0xee>
 8002984:	1af6      	subs	r6, r6, r3
 8002986:	4bcd      	ldr	r3, [pc, #820]	; (8002cbc <__aeabi_dsub+0x6f0>)
 8002988:	401a      	ands	r2, r3
 800298a:	4692      	mov	sl, r2
 800298c:	e6a8      	b.n	80026e0 <__aeabi_dsub+0x114>
 800298e:	003c      	movs	r4, r7
 8002990:	4304      	orrs	r4, r0
 8002992:	1e62      	subs	r2, r4, #1
 8002994:	4194      	sbcs	r4, r2
 8002996:	e66c      	b.n	8002672 <__aeabi_dsub+0xa6>
 8002998:	464a      	mov	r2, r9
 800299a:	08db      	lsrs	r3, r3, #3
 800299c:	0752      	lsls	r2, r2, #29
 800299e:	4313      	orrs	r3, r2
 80029a0:	464a      	mov	r2, r9
 80029a2:	08d2      	lsrs	r2, r2, #3
 80029a4:	e7a6      	b.n	80028f4 <__aeabi_dsub+0x328>
 80029a6:	4cc6      	ldr	r4, [pc, #792]	; (8002cc0 <__aeabi_dsub+0x6f4>)
 80029a8:	1c72      	adds	r2, r6, #1
 80029aa:	4222      	tst	r2, r4
 80029ac:	d000      	beq.n	80029b0 <__aeabi_dsub+0x3e4>
 80029ae:	e0ac      	b.n	8002b0a <__aeabi_dsub+0x53e>
 80029b0:	464a      	mov	r2, r9
 80029b2:	431a      	orrs	r2, r3
 80029b4:	2e00      	cmp	r6, #0
 80029b6:	d000      	beq.n	80029ba <__aeabi_dsub+0x3ee>
 80029b8:	e105      	b.n	8002bc6 <__aeabi_dsub+0x5fa>
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x3f4>
 80029be:	e156      	b.n	8002c6e <__aeabi_dsub+0x6a2>
 80029c0:	003a      	movs	r2, r7
 80029c2:	4302      	orrs	r2, r0
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x3fc>
 80029c6:	e0db      	b.n	8002b80 <__aeabi_dsub+0x5b4>
 80029c8:	181c      	adds	r4, r3, r0
 80029ca:	429c      	cmp	r4, r3
 80029cc:	419b      	sbcs	r3, r3
 80029ce:	444f      	add	r7, r9
 80029d0:	46ba      	mov	sl, r7
 80029d2:	425b      	negs	r3, r3
 80029d4:	449a      	add	sl, r3
 80029d6:	4653      	mov	r3, sl
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	d400      	bmi.n	80029de <__aeabi_dsub+0x412>
 80029dc:	e780      	b.n	80028e0 <__aeabi_dsub+0x314>
 80029de:	4652      	mov	r2, sl
 80029e0:	4bb6      	ldr	r3, [pc, #728]	; (8002cbc <__aeabi_dsub+0x6f0>)
 80029e2:	2601      	movs	r6, #1
 80029e4:	401a      	ands	r2, r3
 80029e6:	4692      	mov	sl, r2
 80029e8:	e77a      	b.n	80028e0 <__aeabi_dsub+0x314>
 80029ea:	4cb3      	ldr	r4, [pc, #716]	; (8002cb8 <__aeabi_dsub+0x6ec>)
 80029ec:	42a2      	cmp	r2, r4
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dsub+0x426>
 80029f0:	e0c0      	b.n	8002b74 <__aeabi_dsub+0x5a8>
 80029f2:	2480      	movs	r4, #128	; 0x80
 80029f4:	464d      	mov	r5, r9
 80029f6:	0424      	lsls	r4, r4, #16
 80029f8:	4325      	orrs	r5, r4
 80029fa:	46a9      	mov	r9, r5
 80029fc:	4664      	mov	r4, ip
 80029fe:	2c38      	cmp	r4, #56	; 0x38
 8002a00:	dc53      	bgt.n	8002aaa <__aeabi_dsub+0x4de>
 8002a02:	4661      	mov	r1, ip
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd00      	ble.n	8002a0a <__aeabi_dsub+0x43e>
 8002a08:	e0cd      	b.n	8002ba6 <__aeabi_dsub+0x5da>
 8002a0a:	2520      	movs	r5, #32
 8002a0c:	001e      	movs	r6, r3
 8002a0e:	1b2d      	subs	r5, r5, r4
 8002a10:	464c      	mov	r4, r9
 8002a12:	40ab      	lsls	r3, r5
 8002a14:	40ac      	lsls	r4, r5
 8002a16:	40ce      	lsrs	r6, r1
 8002a18:	1e5d      	subs	r5, r3, #1
 8002a1a:	41ab      	sbcs	r3, r5
 8002a1c:	4334      	orrs	r4, r6
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	464c      	mov	r4, r9
 8002a22:	40cc      	lsrs	r4, r1
 8002a24:	1b3f      	subs	r7, r7, r4
 8002a26:	e045      	b.n	8002ab4 <__aeabi_dsub+0x4e8>
 8002a28:	464a      	mov	r2, r9
 8002a2a:	1a1c      	subs	r4, r3, r0
 8002a2c:	1bd1      	subs	r1, r2, r7
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	4192      	sbcs	r2, r2
 8002a32:	4252      	negs	r2, r2
 8002a34:	4692      	mov	sl, r2
 8002a36:	000a      	movs	r2, r1
 8002a38:	4651      	mov	r1, sl
 8002a3a:	1a52      	subs	r2, r2, r1
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	0212      	lsls	r2, r2, #8
 8002a40:	d500      	bpl.n	8002a44 <__aeabi_dsub+0x478>
 8002a42:	e083      	b.n	8002b4c <__aeabi_dsub+0x580>
 8002a44:	4653      	mov	r3, sl
 8002a46:	4323      	orrs	r3, r4
 8002a48:	d000      	beq.n	8002a4c <__aeabi_dsub+0x480>
 8002a4a:	e621      	b.n	8002690 <__aeabi_dsub+0xc4>
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2500      	movs	r5, #0
 8002a50:	e753      	b.n	80028fa <__aeabi_dsub+0x32e>
 8002a52:	181c      	adds	r4, r3, r0
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	444f      	add	r7, r9
 8002a5a:	46ba      	mov	sl, r7
 8002a5c:	425b      	negs	r3, r3
 8002a5e:	449a      	add	sl, r3
 8002a60:	4653      	mov	r3, sl
 8002a62:	2601      	movs	r6, #1
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	d400      	bmi.n	8002a6a <__aeabi_dsub+0x49e>
 8002a68:	e73a      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002a6a:	2602      	movs	r6, #2
 8002a6c:	4652      	mov	r2, sl
 8002a6e:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <__aeabi_dsub+0x6f0>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	401a      	ands	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	4021      	ands	r1, r4
 8002a78:	0862      	lsrs	r2, r4, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	07dc      	lsls	r4, r3, #31
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	469a      	mov	sl, r3
 8002a82:	4314      	orrs	r4, r2
 8002a84:	e62c      	b.n	80026e0 <__aeabi_dsub+0x114>
 8002a86:	0039      	movs	r1, r7
 8002a88:	3a20      	subs	r2, #32
 8002a8a:	40d1      	lsrs	r1, r2
 8002a8c:	4662      	mov	r2, ip
 8002a8e:	2a20      	cmp	r2, #32
 8002a90:	d006      	beq.n	8002aa0 <__aeabi_dsub+0x4d4>
 8002a92:	4664      	mov	r4, ip
 8002a94:	2240      	movs	r2, #64	; 0x40
 8002a96:	1b12      	subs	r2, r2, r4
 8002a98:	003c      	movs	r4, r7
 8002a9a:	4094      	lsls	r4, r2
 8002a9c:	4304      	orrs	r4, r0
 8002a9e:	9401      	str	r4, [sp, #4]
 8002aa0:	9c01      	ldr	r4, [sp, #4]
 8002aa2:	1e62      	subs	r2, r4, #1
 8002aa4:	4194      	sbcs	r4, r2
 8002aa6:	430c      	orrs	r4, r1
 8002aa8:	e5e3      	b.n	8002672 <__aeabi_dsub+0xa6>
 8002aaa:	4649      	mov	r1, r9
 8002aac:	4319      	orrs	r1, r3
 8002aae:	000b      	movs	r3, r1
 8002ab0:	1e5c      	subs	r4, r3, #1
 8002ab2:	41a3      	sbcs	r3, r4
 8002ab4:	1ac4      	subs	r4, r0, r3
 8002ab6:	42a0      	cmp	r0, r4
 8002ab8:	419b      	sbcs	r3, r3
 8002aba:	425b      	negs	r3, r3
 8002abc:	1afb      	subs	r3, r7, r3
 8002abe:	469a      	mov	sl, r3
 8002ac0:	465d      	mov	r5, fp
 8002ac2:	0016      	movs	r6, r2
 8002ac4:	e5dc      	b.n	8002680 <__aeabi_dsub+0xb4>
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4319      	orrs	r1, r3
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x502>
 8002acc:	e0ae      	b.n	8002c2c <__aeabi_dsub+0x660>
 8002ace:	4661      	mov	r1, ip
 8002ad0:	4664      	mov	r4, ip
 8002ad2:	3901      	subs	r1, #1
 8002ad4:	2c01      	cmp	r4, #1
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x50e>
 8002ad8:	e0e0      	b.n	8002c9c <__aeabi_dsub+0x6d0>
 8002ada:	4c77      	ldr	r4, [pc, #476]	; (8002cb8 <__aeabi_dsub+0x6ec>)
 8002adc:	45a4      	cmp	ip, r4
 8002ade:	d056      	beq.n	8002b8e <__aeabi_dsub+0x5c2>
 8002ae0:	468c      	mov	ip, r1
 8002ae2:	e69a      	b.n	800281a <__aeabi_dsub+0x24e>
 8002ae4:	4661      	mov	r1, ip
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	003c      	movs	r4, r7
 8002aea:	1a52      	subs	r2, r2, r1
 8002aec:	4094      	lsls	r4, r2
 8002aee:	0001      	movs	r1, r0
 8002af0:	4090      	lsls	r0, r2
 8002af2:	46a0      	mov	r8, r4
 8002af4:	4664      	mov	r4, ip
 8002af6:	1e42      	subs	r2, r0, #1
 8002af8:	4190      	sbcs	r0, r2
 8002afa:	4662      	mov	r2, ip
 8002afc:	40e1      	lsrs	r1, r4
 8002afe:	4644      	mov	r4, r8
 8002b00:	40d7      	lsrs	r7, r2
 8002b02:	430c      	orrs	r4, r1
 8002b04:	4304      	orrs	r4, r0
 8002b06:	44b9      	add	r9, r7
 8002b08:	e701      	b.n	800290e <__aeabi_dsub+0x342>
 8002b0a:	496b      	ldr	r1, [pc, #428]	; (8002cb8 <__aeabi_dsub+0x6ec>)
 8002b0c:	428a      	cmp	r2, r1
 8002b0e:	d100      	bne.n	8002b12 <__aeabi_dsub+0x546>
 8002b10:	e70c      	b.n	800292c <__aeabi_dsub+0x360>
 8002b12:	1818      	adds	r0, r3, r0
 8002b14:	4298      	cmp	r0, r3
 8002b16:	419b      	sbcs	r3, r3
 8002b18:	444f      	add	r7, r9
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	07dc      	lsls	r4, r3, #31
 8002b20:	0840      	lsrs	r0, r0, #1
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	469a      	mov	sl, r3
 8002b26:	0016      	movs	r6, r2
 8002b28:	4304      	orrs	r4, r0
 8002b2a:	e6d9      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d000      	beq.n	8002b32 <__aeabi_dsub+0x566>
 8002b30:	e081      	b.n	8002c36 <__aeabi_dsub+0x66a>
 8002b32:	003b      	movs	r3, r7
 8002b34:	4303      	orrs	r3, r0
 8002b36:	d11d      	bne.n	8002b74 <__aeabi_dsub+0x5a8>
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	0312      	lsls	r2, r2, #12
 8002b3e:	e70b      	b.n	8002958 <__aeabi_dsub+0x38c>
 8002b40:	08c0      	lsrs	r0, r0, #3
 8002b42:	077b      	lsls	r3, r7, #29
 8002b44:	465d      	mov	r5, fp
 8002b46:	4303      	orrs	r3, r0
 8002b48:	08fa      	lsrs	r2, r7, #3
 8002b4a:	e6d3      	b.n	80028f4 <__aeabi_dsub+0x328>
 8002b4c:	1ac4      	subs	r4, r0, r3
 8002b4e:	42a0      	cmp	r0, r4
 8002b50:	4180      	sbcs	r0, r0
 8002b52:	464b      	mov	r3, r9
 8002b54:	4240      	negs	r0, r0
 8002b56:	1aff      	subs	r7, r7, r3
 8002b58:	1a3b      	subs	r3, r7, r0
 8002b5a:	469a      	mov	sl, r3
 8002b5c:	465d      	mov	r5, fp
 8002b5e:	e597      	b.n	8002690 <__aeabi_dsub+0xc4>
 8002b60:	1a1c      	subs	r4, r3, r0
 8002b62:	464a      	mov	r2, r9
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	419b      	sbcs	r3, r3
 8002b68:	1bd7      	subs	r7, r2, r7
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	1afb      	subs	r3, r7, r3
 8002b6e:	469a      	mov	sl, r3
 8002b70:	2601      	movs	r6, #1
 8002b72:	e585      	b.n	8002680 <__aeabi_dsub+0xb4>
 8002b74:	08c0      	lsrs	r0, r0, #3
 8002b76:	077b      	lsls	r3, r7, #29
 8002b78:	465d      	mov	r5, fp
 8002b7a:	4303      	orrs	r3, r0
 8002b7c:	08fa      	lsrs	r2, r7, #3
 8002b7e:	e6e7      	b.n	8002950 <__aeabi_dsub+0x384>
 8002b80:	464a      	mov	r2, r9
 8002b82:	08db      	lsrs	r3, r3, #3
 8002b84:	0752      	lsls	r2, r2, #29
 8002b86:	4313      	orrs	r3, r2
 8002b88:	464a      	mov	r2, r9
 8002b8a:	08d2      	lsrs	r2, r2, #3
 8002b8c:	e6b5      	b.n	80028fa <__aeabi_dsub+0x32e>
 8002b8e:	08c0      	lsrs	r0, r0, #3
 8002b90:	077b      	lsls	r3, r7, #29
 8002b92:	4303      	orrs	r3, r0
 8002b94:	08fa      	lsrs	r2, r7, #3
 8002b96:	e6db      	b.n	8002950 <__aeabi_dsub+0x384>
 8002b98:	4649      	mov	r1, r9
 8002b9a:	4319      	orrs	r1, r3
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	1e59      	subs	r1, r3, #1
 8002ba0:	418b      	sbcs	r3, r1
 8002ba2:	001c      	movs	r4, r3
 8002ba4:	e653      	b.n	800284e <__aeabi_dsub+0x282>
 8002ba6:	464d      	mov	r5, r9
 8002ba8:	3c20      	subs	r4, #32
 8002baa:	40e5      	lsrs	r5, r4
 8002bac:	2920      	cmp	r1, #32
 8002bae:	d005      	beq.n	8002bbc <__aeabi_dsub+0x5f0>
 8002bb0:	2440      	movs	r4, #64	; 0x40
 8002bb2:	1a64      	subs	r4, r4, r1
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	40a1      	lsls	r1, r4
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	4698      	mov	r8, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	1e5c      	subs	r4, r3, #1
 8002bc0:	41a3      	sbcs	r3, r4
 8002bc2:	432b      	orrs	r3, r5
 8002bc4:	e776      	b.n	8002ab4 <__aeabi_dsub+0x4e8>
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	d0e1      	beq.n	8002b8e <__aeabi_dsub+0x5c2>
 8002bca:	003a      	movs	r2, r7
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dsub+0x608>
 8002bd2:	e6b8      	b.n	8002946 <__aeabi_dsub+0x37a>
 8002bd4:	464a      	mov	r2, r9
 8002bd6:	0752      	lsls	r2, r2, #29
 8002bd8:	2480      	movs	r4, #128	; 0x80
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	464a      	mov	r2, r9
 8002bde:	0324      	lsls	r4, r4, #12
 8002be0:	08d2      	lsrs	r2, r2, #3
 8002be2:	4222      	tst	r2, r4
 8002be4:	d007      	beq.n	8002bf6 <__aeabi_dsub+0x62a>
 8002be6:	08fe      	lsrs	r6, r7, #3
 8002be8:	4226      	tst	r6, r4
 8002bea:	d104      	bne.n	8002bf6 <__aeabi_dsub+0x62a>
 8002bec:	465d      	mov	r5, fp
 8002bee:	0032      	movs	r2, r6
 8002bf0:	08c3      	lsrs	r3, r0, #3
 8002bf2:	077f      	lsls	r7, r7, #29
 8002bf4:	433b      	orrs	r3, r7
 8002bf6:	0f59      	lsrs	r1, r3, #29
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	0749      	lsls	r1, r1, #29
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	e6a6      	b.n	8002950 <__aeabi_dsub+0x384>
 8002c02:	1ac4      	subs	r4, r0, r3
 8002c04:	42a0      	cmp	r0, r4
 8002c06:	4180      	sbcs	r0, r0
 8002c08:	464b      	mov	r3, r9
 8002c0a:	4240      	negs	r0, r0
 8002c0c:	1aff      	subs	r7, r7, r3
 8002c0e:	1a3b      	subs	r3, r7, r0
 8002c10:	469a      	mov	sl, r3
 8002c12:	465d      	mov	r5, fp
 8002c14:	2601      	movs	r6, #1
 8002c16:	e533      	b.n	8002680 <__aeabi_dsub+0xb4>
 8002c18:	003b      	movs	r3, r7
 8002c1a:	4303      	orrs	r3, r0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dsub+0x654>
 8002c1e:	e715      	b.n	8002a4c <__aeabi_dsub+0x480>
 8002c20:	08c0      	lsrs	r0, r0, #3
 8002c22:	077b      	lsls	r3, r7, #29
 8002c24:	465d      	mov	r5, fp
 8002c26:	4303      	orrs	r3, r0
 8002c28:	08fa      	lsrs	r2, r7, #3
 8002c2a:	e666      	b.n	80028fa <__aeabi_dsub+0x32e>
 8002c2c:	08c0      	lsrs	r0, r0, #3
 8002c2e:	077b      	lsls	r3, r7, #29
 8002c30:	4303      	orrs	r3, r0
 8002c32:	08fa      	lsrs	r2, r7, #3
 8002c34:	e65e      	b.n	80028f4 <__aeabi_dsub+0x328>
 8002c36:	003a      	movs	r2, r7
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	d100      	bne.n	8002c40 <__aeabi_dsub+0x674>
 8002c3e:	e682      	b.n	8002946 <__aeabi_dsub+0x37a>
 8002c40:	464a      	mov	r2, r9
 8002c42:	0752      	lsls	r2, r2, #29
 8002c44:	2480      	movs	r4, #128	; 0x80
 8002c46:	4313      	orrs	r3, r2
 8002c48:	464a      	mov	r2, r9
 8002c4a:	0324      	lsls	r4, r4, #12
 8002c4c:	08d2      	lsrs	r2, r2, #3
 8002c4e:	4222      	tst	r2, r4
 8002c50:	d007      	beq.n	8002c62 <__aeabi_dsub+0x696>
 8002c52:	08fe      	lsrs	r6, r7, #3
 8002c54:	4226      	tst	r6, r4
 8002c56:	d104      	bne.n	8002c62 <__aeabi_dsub+0x696>
 8002c58:	465d      	mov	r5, fp
 8002c5a:	0032      	movs	r2, r6
 8002c5c:	08c3      	lsrs	r3, r0, #3
 8002c5e:	077f      	lsls	r7, r7, #29
 8002c60:	433b      	orrs	r3, r7
 8002c62:	0f59      	lsrs	r1, r3, #29
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	0749      	lsls	r1, r1, #29
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	e670      	b.n	8002950 <__aeabi_dsub+0x384>
 8002c6e:	08c0      	lsrs	r0, r0, #3
 8002c70:	077b      	lsls	r3, r7, #29
 8002c72:	4303      	orrs	r3, r0
 8002c74:	08fa      	lsrs	r2, r7, #3
 8002c76:	e640      	b.n	80028fa <__aeabi_dsub+0x32e>
 8002c78:	464c      	mov	r4, r9
 8002c7a:	3920      	subs	r1, #32
 8002c7c:	40cc      	lsrs	r4, r1
 8002c7e:	4661      	mov	r1, ip
 8002c80:	2920      	cmp	r1, #32
 8002c82:	d006      	beq.n	8002c92 <__aeabi_dsub+0x6c6>
 8002c84:	4666      	mov	r6, ip
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	1b89      	subs	r1, r1, r6
 8002c8a:	464e      	mov	r6, r9
 8002c8c:	408e      	lsls	r6, r1
 8002c8e:	4333      	orrs	r3, r6
 8002c90:	4698      	mov	r8, r3
 8002c92:	4643      	mov	r3, r8
 8002c94:	1e59      	subs	r1, r3, #1
 8002c96:	418b      	sbcs	r3, r1
 8002c98:	431c      	orrs	r4, r3
 8002c9a:	e5d8      	b.n	800284e <__aeabi_dsub+0x282>
 8002c9c:	181c      	adds	r4, r3, r0
 8002c9e:	4284      	cmp	r4, r0
 8002ca0:	4180      	sbcs	r0, r0
 8002ca2:	444f      	add	r7, r9
 8002ca4:	46ba      	mov	sl, r7
 8002ca6:	4240      	negs	r0, r0
 8002ca8:	4482      	add	sl, r0
 8002caa:	e6d9      	b.n	8002a60 <__aeabi_dsub+0x494>
 8002cac:	4653      	mov	r3, sl
 8002cae:	4323      	orrs	r3, r4
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x6e8>
 8002cb2:	e6cb      	b.n	8002a4c <__aeabi_dsub+0x480>
 8002cb4:	e614      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	000007ff 	.word	0x000007ff
 8002cbc:	ff7fffff 	.word	0xff7fffff
 8002cc0:	000007fe 	.word	0x000007fe
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4a01      	ldr	r2, [pc, #4]	; (8002ccc <__aeabi_dsub+0x700>)
 8002cc8:	001c      	movs	r4, r3
 8002cca:	e529      	b.n	8002720 <__aeabi_dsub+0x154>
 8002ccc:	000007ff 	.word	0x000007ff

08002cd0 <__aeabi_dcmpun>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	0005      	movs	r5, r0
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <__aeabi_dcmpun+0x38>)
 8002cd6:	031c      	lsls	r4, r3, #12
 8002cd8:	0016      	movs	r6, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	030a      	lsls	r2, r1, #12
 8002cde:	0049      	lsls	r1, r1, #1
 8002ce0:	0b12      	lsrs	r2, r2, #12
 8002ce2:	0d49      	lsrs	r1, r1, #21
 8002ce4:	0b24      	lsrs	r4, r4, #12
 8002ce6:	0d5b      	lsrs	r3, r3, #21
 8002ce8:	4281      	cmp	r1, r0
 8002cea:	d008      	beq.n	8002cfe <__aeabi_dcmpun+0x2e>
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <__aeabi_dcmpun+0x38>)
 8002cee:	2000      	movs	r0, #0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <__aeabi_dcmpun+0x2c>
 8002cf4:	0020      	movs	r0, r4
 8002cf6:	4330      	orrs	r0, r6
 8002cf8:	1e43      	subs	r3, r0, #1
 8002cfa:	4198      	sbcs	r0, r3
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
 8002cfe:	2001      	movs	r0, #1
 8002d00:	432a      	orrs	r2, r5
 8002d02:	d1fb      	bne.n	8002cfc <__aeabi_dcmpun+0x2c>
 8002d04:	e7f2      	b.n	8002cec <__aeabi_dcmpun+0x1c>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007ff 	.word	0x000007ff

08002d0c <__aeabi_d2iz>:
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	b530      	push	{r4, r5, lr}
 8002d10:	4c13      	ldr	r4, [pc, #76]	; (8002d60 <__aeabi_d2iz+0x54>)
 8002d12:	0053      	lsls	r3, r2, #1
 8002d14:	0309      	lsls	r1, r1, #12
 8002d16:	0005      	movs	r5, r0
 8002d18:	0b09      	lsrs	r1, r1, #12
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	0d5b      	lsrs	r3, r3, #21
 8002d1e:	0fd2      	lsrs	r2, r2, #31
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	dd04      	ble.n	8002d2e <__aeabi_d2iz+0x22>
 8002d24:	480f      	ldr	r0, [pc, #60]	; (8002d64 <__aeabi_d2iz+0x58>)
 8002d26:	4283      	cmp	r3, r0
 8002d28:	dd02      	ble.n	8002d30 <__aeabi_d2iz+0x24>
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <__aeabi_d2iz+0x5c>)
 8002d2c:	18d0      	adds	r0, r2, r3
 8002d2e:	bd30      	pop	{r4, r5, pc}
 8002d30:	2080      	movs	r0, #128	; 0x80
 8002d32:	0340      	lsls	r0, r0, #13
 8002d34:	4301      	orrs	r1, r0
 8002d36:	480d      	ldr	r0, [pc, #52]	; (8002d6c <__aeabi_d2iz+0x60>)
 8002d38:	1ac0      	subs	r0, r0, r3
 8002d3a:	281f      	cmp	r0, #31
 8002d3c:	dd08      	ble.n	8002d50 <__aeabi_d2iz+0x44>
 8002d3e:	480c      	ldr	r0, [pc, #48]	; (8002d70 <__aeabi_d2iz+0x64>)
 8002d40:	1ac3      	subs	r3, r0, r3
 8002d42:	40d9      	lsrs	r1, r3
 8002d44:	000b      	movs	r3, r1
 8002d46:	4258      	negs	r0, r3
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	d1f0      	bne.n	8002d2e <__aeabi_d2iz+0x22>
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	e7ee      	b.n	8002d2e <__aeabi_d2iz+0x22>
 8002d50:	4c08      	ldr	r4, [pc, #32]	; (8002d74 <__aeabi_d2iz+0x68>)
 8002d52:	40c5      	lsrs	r5, r0
 8002d54:	46a4      	mov	ip, r4
 8002d56:	4463      	add	r3, ip
 8002d58:	4099      	lsls	r1, r3
 8002d5a:	000b      	movs	r3, r1
 8002d5c:	432b      	orrs	r3, r5
 8002d5e:	e7f2      	b.n	8002d46 <__aeabi_d2iz+0x3a>
 8002d60:	000003fe 	.word	0x000003fe
 8002d64:	0000041d 	.word	0x0000041d
 8002d68:	7fffffff 	.word	0x7fffffff
 8002d6c:	00000433 	.word	0x00000433
 8002d70:	00000413 	.word	0x00000413
 8002d74:	fffffbed 	.word	0xfffffbed

08002d78 <__aeabi_i2d>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d016      	beq.n	8002dac <__aeabi_i2d+0x34>
 8002d7e:	17c3      	asrs	r3, r0, #31
 8002d80:	18c5      	adds	r5, r0, r3
 8002d82:	405d      	eors	r5, r3
 8002d84:	0fc4      	lsrs	r4, r0, #31
 8002d86:	0028      	movs	r0, r5
 8002d88:	f000 f91a 	bl	8002fc0 <__clzsi2>
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <__aeabi_i2d+0x5c>)
 8002d8e:	1a1b      	subs	r3, r3, r0
 8002d90:	280a      	cmp	r0, #10
 8002d92:	dc16      	bgt.n	8002dc2 <__aeabi_i2d+0x4a>
 8002d94:	0002      	movs	r2, r0
 8002d96:	002e      	movs	r6, r5
 8002d98:	3215      	adds	r2, #21
 8002d9a:	4096      	lsls	r6, r2
 8002d9c:	220b      	movs	r2, #11
 8002d9e:	1a12      	subs	r2, r2, r0
 8002da0:	40d5      	lsrs	r5, r2
 8002da2:	055b      	lsls	r3, r3, #21
 8002da4:	032d      	lsls	r5, r5, #12
 8002da6:	0b2d      	lsrs	r5, r5, #12
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	e003      	b.n	8002db4 <__aeabi_i2d+0x3c>
 8002dac:	2400      	movs	r4, #0
 8002dae:	2300      	movs	r3, #0
 8002db0:	2500      	movs	r5, #0
 8002db2:	2600      	movs	r6, #0
 8002db4:	051b      	lsls	r3, r3, #20
 8002db6:	432b      	orrs	r3, r5
 8002db8:	07e4      	lsls	r4, r4, #31
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	0030      	movs	r0, r6
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	380b      	subs	r0, #11
 8002dc4:	4085      	lsls	r5, r0
 8002dc6:	055b      	lsls	r3, r3, #21
 8002dc8:	032d      	lsls	r5, r5, #12
 8002dca:	2600      	movs	r6, #0
 8002dcc:	0b2d      	lsrs	r5, r5, #12
 8002dce:	0d5b      	lsrs	r3, r3, #21
 8002dd0:	e7f0      	b.n	8002db4 <__aeabi_i2d+0x3c>
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	0000041e 	.word	0x0000041e

08002dd8 <__aeabi_ui2d>:
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	1e04      	subs	r4, r0, #0
 8002ddc:	d010      	beq.n	8002e00 <__aeabi_ui2d+0x28>
 8002dde:	f000 f8ef 	bl	8002fc0 <__clzsi2>
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <__aeabi_ui2d+0x48>)
 8002de4:	1a1b      	subs	r3, r3, r0
 8002de6:	280a      	cmp	r0, #10
 8002de8:	dc11      	bgt.n	8002e0e <__aeabi_ui2d+0x36>
 8002dea:	220b      	movs	r2, #11
 8002dec:	0021      	movs	r1, r4
 8002dee:	1a12      	subs	r2, r2, r0
 8002df0:	40d1      	lsrs	r1, r2
 8002df2:	3015      	adds	r0, #21
 8002df4:	030a      	lsls	r2, r1, #12
 8002df6:	055b      	lsls	r3, r3, #21
 8002df8:	4084      	lsls	r4, r0
 8002dfa:	0b12      	lsrs	r2, r2, #12
 8002dfc:	0d5b      	lsrs	r3, r3, #21
 8002dfe:	e001      	b.n	8002e04 <__aeabi_ui2d+0x2c>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2200      	movs	r2, #0
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	4313      	orrs	r3, r2
 8002e08:	0020      	movs	r0, r4
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	0022      	movs	r2, r4
 8002e10:	380b      	subs	r0, #11
 8002e12:	4082      	lsls	r2, r0
 8002e14:	055b      	lsls	r3, r3, #21
 8002e16:	0312      	lsls	r2, r2, #12
 8002e18:	2400      	movs	r4, #0
 8002e1a:	0b12      	lsrs	r2, r2, #12
 8002e1c:	0d5b      	lsrs	r3, r3, #21
 8002e1e:	e7f1      	b.n	8002e04 <__aeabi_ui2d+0x2c>
 8002e20:	0000041e 	.word	0x0000041e

08002e24 <__aeabi_f2d>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	0242      	lsls	r2, r0, #9
 8002e28:	0043      	lsls	r3, r0, #1
 8002e2a:	0fc4      	lsrs	r4, r0, #31
 8002e2c:	20fe      	movs	r0, #254	; 0xfe
 8002e2e:	0e1b      	lsrs	r3, r3, #24
 8002e30:	1c59      	adds	r1, r3, #1
 8002e32:	0a55      	lsrs	r5, r2, #9
 8002e34:	4208      	tst	r0, r1
 8002e36:	d00c      	beq.n	8002e52 <__aeabi_f2d+0x2e>
 8002e38:	21e0      	movs	r1, #224	; 0xe0
 8002e3a:	0089      	lsls	r1, r1, #2
 8002e3c:	468c      	mov	ip, r1
 8002e3e:	076d      	lsls	r5, r5, #29
 8002e40:	0b12      	lsrs	r2, r2, #12
 8002e42:	4463      	add	r3, ip
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	4313      	orrs	r3, r2
 8002e48:	07e4      	lsls	r4, r4, #31
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	0019      	movs	r1, r3
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d114      	bne.n	8002e80 <__aeabi_f2d+0x5c>
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	d01b      	beq.n	8002e92 <__aeabi_f2d+0x6e>
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	f000 f8b0 	bl	8002fc0 <__clzsi2>
 8002e60:	280a      	cmp	r0, #10
 8002e62:	dc1c      	bgt.n	8002e9e <__aeabi_f2d+0x7a>
 8002e64:	230b      	movs	r3, #11
 8002e66:	002a      	movs	r2, r5
 8002e68:	1a1b      	subs	r3, r3, r0
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	3315      	adds	r3, #21
 8002e70:	409d      	lsls	r5, r3
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <__aeabi_f2d+0x88>)
 8002e74:	0312      	lsls	r2, r2, #12
 8002e76:	1a1b      	subs	r3, r3, r0
 8002e78:	055b      	lsls	r3, r3, #21
 8002e7a:	0b12      	lsrs	r2, r2, #12
 8002e7c:	0d5b      	lsrs	r3, r3, #21
 8002e7e:	e7e1      	b.n	8002e44 <__aeabi_f2d+0x20>
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	d009      	beq.n	8002e98 <__aeabi_f2d+0x74>
 8002e84:	0b13      	lsrs	r3, r2, #12
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	0312      	lsls	r2, r2, #12
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	076d      	lsls	r5, r5, #29
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <__aeabi_f2d+0x8c>)
 8002e90:	e7d8      	b.n	8002e44 <__aeabi_f2d+0x20>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2200      	movs	r2, #0
 8002e96:	e7d5      	b.n	8002e44 <__aeabi_f2d+0x20>
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <__aeabi_f2d+0x8c>)
 8002e9c:	e7d2      	b.n	8002e44 <__aeabi_f2d+0x20>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	002a      	movs	r2, r5
 8002ea2:	3b0b      	subs	r3, #11
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	e7e3      	b.n	8002e72 <__aeabi_f2d+0x4e>
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	00000389 	.word	0x00000389
 8002eb0:	000007ff 	.word	0x000007ff

08002eb4 <__aeabi_d2f>:
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb8:	004b      	lsls	r3, r1, #1
 8002eba:	030d      	lsls	r5, r1, #12
 8002ebc:	0f40      	lsrs	r0, r0, #29
 8002ebe:	0d5b      	lsrs	r3, r3, #21
 8002ec0:	0fcc      	lsrs	r4, r1, #31
 8002ec2:	0a6d      	lsrs	r5, r5, #9
 8002ec4:	493a      	ldr	r1, [pc, #232]	; (8002fb0 <__aeabi_d2f+0xfc>)
 8002ec6:	4305      	orrs	r5, r0
 8002ec8:	1c58      	adds	r0, r3, #1
 8002eca:	00d7      	lsls	r7, r2, #3
 8002ecc:	4208      	tst	r0, r1
 8002ece:	d00a      	beq.n	8002ee6 <__aeabi_d2f+0x32>
 8002ed0:	4938      	ldr	r1, [pc, #224]	; (8002fb4 <__aeabi_d2f+0x100>)
 8002ed2:	1859      	adds	r1, r3, r1
 8002ed4:	29fe      	cmp	r1, #254	; 0xfe
 8002ed6:	dd16      	ble.n	8002f06 <__aeabi_d2f+0x52>
 8002ed8:	20ff      	movs	r0, #255	; 0xff
 8002eda:	2200      	movs	r2, #0
 8002edc:	05c0      	lsls	r0, r0, #23
 8002ede:	4310      	orrs	r0, r2
 8002ee0:	07e4      	lsls	r4, r4, #31
 8002ee2:	4320      	orrs	r0, r4
 8002ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <__aeabi_d2f+0x44>
 8002eea:	433d      	orrs	r5, r7
 8002eec:	d026      	beq.n	8002f3c <__aeabi_d2f+0x88>
 8002eee:	2205      	movs	r2, #5
 8002ef0:	0192      	lsls	r2, r2, #6
 8002ef2:	0a52      	lsrs	r2, r2, #9
 8002ef4:	b2d8      	uxtb	r0, r3
 8002ef6:	e7f1      	b.n	8002edc <__aeabi_d2f+0x28>
 8002ef8:	432f      	orrs	r7, r5
 8002efa:	d0ed      	beq.n	8002ed8 <__aeabi_d2f+0x24>
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	03d2      	lsls	r2, r2, #15
 8002f00:	20ff      	movs	r0, #255	; 0xff
 8002f02:	432a      	orrs	r2, r5
 8002f04:	e7ea      	b.n	8002edc <__aeabi_d2f+0x28>
 8002f06:	2900      	cmp	r1, #0
 8002f08:	dd1b      	ble.n	8002f42 <__aeabi_d2f+0x8e>
 8002f0a:	0192      	lsls	r2, r2, #6
 8002f0c:	1e50      	subs	r0, r2, #1
 8002f0e:	4182      	sbcs	r2, r0
 8002f10:	00ed      	lsls	r5, r5, #3
 8002f12:	0f7f      	lsrs	r7, r7, #29
 8002f14:	432a      	orrs	r2, r5
 8002f16:	433a      	orrs	r2, r7
 8002f18:	0753      	lsls	r3, r2, #29
 8002f1a:	d047      	beq.n	8002fac <__aeabi_d2f+0xf8>
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d000      	beq.n	8002f26 <__aeabi_d2f+0x72>
 8002f24:	3204      	adds	r2, #4
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	04db      	lsls	r3, r3, #19
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d03e      	beq.n	8002fac <__aeabi_d2f+0xf8>
 8002f2e:	1c48      	adds	r0, r1, #1
 8002f30:	29fe      	cmp	r1, #254	; 0xfe
 8002f32:	d0d1      	beq.n	8002ed8 <__aeabi_d2f+0x24>
 8002f34:	0192      	lsls	r2, r2, #6
 8002f36:	0a52      	lsrs	r2, r2, #9
 8002f38:	b2c0      	uxtb	r0, r0
 8002f3a:	e7cf      	b.n	8002edc <__aeabi_d2f+0x28>
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	2200      	movs	r2, #0
 8002f40:	e7cc      	b.n	8002edc <__aeabi_d2f+0x28>
 8002f42:	000a      	movs	r2, r1
 8002f44:	3217      	adds	r2, #23
 8002f46:	db2f      	blt.n	8002fa8 <__aeabi_d2f+0xf4>
 8002f48:	2680      	movs	r6, #128	; 0x80
 8002f4a:	0436      	lsls	r6, r6, #16
 8002f4c:	432e      	orrs	r6, r5
 8002f4e:	251e      	movs	r5, #30
 8002f50:	1a6d      	subs	r5, r5, r1
 8002f52:	2d1f      	cmp	r5, #31
 8002f54:	dd11      	ble.n	8002f7a <__aeabi_d2f+0xc6>
 8002f56:	2202      	movs	r2, #2
 8002f58:	4252      	negs	r2, r2
 8002f5a:	1a52      	subs	r2, r2, r1
 8002f5c:	0031      	movs	r1, r6
 8002f5e:	40d1      	lsrs	r1, r2
 8002f60:	2d20      	cmp	r5, #32
 8002f62:	d004      	beq.n	8002f6e <__aeabi_d2f+0xba>
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <__aeabi_d2f+0x104>)
 8002f66:	4694      	mov	ip, r2
 8002f68:	4463      	add	r3, ip
 8002f6a:	409e      	lsls	r6, r3
 8002f6c:	4337      	orrs	r7, r6
 8002f6e:	003a      	movs	r2, r7
 8002f70:	1e53      	subs	r3, r2, #1
 8002f72:	419a      	sbcs	r2, r3
 8002f74:	430a      	orrs	r2, r1
 8002f76:	2100      	movs	r1, #0
 8002f78:	e7ce      	b.n	8002f18 <__aeabi_d2f+0x64>
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <__aeabi_d2f+0x108>)
 8002f7c:	0038      	movs	r0, r7
 8002f7e:	4694      	mov	ip, r2
 8002f80:	4463      	add	r3, ip
 8002f82:	4098      	lsls	r0, r3
 8002f84:	003a      	movs	r2, r7
 8002f86:	1e41      	subs	r1, r0, #1
 8002f88:	4188      	sbcs	r0, r1
 8002f8a:	409e      	lsls	r6, r3
 8002f8c:	40ea      	lsrs	r2, r5
 8002f8e:	4330      	orrs	r0, r6
 8002f90:	4302      	orrs	r2, r0
 8002f92:	2100      	movs	r1, #0
 8002f94:	0753      	lsls	r3, r2, #29
 8002f96:	d1c1      	bne.n	8002f1c <__aeabi_d2f+0x68>
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	04c9      	lsls	r1, r1, #19
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	420a      	tst	r2, r1
 8002fa4:	d1c6      	bne.n	8002f34 <__aeabi_d2f+0x80>
 8002fa6:	e7a3      	b.n	8002ef0 <__aeabi_d2f+0x3c>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e7a0      	b.n	8002eee <__aeabi_d2f+0x3a>
 8002fac:	000b      	movs	r3, r1
 8002fae:	e79f      	b.n	8002ef0 <__aeabi_d2f+0x3c>
 8002fb0:	000007fe 	.word	0x000007fe
 8002fb4:	fffffc80 	.word	0xfffffc80
 8002fb8:	fffffca2 	.word	0xfffffca2
 8002fbc:	fffffc82 	.word	0xfffffc82

08002fc0 <__clzsi2>:
 8002fc0:	211c      	movs	r1, #28
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d301      	bcc.n	8002fce <__clzsi2+0xe>
 8002fca:	0c00      	lsrs	r0, r0, #16
 8002fcc:	3910      	subs	r1, #16
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	4298      	cmp	r0, r3
 8002fd2:	d301      	bcc.n	8002fd8 <__clzsi2+0x18>
 8002fd4:	0a00      	lsrs	r0, r0, #8
 8002fd6:	3908      	subs	r1, #8
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	4298      	cmp	r0, r3
 8002fdc:	d301      	bcc.n	8002fe2 <__clzsi2+0x22>
 8002fde:	0900      	lsrs	r0, r0, #4
 8002fe0:	3904      	subs	r1, #4
 8002fe2:	a202      	add	r2, pc, #8	; (adr r2, 8002fec <__clzsi2+0x2c>)
 8002fe4:	5c10      	ldrb	r0, [r2, r0]
 8002fe6:	1840      	adds	r0, r0, r1
 8002fe8:	4770      	bx	lr
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	02020304 	.word	0x02020304
 8002ff0:	01010101 	.word	0x01010101
	...

08002ffc <__clzdi2>:
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d103      	bne.n	800300a <__clzdi2+0xe>
 8003002:	f7ff ffdd 	bl	8002fc0 <__clzsi2>
 8003006:	3020      	adds	r0, #32
 8003008:	e002      	b.n	8003010 <__clzdi2+0x14>
 800300a:	0008      	movs	r0, r1
 800300c:	f7ff ffd8 	bl	8002fc0 <__clzsi2>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			; (mov r8, r8)

08003014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	0018      	movs	r0, r3
 800301e:	230c      	movs	r3, #12
 8003020:	001a      	movs	r2, r3
 8003022:	2100      	movs	r1, #0
 8003024:	f007 fc1f 	bl	800a866 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <MX_ADC1_Init+0xc8>)
 800302c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800302e:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	05d2      	lsls	r2, r2, #23
 8003034:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003038:	2218      	movs	r2, #24
 800303a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800304a:	2204      	movs	r2, #4
 800304c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003050:	2200      	movs	r2, #0
 8003052:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003056:	2200      	movs	r2, #0
 8003058:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800305c:	2201      	movs	r2, #1
 800305e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003062:	2201      	movs	r2, #1
 8003064:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003068:	2200      	movs	r2, #0
 800306a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800306e:	2200      	movs	r2, #0
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003074:	222c      	movs	r2, #44	; 0x2c
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003082:	2200      	movs	r2, #0
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003088:	2200      	movs	r2, #0
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800308e:	223c      	movs	r2, #60	; 0x3c
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <MX_ADC1_Init+0xc4>)
 8003096:	2200      	movs	r2, #0
 8003098:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800309a:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <MX_ADC1_Init+0xc4>)
 800309c:	0018      	movs	r0, r3
 800309e:	f002 f95f 	bl	8005360 <HAL_ADC_Init>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d001      	beq.n	80030aa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80030a6:	f000 fecd 	bl	8003e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030bc:	1d3a      	adds	r2, r7, #4
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <MX_ADC1_Init+0xc4>)
 80030c0:	0011      	movs	r1, r2
 80030c2:	0018      	movs	r0, r3
 80030c4:	f002 fbe2 	bl	800588c <HAL_ADC_ConfigChannel>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80030cc:	f000 feba 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000228 	.word	0x20000228
 80030dc:	40012400 	.word	0x40012400

080030e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b08b      	sub	sp, #44	; 0x2c
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	2414      	movs	r4, #20
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	0018      	movs	r0, r3
 80030ee:	2314      	movs	r3, #20
 80030f0:	001a      	movs	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	f007 fbb7 	bl	800a866 <memset>
  if(adcHandle->Instance==ADC1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_ADC_MspInit+0x80>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d129      	bne.n	8003156 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_ADC_MspInit+0x84>)
 8003104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_ADC_MspInit+0x84>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0349      	lsls	r1, r1, #13
 800310c:	430a      	orrs	r2, r1
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_ADC_MspInit+0x84>)
 8003112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	035b      	lsls	r3, r3, #13
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_ADC_MspInit+0x84>)
 8003120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_ADC_MspInit+0x84>)
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_ADC_MspInit+0x84>)
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313c:	193b      	adds	r3, r7, r4
 800313e:	2203      	movs	r2, #3
 8003140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	193b      	adds	r3, r7, r4
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8003148:	193a      	adds	r2, r7, r4
 800314a:	23a0      	movs	r3, #160	; 0xa0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	0011      	movs	r1, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f002 fed7 	bl	8005f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b00b      	add	sp, #44	; 0x2c
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40012400 	.word	0x40012400
 8003164:	40021000 	.word	0x40021000

08003168 <delay>:
#include "ds18b20.h"

/****************************delay********************************************/

void delay (uint32_t us)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(TIMER,0);
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <delay+0x28>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(TIMER))<us);
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <delay+0x28>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d8f9      	bhi.n	800317a <delay+0x12>
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000794 	.word	0x20000794

08003194 <Set_Pin_Output>:

/*****************************set******************************************/
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	000a      	movs	r2, r1
 800319e:	1cbb      	adds	r3, r7, #2
 80031a0:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a2:	240c      	movs	r4, #12
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	0018      	movs	r0, r3
 80031a8:	2314      	movs	r3, #20
 80031aa:	001a      	movs	r2, r3
 80031ac:	2100      	movs	r1, #0
 80031ae:	f007 fb5a 	bl	800a866 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80031b2:	1cbb      	adds	r3, r7, #2
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2201      	movs	r2, #1
 80031be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80031c6:	193a      	adds	r2, r7, r4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f002 fe99 	bl	8005f04 <HAL_GPIO_Init>
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b009      	add	sp, #36	; 0x24
 80031d8:	bd90      	pop	{r4, r7, pc}

080031da <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031da:	b590      	push	{r4, r7, lr}
 80031dc:	b089      	sub	sp, #36	; 0x24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	000a      	movs	r2, r1
 80031e4:	1cbb      	adds	r3, r7, #2
 80031e6:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	240c      	movs	r4, #12
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	0018      	movs	r0, r3
 80031ee:	2314      	movs	r3, #20
 80031f0:	001a      	movs	r2, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	f007 fb37 	bl	800a866 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 80031f8:	1cbb      	adds	r3, r7, #2
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003200:	193b      	adds	r3, r7, r4
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003206:	193b      	adds	r3, r7, r4
 8003208:	2201      	movs	r2, #1
 800320a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800320c:	193a      	adds	r2, r7, r4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f002 fe76 	bl	8005f04 <HAL_GPIO_Init>
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b009      	add	sp, #36	; 0x24
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <DS18B20_Start>:

/****************************INIT sensor**************************************/

uint8_t DS18B20_Start (void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800322c:	23a0      	movs	r3, #160	; 0xa0
 800322e:	05db      	lsls	r3, r3, #23
 8003230:	2102      	movs	r1, #2
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ffae 	bl	8003194 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8003238:	23a0      	movs	r3, #160	; 0xa0
 800323a:	05db      	lsls	r3, r3, #23
 800323c:	2200      	movs	r2, #0
 800323e:	2102      	movs	r1, #2
 8003240:	0018      	movs	r0, r3
 8003242:	f002 ffe0 	bl	8006206 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8003246:	23f0      	movs	r3, #240	; 0xf0
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff ff8c 	bl	8003168 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8003250:	23a0      	movs	r3, #160	; 0xa0
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	2102      	movs	r1, #2
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff ffbf 	bl	80031da <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 800325c:	2050      	movs	r0, #80	; 0x50
 800325e:	f7ff ff83 	bl	8003168 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	2102      	movs	r1, #2
 8003268:	0018      	movs	r0, r3
 800326a:	f002 ffaf 	bl	80061cc <HAL_GPIO_ReadPin>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d103      	bne.n	800327a <DS18B20_Start+0x5a>
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e002      	b.n	8003280 <DS18B20_Start+0x60>
	else Response = -1;
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	22ff      	movs	r2, #255	; 0xff
 800327e:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 8003280:	23c8      	movs	r3, #200	; 0xc8
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff ff6f 	bl	8003168 <delay>

	return Response;
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	781b      	ldrb	r3, [r3, #0]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}

08003296 <DS18B20_Write>:

/****************************  WRITE   ************************************/

void DS18B20_Write (uint8_t data)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	0002      	movs	r2, r0
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	2102      	movs	r1, #2
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ff73 	bl	8003194 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e03a      	b.n	800332a <DS18B20_Write+0x94>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	411a      	asrs	r2, r3
 80032bc:	0013      	movs	r3, r2
 80032be:	2201      	movs	r2, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d019      	beq.n	80032f8 <DS18B20_Write+0x62>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80032c4:	23a0      	movs	r3, #160	; 0xa0
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	2102      	movs	r1, #2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff ff62 	bl	8003194 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80032d0:	23a0      	movs	r3, #160	; 0xa0
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	2200      	movs	r2, #0
 80032d6:	2102      	movs	r1, #2
 80032d8:	0018      	movs	r0, r3
 80032da:	f002 ff94 	bl	8006206 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80032de:	2001      	movs	r0, #1
 80032e0:	f7ff ff42 	bl	8003168 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80032e4:	23a0      	movs	r3, #160	; 0xa0
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	2102      	movs	r1, #2
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ff75 	bl	80031da <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80032f0:	2032      	movs	r0, #50	; 0x32
 80032f2:	f7ff ff39 	bl	8003168 <delay>
 80032f6:	e015      	b.n	8003324 <DS18B20_Write+0x8e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80032f8:	23a0      	movs	r3, #160	; 0xa0
 80032fa:	05db      	lsls	r3, r3, #23
 80032fc:	2102      	movs	r1, #2
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff48 	bl	8003194 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003304:	23a0      	movs	r3, #160	; 0xa0
 8003306:	05db      	lsls	r3, r3, #23
 8003308:	2200      	movs	r2, #0
 800330a:	2102      	movs	r1, #2
 800330c:	0018      	movs	r0, r3
 800330e:	f002 ff7a 	bl	8006206 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8003312:	2032      	movs	r0, #50	; 0x32
 8003314:	f7ff ff28 	bl	8003168 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	2102      	movs	r1, #2
 800331e:	0018      	movs	r0, r3
 8003320:	f7ff ff5b 	bl	80031da <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b07      	cmp	r3, #7
 800332e:	ddc1      	ble.n	80032b4 <DS18B20_Write+0x1e>
		}
	}
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b004      	add	sp, #16
 8003338:	bd80      	pop	{r7, pc}

0800333a <DS18B20_Read>:

/****************************  READ   *************************************/

uint8_t DS18B20_Read (void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003346:	23a0      	movs	r3, #160	; 0xa0
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	2102      	movs	r1, #2
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff ff44 	bl	80031da <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	e02f      	b.n	80033b8 <DS18B20_Read+0x7e>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	05db      	lsls	r3, r3, #23
 800335c:	2102      	movs	r1, #2
 800335e:	0018      	movs	r0, r3
 8003360:	f7ff ff18 	bl	8003194 <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 8003364:	23a0      	movs	r3, #160	; 0xa0
 8003366:	05db      	lsls	r3, r3, #23
 8003368:	2200      	movs	r2, #0
 800336a:	2102      	movs	r1, #2
 800336c:	0018      	movs	r0, r3
 800336e:	f002 ff4a 	bl	8006206 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 8003372:	2002      	movs	r0, #2
 8003374:	f7ff fef8 	bl	8003168 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003378:	23a0      	movs	r3, #160	; 0xa0
 800337a:	05db      	lsls	r3, r3, #23
 800337c:	2102      	movs	r1, #2
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff ff2b 	bl	80031da <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	2102      	movs	r1, #2
 800338a:	0018      	movs	r0, r3
 800338c:	f002 ff1e 	bl	80061cc <HAL_GPIO_ReadPin>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d00b      	beq.n	80033ac <DS18B20_Read+0x72>
		{
			value |= 1<<i;  // read = 1
 8003394:	2201      	movs	r2, #1
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	409a      	lsls	r2, r3
 800339a:	0013      	movs	r3, r2
 800339c:	b25a      	sxtb	r2, r3
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b25a      	sxtb	r2, r3
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	701a      	strb	r2, [r3, #0]
		}
		delay (60);  // wait for 60 us
 80033ac:	203c      	movs	r0, #60	; 0x3c
 80033ae:	f7ff fedb 	bl	8003168 <delay>
	for (int i=0;i<8;i++)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	ddcc      	ble.n	8003358 <DS18B20_Read+0x1e>
	}
	return value;
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}

080033ca <DS18B20_Get_Temperature>:

/***************************GET TEMPERATURE******************************/

float DS18B20_Get_Temperature(void)
{
 80033ca:	b590      	push	{r4, r7, lr}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
	uint8_t Presence = 0;
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
	uint8_t Temp_byte1, Temp_byte2;
	uint16_t TEMP;

	Presence = DS18B20_Start ();
 80033d6:	1dfc      	adds	r4, r7, #7
 80033d8:	f7ff ff22 	bl	8003220 <DS18B20_Start>
 80033dc:	0003      	movs	r3, r0
 80033de:	7023      	strb	r3, [r4, #0]
	HAL_Delay (1);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f001 fe63 	bl	80050ac <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 80033e6:	20cc      	movs	r0, #204	; 0xcc
 80033e8:	f7ff ff55 	bl	8003296 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 80033ec:	2044      	movs	r0, #68	; 0x44
 80033ee:	f7ff ff52 	bl	8003296 <DS18B20_Write>
	HAL_Delay (1);
 80033f2:	2001      	movs	r0, #1
 80033f4:	f001 fe5a 	bl	80050ac <HAL_Delay>

	Presence = DS18B20_Start ();
 80033f8:	1dfc      	adds	r4, r7, #7
 80033fa:	f7ff ff11 	bl	8003220 <DS18B20_Start>
 80033fe:	0003      	movs	r3, r0
 8003400:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f001 fe52 	bl	80050ac <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8003408:	20cc      	movs	r0, #204	; 0xcc
 800340a:	f7ff ff44 	bl	8003296 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 800340e:	20be      	movs	r0, #190	; 0xbe
 8003410:	f7ff ff41 	bl	8003296 <DS18B20_Write>

	if (Presence == -1){
		printf("DS18b20 error \n");
		return -888;
	}
	Temp_byte1 = DS18B20_Read();
 8003414:	1dbc      	adds	r4, r7, #6
 8003416:	f7ff ff90 	bl	800333a <DS18B20_Read>
 800341a:	0003      	movs	r3, r0
 800341c:	7023      	strb	r3, [r4, #0]
	Temp_byte2 = DS18B20_Read();
 800341e:	1d7c      	adds	r4, r7, #5
 8003420:	f7ff ff8b 	bl	800333a <DS18B20_Read>
 8003424:	0003      	movs	r3, r0
 8003426:	7023      	strb	r3, [r4, #0]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 8003428:	1d7b      	adds	r3, r7, #5
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	b21a      	sxth	r2, r3
 8003430:	1dbb      	adds	r3, r7, #6
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b21b      	sxth	r3, r3
 8003436:	4313      	orrs	r3, r2
 8003438:	b21a      	sxth	r2, r3
 800343a:	1cbb      	adds	r3, r7, #2
 800343c:	801a      	strh	r2, [r3, #0]
	return (float)TEMP/16;
 800343e:	1cbb      	adds	r3, r7, #2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7fd fe5e 	bl	8001104 <__aeabi_ui2f>
 8003448:	1c03      	adds	r3, r0, #0
 800344a:	2183      	movs	r1, #131	; 0x83
 800344c:	05c9      	lsls	r1, r1, #23
 800344e:	1c18      	adds	r0, r3, #0
 8003450:	f7fd faee 	bl	8000a30 <__aeabi_fdiv>
 8003454:	1c03      	adds	r3, r0, #0
}
 8003456:	1c18      	adds	r0, r3, #0
 8003458:	46bd      	mov	sp, r7
 800345a:	b003      	add	sp, #12
 800345c:	bd90      	pop	{r4, r7, pc}
	...

08003460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003466:	2414      	movs	r4, #20
 8003468:	193b      	adds	r3, r7, r4
 800346a:	0018      	movs	r0, r3
 800346c:	2314      	movs	r3, #20
 800346e:	001a      	movs	r2, r3
 8003470:	2100      	movs	r1, #0
 8003472:	f007 f9f8 	bl	800a866 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <MX_GPIO_Init+0x13c>)
 8003478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347a:	4b48      	ldr	r3, [pc, #288]	; (800359c <MX_GPIO_Init+0x13c>)
 800347c:	2104      	movs	r1, #4
 800347e:	430a      	orrs	r2, r1
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <MX_GPIO_Init+0x13c>)
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	2204      	movs	r2, #4
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <MX_GPIO_Init+0x13c>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	4b42      	ldr	r3, [pc, #264]	; (800359c <MX_GPIO_Init+0x13c>)
 8003494:	2120      	movs	r1, #32
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <MX_GPIO_Init+0x13c>)
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	2220      	movs	r2, #32
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <MX_GPIO_Init+0x13c>)
 80034a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <MX_GPIO_Init+0x13c>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <MX_GPIO_Init+0x13c>)
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <MX_GPIO_Init+0x13c>)
 80034c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <MX_GPIO_Init+0x13c>)
 80034c4:	2102      	movs	r1, #2
 80034c6:	430a      	orrs	r2, r1
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <MX_GPIO_Init+0x13c>)
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_GPIO_Port, TEMP_Pin, GPIO_PIN_RESET);
 80034d6:	23a0      	movs	r3, #160	; 0xa0
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	2200      	movs	r2, #0
 80034dc:	2102      	movs	r1, #2
 80034de:	0018      	movs	r0, r3
 80034e0:	f002 fe91 	bl	8006206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80034e4:	492e      	ldr	r1, [pc, #184]	; (80035a0 <MX_GPIO_Init+0x140>)
 80034e6:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <MX_GPIO_Init+0x144>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	0018      	movs	r0, r3
 80034ec:	f002 fe8b 	bl	8006206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_Pin;
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	2202      	movs	r2, #2
 80034f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	2201      	movs	r2, #1
 80034fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8003508:	193a      	adds	r2, r7, r4
 800350a:	23a0      	movs	r3, #160	; 0xa0
 800350c:	05db      	lsls	r3, r3, #23
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f002 fcf7 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLOW_Pin;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2240      	movs	r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800351c:	193b      	adds	r3, r7, r4
 800351e:	2288      	movs	r2, #136	; 0x88
 8003520:	0352      	lsls	r2, r2, #13
 8003522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	193b      	adds	r3, r7, r4
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FLOW_GPIO_Port, &GPIO_InitStruct);
 800352a:	193a      	adds	r2, r7, r4
 800352c:	23a0      	movs	r3, #160	; 0xa0
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f002 fce6 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003538:	0021      	movs	r1, r4
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2284      	movs	r2, #132	; 0x84
 8003546:	0392      	lsls	r2, r2, #14
 8003548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003550:	000c      	movs	r4, r1
 8003552:	187b      	adds	r3, r7, r1
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <MX_GPIO_Init+0x144>)
 8003556:	0019      	movs	r1, r3
 8003558:	0010      	movs	r0, r2
 800355a:	f002 fcd3 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 800355e:	0021      	movs	r1, r4
 8003560:	187b      	adds	r3, r7, r1
 8003562:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <MX_GPIO_Init+0x140>)
 8003564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2201      	movs	r2, #1
 800356a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003578:	187b      	adds	r3, r7, r1
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <MX_GPIO_Init+0x144>)
 800357c:	0019      	movs	r1, r3
 800357e:	0010      	movs	r0, r2
 8003580:	f002 fcc0 	bl	8005f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	2007      	movs	r0, #7
 800358a:	f002 fc89 	bl	8005ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800358e:	2007      	movs	r0, #7
 8003590:	f002 fc9b 	bl	8005eca <HAL_NVIC_EnableIRQ>

}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b00b      	add	sp, #44	; 0x2c
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	00001038 	.word	0x00001038
 80035a4:	50000400 	.word	0x50000400

080035a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <MX_I2C1_Init+0x74>)
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <MX_I2C1_Init+0x78>)
 80035b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <MX_I2C1_Init+0x74>)
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <MX_I2C1_Init+0x7c>)
 80035b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <MX_I2C1_Init+0x74>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <MX_I2C1_Init+0x74>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <MX_I2C1_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <MX_I2C1_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <MX_I2C1_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_I2C1_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <MX_I2C1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_I2C1_Init+0x74>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f002 fe5f 	bl	80062a8 <HAL_I2C_Init>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035ee:	f000 fc29 	bl	8003e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <MX_I2C1_Init+0x74>)
 80035f4:	2100      	movs	r1, #0
 80035f6:	0018      	movs	r0, r3
 80035f8:	f003 fa94 	bl	8006b24 <HAL_I2CEx_ConfigAnalogFilter>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003600:	f000 fc20 	bl	8003e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <MX_I2C1_Init+0x74>)
 8003606:	2100      	movs	r1, #0
 8003608:	0018      	movs	r0, r3
 800360a:	f003 fad7 	bl	8006bbc <HAL_I2CEx_ConfigDigitalFilter>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003612:	f000 fc17 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	2000028c 	.word	0x2000028c
 8003620:	40005400 	.word	0x40005400
 8003624:	00602173 	.word	0x00602173

08003628 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b097      	sub	sp, #92	; 0x5c
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	2344      	movs	r3, #68	; 0x44
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	0018      	movs	r0, r3
 8003636:	2314      	movs	r3, #20
 8003638:	001a      	movs	r2, r3
 800363a:	2100      	movs	r1, #0
 800363c:	f007 f913 	bl	800a866 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003640:	2410      	movs	r4, #16
 8003642:	193b      	adds	r3, r7, r4
 8003644:	0018      	movs	r0, r3
 8003646:	2334      	movs	r3, #52	; 0x34
 8003648:	001a      	movs	r2, r3
 800364a:	2100      	movs	r1, #0
 800364c:	f007 f90b 	bl	800a866 <memset>
  if(i2cHandle->Instance==I2C1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_I2C_MspInit+0xbc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d13f      	bne.n	80036da <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2220      	movs	r2, #32
 800365e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003660:	193b      	adds	r3, r7, r4
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003666:	193b      	adds	r3, r7, r4
 8003668:	0018      	movs	r0, r3
 800366a:	f004 f803 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003672:	f000 fbe7 	bl	8003e44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800368e:	2144      	movs	r1, #68	; 0x44
 8003690:	187b      	adds	r3, r7, r1
 8003692:	22c0      	movs	r2, #192	; 0xc0
 8003694:	00d2      	lsls	r2, r2, #3
 8003696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2212      	movs	r2, #18
 800369c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	2206      	movs	r2, #6
 80036ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b0:	187a      	adds	r2, r7, r1
 80036b2:	23a0      	movs	r3, #160	; 0xa0
 80036b4:	05db      	lsls	r3, r3, #23
 80036b6:	0011      	movs	r1, r2
 80036b8:	0018      	movs	r0, r3
 80036ba:	f002 fc23 	bl	8005f04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 80036c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	0389      	lsls	r1, r1, #14
 80036c8:	430a      	orrs	r2, r1
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_I2C_MspInit+0xc0>)
 80036ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	039b      	lsls	r3, r3, #14
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b017      	add	sp, #92	; 0x5c
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	40005400 	.word	0x40005400
 80036e8:	40021000 	.word	0x40021000

080036ec <updateMenu>:
void setAlarm(uint8_t);
void getValueADC (uint8_t max_state);
void ssd1306_DrawLedStatus(uint8_t);

void updateMenu()
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
	ssd1306_DrawMenu(sel);
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <updateMenu+0x14>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f001 f83f 	bl	8004778 <ssd1306_DrawMenu>
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200002f3 	.word	0x200002f3

08003704 <execCommandSelect>:

void execCommandSelect()
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
	if (Menu_Stage_1 == 1 && Menu_Stage_2 == 1)
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <execCommandSelect+0x6c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d12b      	bne.n	8003768 <execCommandSelect+0x64>
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <execCommandSelect+0x70>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d127      	bne.n	8003768 <execCommandSelect+0x64>
	switch(sel)
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <execCommandSelect+0x74>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d011      	beq.n	8003744 <execCommandSelect+0x40>
 8003720:	dc22      	bgt.n	8003768 <execCommandSelect+0x64>
 8003722:	2b02      	cmp	r3, #2
 8003724:	d00b      	beq.n	800373e <execCommandSelect+0x3a>
 8003726:	dc1f      	bgt.n	8003768 <execCommandSelect+0x64>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <execCommandSelect+0x2e>
 800372c:	2b01      	cmp	r3, #1
 800372e:	d003      	beq.n	8003738 <execCommandSelect+0x34>
				ssd1306_UpdateScreen();
				ssd1306_Fill(Black);
			break;

		}
}
 8003730:	e01a      	b.n	8003768 <execCommandSelect+0x64>
				setTimeInterval();
 8003732:	f000 f827 	bl	8003784 <setTimeInterval>
			break;
 8003736:	e017      	b.n	8003768 <execCommandSelect+0x64>
				setLed();
 8003738:	f000 f88c 	bl	8003854 <setLed>
			break;
 800373c:	e014      	b.n	8003768 <execCommandSelect+0x64>
				setVolume();
 800373e:	f000 f857 	bl	80037f0 <setVolume>
			break;
 8003742:	e011      	b.n	8003768 <execCommandSelect+0x64>
				Menu_Stage_1 = 0;
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <execCommandSelect+0x6c>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
				Menu_Stage_2 = 0;
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <execCommandSelect+0x70>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
				menu = 0;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <execCommandSelect+0x78>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
				dash = 0;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <execCommandSelect+0x7c>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
				ssd1306_UpdateScreen();
 800375c:	f000 fd2c 	bl	80041b8 <ssd1306_UpdateScreen>
				ssd1306_Fill(Black);
 8003760:	2000      	movs	r0, #0
 8003762:	f000 fd05 	bl	8004170 <ssd1306_Fill>
			break;
 8003766:	46c0      	nop			; (mov r8, r8)
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	200002e0 	.word	0x200002e0
 8003774:	200002e1 	.word	0x200002e1
 8003778:	200002f3 	.word	0x200002f3
 800377c:	200002f2 	.word	0x200002f2
 8003780:	200002ec 	.word	0x200002ec

08003784 <setTimeInterval>:

void setTimeInterval (){
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8003788:	2000      	movs	r0, #0
 800378a:	f000 fcf1 	bl	8004170 <ssd1306_Fill>

			while (1){
				getValueADC(12);
 800378e:	200c      	movs	r0, #12
 8003790:	f000 f880 	bl	8003894 <getValueADC>
				hour = sel;
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <setTimeInterval+0x54>)
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <setTimeInterval+0x58>)
 800379a:	701a      	strb	r2, [r3, #0]
				time = hour;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <setTimeInterval+0x58>)
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <setTimeInterval+0x5c>)
 80037a2:	701a      	strb	r2, [r3, #0]
				setAlarm(hour);
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <setTimeInterval+0x58>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 f8a3 	bl	80038f4 <setAlarm>
				sprintf(string_buff, "%d", hour);
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <setTimeInterval+0x58>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	001a      	movs	r2, r3
 80037b4:	490b      	ldr	r1, [pc, #44]	; (80037e4 <setTimeInterval+0x60>)
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <setTimeInterval+0x64>)
 80037b8:	0018      	movs	r0, r3
 80037ba:	f006 ffd5 	bl	800a768 <siprintf>
				ssd1306_DrawIntervalStatus(string_buff);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <setTimeInterval+0x64>)
 80037c0:	0018      	movs	r0, r3
 80037c2:	f001 f863 	bl	800488c <ssd1306_DrawIntervalStatus>
				if(Menu_Stage_2 == 0)
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <setTimeInterval+0x68>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d000      	beq.n	80037d0 <setTimeInterval+0x4c>
				getValueADC(12);
 80037ce:	e7de      	b.n	800378e <setTimeInterval+0xa>
					break;
 80037d0:	46c0      	nop			; (mov r8, r8)
			}
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	200002f3 	.word	0x200002f3
 80037dc:	200002f0 	.word	0x200002f0
 80037e0:	200002f4 	.word	0x200002f4
 80037e4:	0800cb78 	.word	0x0800cb78
 80037e8:	200002fc 	.word	0x200002fc
 80037ec:	200002e1 	.word	0x200002e1

080037f0 <setVolume>:

void setVolume(){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
		ssd1306_Fill(Black);
 80037f4:	2000      	movs	r0, #0
 80037f6:	f000 fcbb 	bl	8004170 <ssd1306_Fill>

		while (1){
			getValueADC(5);
 80037fa:	2005      	movs	r0, #5
 80037fc:	f000 f84a 	bl	8003894 <getValueADC>
			waterVolume = sel;
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <setVolume+0x50>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	0018      	movs	r0, r3
 8003806:	f7fd fc7d 	bl	8001104 <__aeabi_ui2f>
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <setVolume+0x54>)
 800380e:	601a      	str	r2, [r3, #0]
			sprintf(string_buff, "%.f", waterVolume);
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <setVolume+0x54>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1c18      	adds	r0, r3, #0
 8003816:	f7ff fb05 	bl	8002e24 <__aeabi_f2d>
 800381a:	0002      	movs	r2, r0
 800381c:	000b      	movs	r3, r1
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <setVolume+0x58>)
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <setVolume+0x5c>)
 8003822:	f006 ffa1 	bl	800a768 <siprintf>
			ssd1306_DrawVolumeStatus(string_buff);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <setVolume+0x5c>)
 8003828:	0018      	movs	r0, r3
 800382a:	f001 f809 	bl	8004840 <ssd1306_DrawVolumeStatus>
			if(Menu_Stage_2 == 0)
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <setVolume+0x60>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <setVolume+0x48>
			getValueADC(5);
 8003836:	e7e0      	b.n	80037fa <setVolume+0xa>
				break;
 8003838:	46c0      	nop			; (mov r8, r8)
		}

}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200002f3 	.word	0x200002f3
 8003844:	20000004 	.word	0x20000004
 8003848:	0800cb7c 	.word	0x0800cb7c
 800384c:	200002fc 	.word	0x200002fc
 8003850:	200002e1 	.word	0x200002e1

08003854 <setLed>:
void setLed(){
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8003858:	2000      	movs	r0, #0
 800385a:	f000 fc89 	bl	8004170 <ssd1306_Fill>
			while (1){
				getValueADC(1);
 800385e:	2001      	movs	r0, #1
 8003860:	f000 f818 	bl	8003894 <getValueADC>
				led = sel;
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <setLed+0x34>)
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <setLed+0x38>)
 800386a:	701a      	strb	r2, [r3, #0]
				ssd1306_DrawLedStatus(led);
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <setLed+0x38>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 ffc5 	bl	8004800 <ssd1306_DrawLedStatus>
				if(Menu_Stage_2 == 0)
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <setLed+0x3c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d000      	beq.n	8003880 <setLed+0x2c>
				getValueADC(1);
 800387e:	e7ee      	b.n	800385e <setLed+0xa>
					break;
 8003880:	46c0      	nop			; (mov r8, r8)
			}
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200002f3 	.word	0x200002f3
 800388c:	20000000 	.word	0x20000000
 8003890:	200002e1 	.word	0x200002e1

08003894 <getValueADC>:

void getValueADC (uint8_t max_state){
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	0002      	movs	r2, r0
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	701a      	strb	r2, [r3, #0]
	uint8_t prescalar = 63 / max_state;
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	0019      	movs	r1, r3
 80038a6:	203f      	movs	r0, #63	; 0x3f
 80038a8:	f7fc fcd2 	bl	8000250 <__divsi3>
 80038ac:	0003      	movs	r3, r0
 80038ae:	001a      	movs	r2, r3
 80038b0:	240f      	movs	r4, #15
 80038b2:	193b      	adds	r3, r7, r4
 80038b4:	701a      	strb	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1,1000);
 80038b6:	23fa      	movs	r3, #250	; 0xfa
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <getValueADC+0x58>)
 80038bc:	0011      	movs	r1, r2
 80038be:	0018      	movs	r0, r3
 80038c0:	f001 ff44 	bl	800574c <HAL_ADC_PollForConversion>
	sel = (uint8_t)HAL_ADC_GetValue(&hadc1)/prescalar;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <getValueADC+0x58>)
 80038c6:	0018      	movs	r0, r3
 80038c8:	f001 ffd4 	bl	8005874 <HAL_ADC_GetValue>
 80038cc:	0003      	movs	r3, r0
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	193b      	adds	r3, r7, r4
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	0019      	movs	r1, r3
 80038d6:	0010      	movs	r0, r2
 80038d8:	f7fc fc30 	bl	800013c <__udivsi3>
 80038dc:	0003      	movs	r3, r0
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <getValueADC+0x5c>)
 80038e2:	701a      	strb	r2, [r3, #0]
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b005      	add	sp, #20
 80038ea:	bd90      	pop	{r4, r7, pc}
 80038ec:	20000228 	.word	0x20000228
 80038f0:	200002f3 	.word	0x200002f3

080038f4 <setAlarm>:

void setAlarm(uint8_t x){
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b093      	sub	sp, #76	; 0x4c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	0002      	movs	r2, r0
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	701a      	strb	r2, [r3, #0]

	RTC_TimeTypeDef sTime = {0};
 8003900:	2434      	movs	r4, #52	; 0x34
 8003902:	193b      	adds	r3, r7, r4
 8003904:	0018      	movs	r0, r3
 8003906:	2314      	movs	r3, #20
 8003908:	001a      	movs	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	f006 ffab 	bl	800a866 <memset>
	RTC_AlarmTypeDef sAlarm = {0};
 8003910:	230c      	movs	r3, #12
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	0018      	movs	r0, r3
 8003916:	2328      	movs	r3, #40	; 0x28
 8003918:	001a      	movs	r2, r3
 800391a:	2100      	movs	r1, #0
 800391c:	f006 ffa3 	bl	800a866 <memset>

	sTime.Hours = 0x0;
 8003920:	193b      	adds	r3, r7, r4
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x0;
 8003926:	193b      	adds	r3, r7, r4
 8003928:	2200      	movs	r2, #0
 800392a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 800392c:	193b      	adds	r3, r7, r4
 800392e:	2200      	movs	r2, #0
 8003930:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x0;
 8003932:	193b      	adds	r3, r7, r4
 8003934:	2200      	movs	r2, #0
 8003936:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003938:	193b      	adds	r3, r7, r4
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003944:	1939      	adds	r1, r7, r4
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <setAlarm+0xd0>)
 8003948:	2201      	movs	r2, #1
 800394a:	0018      	movs	r0, r3
 800394c:	f004 f8ec 	bl	8007b28 <HAL_RTC_SetTime>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d001      	beq.n	8003958 <setAlarm+0x64>
	  {
	    Error_Handler();
 8003954:	f000 fa76 	bl	8003e44 <Error_Handler>
	  }


	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x0;
 8003958:	210c      	movs	r1, #12
 800395a:	187b      	adds	r3, r7, r1
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = x;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	1dfa      	adds	r2, r7, #7
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 8003968:	187b      	adds	r3, r7, r1
 800396a:	2200      	movs	r2, #0
 800396c:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800396e:	0008      	movs	r0, r1
 8003970:	183b      	adds	r3, r7, r0
 8003972:	2200      	movs	r2, #0
 8003974:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003976:	183b      	adds	r3, r7, r0
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800397c:	183b      	adds	r3, r7, r0
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003982:	183b      	adds	r3, r7, r0
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003988:	183b      	adds	r3, r7, r0
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800398e:	183b      	adds	r3, r7, r0
 8003990:	2200      	movs	r2, #0
 8003992:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003994:	183b      	adds	r3, r7, r0
 8003996:	2220      	movs	r2, #32
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]
	  sAlarm.Alarm = RTC_ALARM_A;
 800399c:	0001      	movs	r1, r0
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	0052      	lsls	r2, r2, #1
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80039a6:	1879      	adds	r1, r7, r1
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <setAlarm+0xd0>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	0018      	movs	r0, r3
 80039ae:	f004 f9f5 	bl	8007d9c <HAL_RTC_SetAlarm_IT>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d001      	beq.n	80039ba <setAlarm+0xc6>
	  {
	    Error_Handler();
 80039b6:	f000 fa45 	bl	8003e44 <Error_Handler>
	  }

}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b013      	add	sp, #76	; 0x4c
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000308 	.word	0x20000308

080039c8 <BuzzerPlayNote>:

void BuzzerPlayNote(int prescalerfornote, int NoteDurationMs)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <BuzzerPlayNote+0x50>)
 80039d4:	2100      	movs	r1, #0
 80039d6:	0018      	movs	r0, r3
 80039d8:	f004 fd40 	bl	800845c <HAL_TIM_PWM_Start>

		for(int i = 0; i<NoteDurationMs ; i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e009      	b.n	80039f6 <BuzzerPlayNote+0x2e>
		{
			//prescaler = 64000000 / (255 * prescalerfornote * 3);

			TIM2->PSC =  prescalerfornote; //change prescaler for have the frequency of our note
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(1);
 80039ea:	2001      	movs	r0, #1
 80039ec:	f001 fb5e 	bl	80050ac <HAL_Delay>
		for(int i = 0; i<NoteDurationMs ; i++)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	dbf1      	blt.n	80039e2 <BuzzerPlayNote+0x1a>

		}
		TIM2->PSC=0;
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <BuzzerPlayNote+0x50>)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f004 fe10 	bl	8008630 <HAL_TIM_PWM_Stop>

}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000748 	.word	0x20000748

08003a1c <playBuzzer>:

void playBuzzer ()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

	for(int i = 0 ; i < melodySize; i++ ){
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	e011      	b.n	8003a4c <playBuzzer+0x30>
			BuzzerPlayNote(marioMelody[i], marioDuration[i] * 7 );
 8003a28:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <playBuzzer+0x44>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	58d3      	ldr	r3, [r2, r3]
 8003a30:	0018      	movs	r0, r3
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <playBuzzer+0x48>)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	58d2      	ldr	r2, [r2, r3]
 8003a3a:	0013      	movs	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	f7ff ffc1 	bl	80039c8 <BuzzerPlayNote>
	for(int i = 0 ; i < melodySize; i++ ){
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	224e      	movs	r2, #78	; 0x4e
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d3e9      	bcc.n	8003a28 <playBuzzer+0xc>

		}
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	0800cc50 	.word	0x0800cc50
 8003a64:	0800cd88 	.word	0x0800cd88

08003a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a6c:	f001 fa98 	bl	8004fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a70:	f000 f940 	bl	8003cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a74:	f7ff fcf4 	bl	8003460 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a78:	f001 f9ba 	bl	8004df0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003a7c:	f001 f906 	bl	8004c8c <MX_TIM6_Init>
  MX_I2C1_Init();
 8003a80:	f7ff fd92 	bl	80035a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8003a84:	f7ff fac6 	bl	8003014 <MX_ADC1_Init>
  MX_RTC_Init();
 8003a88:	f000 f9e2 	bl	8003e50 <MX_RTC_Init>
  MX_TIM2_Init();
 8003a8c:	f001 f8a0 	bl	8004bd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8003a90:	4b83      	ldr	r3, [pc, #524]	; (8003ca0 <main+0x238>)
 8003a92:	0018      	movs	r0, r3
 8003a94:	f004 fc36 	bl	8008304 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8003a98:	4b82      	ldr	r3, [pc, #520]	; (8003ca4 <main+0x23c>)
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f001 fe08 	bl	80056b0 <HAL_ADC_Start>
  ssd1306_Init();
 8003aa0:	f000 fafa 	bl	8004098 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (dash == 0 ){
 8003aa4:	4b80      	ldr	r3, [pc, #512]	; (8003ca8 <main+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <main+0x52>
	 	  	ssd1306_DrawDashboard();
 8003aac:	f000 fe46 	bl	800473c <ssd1306_DrawDashboard>
	 	  	dash++;
 8003ab0:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <main+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	4b7c      	ldr	r3, [pc, #496]	; (8003ca8 <main+0x240>)
 8003ab8:	601a      	str	r2, [r3, #0]
	 	  }


	 	  if(Menu_Stage_1==1)
 8003aba:	4b7c      	ldr	r3, [pc, #496]	; (8003cac <main+0x244>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10a      	bne.n	8003ad8 <main+0x70>
	 		  menu = 1;
 8003ac2:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <main+0x248>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]

	 	  while (menu){
 8003ac8:	e006      	b.n	8003ad8 <main+0x70>
	 		  getValueADC(3);
 8003aca:	2003      	movs	r0, #3
 8003acc:	f7ff fee2 	bl	8003894 <getValueADC>
	 		  updateMenu();
 8003ad0:	f7ff fe0c 	bl	80036ec <updateMenu>
	 		  execCommandSelect();
 8003ad4:	f7ff fe16 	bl	8003704 <execCommandSelect>
	 	  while (menu){
 8003ad8:	4b75      	ldr	r3, [pc, #468]	; (8003cb0 <main+0x248>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f4      	bne.n	8003aca <main+0x62>

	 	  }

	 	  Temperature = DS18B20_Get_Temperature();
 8003ae0:	f7ff fc73 	bl	80033ca <DS18B20_Get_Temperature>
 8003ae4:	1c02      	adds	r2, r0, #0
 8003ae6:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <main+0x24c>)
 8003ae8:	601a      	str	r2, [r3, #0]

	 	  sprintf(string_buff, "%.1f", Temperature);
 8003aea:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <main+0x24c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1c18      	adds	r0, r3, #0
 8003af0:	f7ff f998 	bl	8002e24 <__aeabi_f2d>
 8003af4:	0002      	movs	r2, r0
 8003af6:	000b      	movs	r3, r1
 8003af8:	496f      	ldr	r1, [pc, #444]	; (8003cb8 <main+0x250>)
 8003afa:	4870      	ldr	r0, [pc, #448]	; (8003cbc <main+0x254>)
 8003afc:	f006 fe34 	bl	800a768 <siprintf>

	 	  HAL_Delay(50);
 8003b00:	2032      	movs	r0, #50	; 0x32
 8003b02:	f001 fad3 	bl	80050ac <HAL_Delay>


	 	  ssd1306_SetCursor(81, 7);
 8003b06:	2107      	movs	r1, #7
 8003b08:	2051      	movs	r0, #81	; 0x51
 8003b0a:	f000 fca9 	bl	8004460 <ssd1306_SetCursor>

	 	  ssd1306_WriteString(string_buff, Font_7x10,White);
 8003b0e:	4a6c      	ldr	r2, [pc, #432]	; (8003cc0 <main+0x258>)
 8003b10:	486a      	ldr	r0, [pc, #424]	; (8003cbc <main+0x254>)
 8003b12:	2301      	movs	r3, #1
 8003b14:	6811      	ldr	r1, [r2, #0]
 8003b16:	6852      	ldr	r2, [r2, #4]
 8003b18:	f000 fc78 	bl	800440c <ssd1306_WriteString>

	 	  sprintf(string_buff, "%.2f", waterVolume);
 8003b1c:	4b69      	ldr	r3, [pc, #420]	; (8003cc4 <main+0x25c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c18      	adds	r0, r3, #0
 8003b22:	f7ff f97f 	bl	8002e24 <__aeabi_f2d>
 8003b26:	0002      	movs	r2, r0
 8003b28:	000b      	movs	r3, r1
 8003b2a:	4967      	ldr	r1, [pc, #412]	; (8003cc8 <main+0x260>)
 8003b2c:	4863      	ldr	r0, [pc, #396]	; (8003cbc <main+0x254>)
 8003b2e:	f006 fe1b 	bl	800a768 <siprintf>
	 	  ssd1306_SetCursor(81, 28);
 8003b32:	211c      	movs	r1, #28
 8003b34:	2051      	movs	r0, #81	; 0x51
 8003b36:	f000 fc93 	bl	8004460 <ssd1306_SetCursor>
	 	  ssd1306_WriteString(string_buff, Font_7x10,White);
 8003b3a:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <main+0x258>)
 8003b3c:	485f      	ldr	r0, [pc, #380]	; (8003cbc <main+0x254>)
 8003b3e:	2301      	movs	r3, #1
 8003b40:	6811      	ldr	r1, [r2, #0]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	f000 fc62 	bl	800440c <ssd1306_WriteString>

	 	  sprintf(string_buff, "%d", time);
 8003b48:	4b60      	ldr	r3, [pc, #384]	; (8003ccc <main+0x264>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	4960      	ldr	r1, [pc, #384]	; (8003cd0 <main+0x268>)
 8003b50:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <main+0x254>)
 8003b52:	0018      	movs	r0, r3
 8003b54:	f006 fe08 	bl	800a768 <siprintf>
	 	  ssd1306_SetCursor(81, 48);
 8003b58:	2130      	movs	r1, #48	; 0x30
 8003b5a:	2051      	movs	r0, #81	; 0x51
 8003b5c:	f000 fc80 	bl	8004460 <ssd1306_SetCursor>
	 	  ssd1306_WriteString(string_buff, Font_7x10,White);
 8003b60:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <main+0x258>)
 8003b62:	4856      	ldr	r0, [pc, #344]	; (8003cbc <main+0x254>)
 8003b64:	2301      	movs	r3, #1
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	f000 fc4f 	bl	800440c <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 8003b6e:	f000 fb23 	bl	80041b8 <ssd1306_UpdateScreen>

	 	  waterVolume -= water/1000;
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <main+0x25c>)
 8003b74:	681c      	ldr	r4, [r3, #0]
 8003b76:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <main+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4957      	ldr	r1, [pc, #348]	; (8003cd8 <main+0x270>)
 8003b7c:	1c18      	adds	r0, r3, #0
 8003b7e:	f7fc ff57 	bl	8000a30 <__aeabi_fdiv>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	1c19      	adds	r1, r3, #0
 8003b86:	1c20      	adds	r0, r4, #0
 8003b88:	f7fd f91c 	bl	8000dc4 <__aeabi_fsub>
 8003b8c:	1c03      	adds	r3, r0, #0
 8003b8e:	1c1a      	adds	r2, r3, #0
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <main+0x25c>)
 8003b92:	601a      	str	r2, [r3, #0]
	 	  water = 0;
 8003b94:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <main+0x26c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]


	 	  //readPinState(GPIOA, GPIO_PIN_4);
	 	  //LED change behaivor

	 	 if (led){
 8003b9a:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <main+0x274>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d059      	beq.n	8003c56 <main+0x1ee>
	 	 		  if (Temperature > MIN_TEMP && Temperature < MAX_TEMP )
 8003ba2:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <main+0x24c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	494e      	ldr	r1, [pc, #312]	; (8003ce0 <main+0x278>)
 8003ba8:	1c18      	adds	r0, r3, #0
 8003baa:	f7fc fca1 	bl	80004f0 <__aeabi_fcmpgt>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d01d      	beq.n	8003bee <main+0x186>
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <main+0x24c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	494b      	ldr	r1, [pc, #300]	; (8003ce4 <main+0x27c>)
 8003bb8:	1c18      	adds	r0, r3, #0
 8003bba:	f7fc fc85 	bl	80004c8 <__aeabi_fcmplt>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d015      	beq.n	8003bee <main+0x186>
	 	 		  	  {
	 	 		  		  //green
	 	 		  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8003bc2:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <main+0x280>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2108      	movs	r1, #8
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f002 fb1c 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003bce:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <main+0x280>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f002 fb16 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003bda:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <main+0x280>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2120      	movs	r1, #32
 8003be0:	0018      	movs	r0, r3
 8003be2:	f002 fb10 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  ssd1306_DrawTempIcon(2);
 8003be6:	2002      	movs	r0, #2
 8003be8:	f000 fde6 	bl	80047b8 <ssd1306_DrawTempIcon>
 8003bec:	e048      	b.n	8003c80 <main+0x218>
	 	 		  	  }
	 	 		  	  else if(Temperature >= MAX_TEMP )
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <main+0x24c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	493c      	ldr	r1, [pc, #240]	; (8003ce4 <main+0x27c>)
 8003bf4:	1c18      	adds	r0, r3, #0
 8003bf6:	f7fc fc85 	bl	8000504 <__aeabi_fcmpge>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d015      	beq.n	8003c2a <main+0x1c2>
	 	 		  	  {
	 	 		  		  //red
	 	 		  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <main+0x280>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	2108      	movs	r1, #8
 8003c04:	0018      	movs	r0, r3
 8003c06:	f002 fafe 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <main+0x280>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2110      	movs	r1, #16
 8003c10:	0018      	movs	r0, r3
 8003c12:	f002 faf8 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <main+0x280>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f002 faf2 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  ssd1306_DrawTempIcon(0);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f000 fdc8 	bl	80047b8 <ssd1306_DrawTempIcon>
 8003c28:	e02a      	b.n	8003c80 <main+0x218>

	 	 		  	  }
	 	 		  	  else
	 	 		  	  {
	 	 		  		//blue
	 	 		  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <main+0x280>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2108      	movs	r1, #8
 8003c30:	0018      	movs	r0, r3
 8003c32:	f002 fae8 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <main+0x280>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f002 fae2 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <main+0x280>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	2120      	movs	r1, #32
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f002 fadc 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  		  ssd1306_DrawTempIcon(1);
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f000 fdb2 	bl	80047b8 <ssd1306_DrawTempIcon>
 8003c54:	e014      	b.n	8003c80 <main+0x218>
	 	 		  	  }
	 	 	  }
	 	 	  else{
	 	 		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <main+0x280>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f002 fad2 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003c62:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <main+0x280>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2110      	movs	r1, #16
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f002 facc 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <main+0x280>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	2120      	movs	r1, #32
 8003c74:	0018      	movs	r0, r3
 8003c76:	f002 fac6 	bl	8006206 <HAL_GPIO_WritePin>
	 	 		  ssd1306_DrawTempIcon(3);
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f000 fd9c 	bl	80047b8 <ssd1306_DrawTempIcon>
	 	 	  }

	 	  if(alarm){
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <main+0x284>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d100      	bne.n	8003c8a <main+0x222>
 8003c88:	e70c      	b.n	8003aa4 <main+0x3c>
	 		  playBuzzer();
 8003c8a:	f7ff fec7 	bl	8003a1c <playBuzzer>
	 		  setAlarm(hour);
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <main+0x288>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7ff fe2e 	bl	80038f4 <setAlarm>
	 		  //resetTime();
	 		  alarm = 0;
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <main+0x284>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
	  if (dash == 0 ){
 8003c9e:	e701      	b.n	8003aa4 <main+0x3c>
 8003ca0:	20000794 	.word	0x20000794
 8003ca4:	20000228 	.word	0x20000228
 8003ca8:	200002ec 	.word	0x200002ec
 8003cac:	200002e0 	.word	0x200002e0
 8003cb0:	200002f2 	.word	0x200002f2
 8003cb4:	200002f8 	.word	0x200002f8
 8003cb8:	0800cb80 	.word	0x0800cb80
 8003cbc:	200002fc 	.word	0x200002fc
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	0800cb88 	.word	0x0800cb88
 8003ccc:	200002f4 	.word	0x200002f4
 8003cd0:	0800cb78 	.word	0x0800cb78
 8003cd4:	200002e8 	.word	0x200002e8
 8003cd8:	447a0000 	.word	0x447a0000
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	41a80000 	.word	0x41a80000
 8003ce4:	41c80000 	.word	0x41c80000
 8003ce8:	50000400 	.word	0x50000400
 8003cec:	200002f1 	.word	0x200002f1
 8003cf0:	200002f0 	.word	0x200002f0

08003cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b093      	sub	sp, #76	; 0x4c
 8003cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cfa:	2410      	movs	r4, #16
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	0018      	movs	r0, r3
 8003d00:	2338      	movs	r3, #56	; 0x38
 8003d02:	001a      	movs	r2, r3
 8003d04:	2100      	movs	r1, #0
 8003d06:	f006 fdae 	bl	800a866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d0a:	003b      	movs	r3, r7
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	2310      	movs	r3, #16
 8003d10:	001a      	movs	r2, r3
 8003d12:	2100      	movs	r1, #0
 8003d14:	f006 fda7 	bl	800a866 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f002 ff99 	bl	8006c54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	220a      	movs	r2, #10
 8003d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d28:	193b      	adds	r3, r7, r4
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	0052      	lsls	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003d30:	0021      	movs	r1, r4
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2201      	movs	r2, #1
 8003d42:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2202      	movs	r2, #2
 8003d48:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	2200      	movs	r2, #0
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2208      	movs	r2, #8
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	0292      	lsls	r2, r2, #10
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2280      	movs	r2, #128	; 0x80
 8003d68:	0492      	lsls	r2, r2, #18
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	0592      	lsls	r2, r2, #22
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	0018      	movs	r0, r3
 8003d78:	f002 ffb8 	bl	8006cec <HAL_RCC_OscConfig>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d001      	beq.n	8003d84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003d80:	f000 f860 	bl	8003e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d84:	003b      	movs	r3, r7
 8003d86:	2207      	movs	r2, #7
 8003d88:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d8a:	003b      	movs	r3, r7
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d90:	003b      	movs	r3, r7
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d96:	003b      	movs	r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d9c:	003b      	movs	r3, r7
 8003d9e:	2102      	movs	r1, #2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f003 fabd 	bl	8007320 <HAL_RCC_ClockConfig>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003daa:	f000 f84b 	bl	8003e44 <Error_Handler>
  }
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b013      	add	sp, #76	; 0x4c
 8003db4:	bd90      	pop	{r4, r7, pc}
	...

08003db8 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	1dbb      	adds	r3, r7, #6
 8003dc2:	801a      	strh	r2, [r3, #0]



	if (GPIO_Pin == BUTTON_Pin){
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	881a      	ldrh	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d123      	bne.n	8003e18 <HAL_GPIO_EXTI_Falling_Callback+0x60>
		if(Menu_Stage_1 == 0 && Menu_Stage_2 == 0){
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
			Menu_Stage_1 = 1;
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
			return;
 8003de6:	e017      	b.n	8003e18 <HAL_GPIO_EXTI_Falling_Callback+0x60>
		}
	    if(Menu_Stage_1 == 1 && Menu_Stage_2 == 0){
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_GPIO_EXTI_Falling_Callback+0x48>
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <HAL_GPIO_EXTI_Falling_Callback+0x48>
			Menu_Stage_2 = 1;
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
			return;
 8003dfe:	e00b      	b.n	8003e18 <HAL_GPIO_EXTI_Falling_Callback+0x60>
		}
		if(Menu_Stage_1 == 1 && Menu_Stage_2 == 1){
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_GPIO_EXTI_Falling_Callback+0x60>
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d103      	bne.n	8003e18 <HAL_GPIO_EXTI_Falling_Callback+0x60>
			Menu_Stage_2 = 0;
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
			return;
 8003e16:	46c0      	nop			; (mov r8, r8)
		}
	}



}
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b002      	add	sp, #8
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	200002e0 	.word	0x200002e0
 8003e24:	200002e1 	.word	0x200002e1

08003e28 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

	alarm = 1;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]

}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	200002f1 	.word	0x200002f1

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e48:	b672      	cpsid	i
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e4c:	e7fe      	b.n	8003e4c <Error_Handler+0x8>
	...

08003e50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b090      	sub	sp, #64	; 0x40
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e56:	232c      	movs	r3, #44	; 0x2c
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2314      	movs	r3, #20
 8003e5e:	001a      	movs	r2, r3
 8003e60:	2100      	movs	r1, #0
 8003e62:	f006 fd00 	bl	800a866 <memset>
  RTC_DateTypeDef sDate = {0};
 8003e66:	2328      	movs	r3, #40	; 0x28
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003e6e:	003b      	movs	r3, r7
 8003e70:	0018      	movs	r0, r3
 8003e72:	2328      	movs	r3, #40	; 0x28
 8003e74:	001a      	movs	r2, r3
 8003e76:	2100      	movs	r1, #0
 8003e78:	f006 fcf5 	bl	800a866 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e7c:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e7e:	4a45      	ldr	r2, [pc, #276]	; (8003f94 <MX_RTC_Init+0x144>)
 8003e80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003e88:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e8a:	227f      	movs	r2, #127	; 0x7f
 8003e8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <MX_RTC_Init+0x140>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <MX_RTC_Init+0x140>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <MX_RTC_Init+0x140>)
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	05d2      	lsls	r2, r2, #23
 8003eac:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <MX_RTC_Init+0x140>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <MX_RTC_Init+0x140>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f003 fd94 	bl	80079e4 <HAL_RTC_Init>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8003ec0:	f7ff ffc0 	bl	8003e44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003eea:	1879      	adds	r1, r7, r1
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <MX_RTC_Init+0x140>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f003 fe19 	bl	8007b28 <HAL_RTC_SetTime>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d001      	beq.n	8003efe <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003efa:	f7ff ffa3 	bl	8003e44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003efe:	2128      	movs	r1, #40	; 0x28
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2201      	movs	r2, #1
 8003f0a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2201      	movs	r2, #1
 8003f10:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2200      	movs	r2, #0
 8003f16:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003f18:	1879      	adds	r1, r7, r1
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <MX_RTC_Init+0x140>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f003 feaa 	bl	8007c78 <HAL_RTC_SetDate>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d001      	beq.n	8003f2c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8003f28:	f7ff ff8c 	bl	8003e44 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003f2c:	003b      	movs	r3, r7
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003f32:	003b      	movs	r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003f38:	003b      	movs	r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f44:	003b      	movs	r3, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f4a:	003b      	movs	r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003f50:	003b      	movs	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2220      	movs	r2, #32
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003f6a:	003b      	movs	r3, r7
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0052      	lsls	r2, r2, #1
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003f72:	0039      	movs	r1, r7
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <MX_RTC_Init+0x140>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f003 ff0f 	bl	8007d9c <HAL_RTC_SetAlarm_IT>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8003f82:	f7ff ff5f 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b010      	add	sp, #64	; 0x40
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	20000308 	.word	0x20000308
 8003f94:	40002800 	.word	0x40002800

08003f98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b091      	sub	sp, #68	; 0x44
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa0:	240c      	movs	r4, #12
 8003fa2:	193b      	adds	r3, r7, r4
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	2334      	movs	r3, #52	; 0x34
 8003fa8:	001a      	movs	r2, r3
 8003faa:	2100      	movs	r1, #0
 8003fac:	f006 fc5b 	bl	800a866 <memset>
  if(rtcHandle->Instance==RTC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_RTC_MspInit+0x84>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d12c      	bne.n	8004014 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	0292      	lsls	r2, r2, #10
 8003fc0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	0092      	lsls	r2, r2, #2
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f003 fb51 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8003fd2:	1e03      	subs	r3, r0, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003fd6:	f7ff ff35 	bl	8003e44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_RTC_MspInit+0x88>)
 8003fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RTC_MspInit+0x88>)
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	0209      	lsls	r1, r1, #8
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RTC_MspInit+0x88>)
 8003fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RTC_MspInit+0x88>)
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	00c9      	lsls	r1, r1, #3
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RTC_MspInit+0x88>)
 8003ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4013      	ands	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2100      	movs	r1, #0
 8004008:	2002      	movs	r0, #2
 800400a:	f001 ff49 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800400e:	2002      	movs	r0, #2
 8004010:	f001 ff5b 	bl	8005eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b011      	add	sp, #68	; 0x44
 800401a:	bd90      	pop	{r4, r7, pc}
 800401c:	40002800 	.word	0x40002800
 8004020:	40021000 	.word	0x40021000

08004024 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af04      	add	r7, sp, #16
 8004036:	0002      	movs	r2, r0
 8004038:	1dfb      	adds	r3, r7, #7
 800403a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800403c:	4808      	ldr	r0, [pc, #32]	; (8004060 <ssd1306_WriteCommand+0x30>)
 800403e:	2301      	movs	r3, #1
 8004040:	425b      	negs	r3, r3
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	2301      	movs	r3, #1
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	1dfb      	adds	r3, r7, #7
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2301      	movs	r3, #1
 800404e:	2200      	movs	r2, #0
 8004050:	2178      	movs	r1, #120	; 0x78
 8004052:	f002 f9bf 	bl	80063d4 <HAL_I2C_Mem_Write>
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b002      	add	sp, #8
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000028c 	.word	0x2000028c

08004064 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af04      	add	r7, sp, #16
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	4808      	ldr	r0, [pc, #32]	; (8004094 <ssd1306_WriteData+0x30>)
 8004074:	2201      	movs	r2, #1
 8004076:	4252      	negs	r2, r2
 8004078:	9202      	str	r2, [sp, #8]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2301      	movs	r3, #1
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	2178      	movs	r1, #120	; 0x78
 8004086:	f002 f9a5 	bl	80063d4 <HAL_I2C_Mem_Write>
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	2000028c 	.word	0x2000028c

08004098 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800409c:	f7ff ffc2 	bl	8004024 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80040a0:	2064      	movs	r0, #100	; 0x64
 80040a2:	f001 f803 	bl	80050ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80040a6:	2000      	movs	r0, #0
 80040a8:	f000 fb22 	bl	80046f0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80040ac:	2020      	movs	r0, #32
 80040ae:	f7ff ffbf 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7ff ffbc 	bl	8004030 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80040b8:	20b0      	movs	r0, #176	; 0xb0
 80040ba:	f7ff ffb9 	bl	8004030 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80040be:	20c8      	movs	r0, #200	; 0xc8
 80040c0:	f7ff ffb6 	bl	8004030 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7ff ffb3 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80040ca:	2010      	movs	r0, #16
 80040cc:	f7ff ffb0 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80040d0:	2040      	movs	r0, #64	; 0x40
 80040d2:	f7ff ffad 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80040d6:	20ff      	movs	r0, #255	; 0xff
 80040d8:	f000 faf1 	bl	80046be <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80040dc:	20a1      	movs	r0, #161	; 0xa1
 80040de:	f7ff ffa7 	bl	8004030 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80040e2:	20a6      	movs	r0, #166	; 0xa6
 80040e4:	f7ff ffa4 	bl	8004030 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80040e8:	20a8      	movs	r0, #168	; 0xa8
 80040ea:	f7ff ffa1 	bl	8004030 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80040ee:	203f      	movs	r0, #63	; 0x3f
 80040f0:	f7ff ff9e 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80040f4:	20a4      	movs	r0, #164	; 0xa4
 80040f6:	f7ff ff9b 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80040fa:	20d3      	movs	r0, #211	; 0xd3
 80040fc:	f7ff ff98 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff ff95 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004106:	20d5      	movs	r0, #213	; 0xd5
 8004108:	f7ff ff92 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800410c:	20f0      	movs	r0, #240	; 0xf0
 800410e:	f7ff ff8f 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004112:	20d9      	movs	r0, #217	; 0xd9
 8004114:	f7ff ff8c 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004118:	2022      	movs	r0, #34	; 0x22
 800411a:	f7ff ff89 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800411e:	20da      	movs	r0, #218	; 0xda
 8004120:	f7ff ff86 	bl	8004030 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004124:	2012      	movs	r0, #18
 8004126:	f7ff ff83 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800412a:	20db      	movs	r0, #219	; 0xdb
 800412c:	f7ff ff80 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004130:	2020      	movs	r0, #32
 8004132:	f7ff ff7d 	bl	8004030 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004136:	208d      	movs	r0, #141	; 0x8d
 8004138:	f7ff ff7a 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800413c:	2014      	movs	r0, #20
 800413e:	f7ff ff77 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004142:	2001      	movs	r0, #1
 8004144:	f000 fad4 	bl	80046f0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004148:	2000      	movs	r0, #0
 800414a:	f000 f811 	bl	8004170 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800414e:	f000 f833 	bl	80041b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <ssd1306_Init+0xd4>)
 8004154:	2200      	movs	r2, #0
 8004156:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <ssd1306_Init+0xd4>)
 800415a:	2200      	movs	r2, #0
 800415c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800415e:	4b03      	ldr	r3, [pc, #12]	; (800416c <ssd1306_Init+0xd4>)
 8004160:	2201      	movs	r2, #1
 8004162:	711a      	strb	r2, [r3, #4]
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	20000734 	.word	0x20000734

08004170 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	0002      	movs	r2, r0
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e00e      	b.n	80041a0 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004182:	1dfb      	adds	r3, r7, #7
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <ssd1306_Fill+0x1e>
 800418a:	2100      	movs	r1, #0
 800418c:	e000      	b.n	8004190 <ssd1306_Fill+0x20>
 800418e:	21ff      	movs	r1, #255	; 0xff
 8004190:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <ssd1306_Fill+0x44>)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	1c0a      	adds	r2, r1, #0
 8004198:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3301      	adds	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d3eb      	bcc.n	8004182 <ssd1306_Fill+0x12>
    }
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000334 	.word	0x20000334

080041b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80041be:	1dfb      	adds	r3, r7, #7
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e01a      	b.n	80041fc <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3b50      	subs	r3, #80	; 0x50
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff ff2e 	bl	8004030 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff ff2b 	bl	8004030 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80041da:	2010      	movs	r0, #16
 80041dc:	f7ff ff28 	bl	8004030 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	01da      	lsls	r2, r3, #7
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <ssd1306_UpdateScreen+0x58>)
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7ff ff39 	bl	8004064 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80041f2:	1dfb      	adds	r3, r7, #7
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	1dfb      	adds	r3, r7, #7
 80041f8:	3201      	adds	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	1dfb      	adds	r3, r7, #7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d9e0      	bls.n	80041c6 <ssd1306_UpdateScreen+0xe>
    }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20000334 	.word	0x20000334

08004214 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	0004      	movs	r4, r0
 800421c:	0008      	movs	r0, r1
 800421e:	0011      	movs	r1, r2
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	1c22      	adds	r2, r4, #0
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	1dbb      	adds	r3, r7, #6
 8004228:	1c02      	adds	r2, r0, #0
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	1d7b      	adds	r3, r7, #5
 800422e:	1c0a      	adds	r2, r1, #0
 8004230:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b25b      	sxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	db47      	blt.n	80042cc <ssd1306_DrawPixel+0xb8>
 800423c:	1dbb      	adds	r3, r7, #6
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b3f      	cmp	r3, #63	; 0x3f
 8004242:	d843      	bhi.n	80042cc <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004244:	1d7b      	adds	r3, r7, #5
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11e      	bne.n	800428a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	1dbb      	adds	r3, r7, #6
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	b2d8      	uxtb	r0, r3
 8004258:	0003      	movs	r3, r0
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <ssd1306_DrawPixel+0xc0>)
 8004260:	5cd3      	ldrb	r3, [r2, r3]
 8004262:	b25a      	sxtb	r2, r3
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2107      	movs	r1, #7
 800426a:	400b      	ands	r3, r1
 800426c:	2101      	movs	r1, #1
 800426e:	4099      	lsls	r1, r3
 8004270:	000b      	movs	r3, r1
 8004272:	b25b      	sxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b259      	sxtb	r1, r3
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	0003      	movs	r3, r0
 800427e:	01db      	lsls	r3, r3, #7
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	b2c9      	uxtb	r1, r1
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <ssd1306_DrawPixel+0xc0>)
 8004286:	54d1      	strb	r1, [r2, r3]
 8004288:	e021      	b.n	80042ce <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800428a:	1dfb      	adds	r3, r7, #7
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	08db      	lsrs	r3, r3, #3
 8004294:	b2d8      	uxtb	r0, r3
 8004296:	0003      	movs	r3, r0
 8004298:	01db      	lsls	r3, r3, #7
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <ssd1306_DrawPixel+0xc0>)
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	1dba      	adds	r2, r7, #6
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	2107      	movs	r1, #7
 80042a8:	400a      	ands	r2, r1
 80042aa:	2101      	movs	r1, #1
 80042ac:	4091      	lsls	r1, r2
 80042ae:	000a      	movs	r2, r1
 80042b0:	b252      	sxtb	r2, r2
 80042b2:	43d2      	mvns	r2, r2
 80042b4:	b252      	sxtb	r2, r2
 80042b6:	4013      	ands	r3, r2
 80042b8:	b259      	sxtb	r1, r3
 80042ba:	1dfb      	adds	r3, r7, #7
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	0003      	movs	r3, r0
 80042c0:	01db      	lsls	r3, r3, #7
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	b2c9      	uxtb	r1, r1
 80042c6:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <ssd1306_DrawPixel+0xc0>)
 80042c8:	54d1      	strb	r1, [r2, r3]
 80042ca:	e000      	b.n	80042ce <ssd1306_DrawPixel+0xba>
        return;
 80042cc:	46c0      	nop			; (mov r8, r8)
    }
}
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b003      	add	sp, #12
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	20000334 	.word	0x20000334

080042d8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	0004      	movs	r4, r0
 80042e0:	1d38      	adds	r0, r7, #4
 80042e2:	6001      	str	r1, [r0, #0]
 80042e4:	6042      	str	r2, [r0, #4]
 80042e6:	0019      	movs	r1, r3
 80042e8:	200f      	movs	r0, #15
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	1c22      	adds	r2, r4, #0
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	230e      	movs	r3, #14
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	1c0a      	adds	r2, r1, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b1f      	cmp	r3, #31
 80042fe:	d903      	bls.n	8004308 <ssd1306_WriteChar+0x30>
 8004300:	183b      	adds	r3, r7, r0
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b7e      	cmp	r3, #126	; 0x7e
 8004306:	d901      	bls.n	800430c <ssd1306_WriteChar+0x34>
        return 0;
 8004308:	2300      	movs	r3, #0
 800430a:	e078      	b.n	80043fe <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800430c:	4b3e      	ldr	r3, [pc, #248]	; (8004408 <ssd1306_WriteChar+0x130>)
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	001a      	movs	r2, r3
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	dc07      	bgt.n	800432c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800431c:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <ssd1306_WriteChar+0x130>)
 800431e:	885b      	ldrh	r3, [r3, #2]
 8004320:	001a      	movs	r2, r3
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	dd01      	ble.n	8004330 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800432c:	2300      	movs	r3, #0
 800432e:	e066      	b.n	80043fe <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e051      	b.n	80043da <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	230f      	movs	r3, #15
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	3b20      	subs	r3, #32
 8004342:	1d39      	adds	r1, r7, #4
 8004344:	7849      	ldrb	r1, [r1, #1]
 8004346:	434b      	muls	r3, r1
 8004348:	0019      	movs	r1, r3
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	18cb      	adds	r3, r1, r3
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	18d3      	adds	r3, r2, r3
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e035      	b.n	80043c8 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	409a      	lsls	r2, r3
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	4013      	ands	r3, r2
 8004368:	d014      	beq.n	8004394 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <ssd1306_WriteChar+0x130>)
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	b2d8      	uxtb	r0, r3
 8004378:	4b23      	ldr	r3, [pc, #140]	; (8004408 <ssd1306_WriteChar+0x130>)
 800437a:	885b      	ldrh	r3, [r3, #2]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	18d3      	adds	r3, r2, r3
 8004384:	b2d9      	uxtb	r1, r3
 8004386:	230e      	movs	r3, #14
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	001a      	movs	r2, r3
 800438e:	f7ff ff41 	bl	8004214 <ssd1306_DrawPixel>
 8004392:	e016      	b.n	80043c2 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <ssd1306_WriteChar+0x130>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	b2d8      	uxtb	r0, r3
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <ssd1306_WriteChar+0x130>)
 80043a4:	885b      	ldrh	r3, [r3, #2]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	b2d9      	uxtb	r1, r3
 80043b0:	230e      	movs	r3, #14
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	425a      	negs	r2, r3
 80043b8:	4153      	adcs	r3, r2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	001a      	movs	r2, r3
 80043be:	f7ff ff29 	bl	8004214 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	001a      	movs	r2, r3
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d3c3      	bcc.n	800435c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	001a      	movs	r2, r3
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d3a7      	bcc.n	8004336 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <ssd1306_WriteChar+0x130>)
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <ssd1306_WriteChar+0x130>)
 80043f6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80043f8:	230f      	movs	r3, #15
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	781b      	ldrb	r3, [r3, #0]
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b009      	add	sp, #36	; 0x24
 8004404:	bd90      	pop	{r4, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	20000734 	.word	0x20000734

0800440c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	1d38      	adds	r0, r7, #4
 8004416:	6001      	str	r1, [r0, #0]
 8004418:	6042      	str	r2, [r0, #4]
 800441a:	001a      	movs	r2, r3
 800441c:	1cfb      	adds	r3, r7, #3
 800441e:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8004420:	e014      	b.n	800444c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	7818      	ldrb	r0, [r3, #0]
 8004426:	1cfb      	adds	r3, r7, #3
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	1d3a      	adds	r2, r7, #4
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	f7ff ff52 	bl	80042d8 <ssd1306_WriteChar>
 8004434:	0003      	movs	r3, r0
 8004436:	001a      	movs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d002      	beq.n	8004446 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	e008      	b.n	8004458 <ssd1306_WriteString+0x4c>
        }
        str++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}

08004460 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	0002      	movs	r2, r0
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	1dbb      	adds	r3, r7, #6
 800446e:	1c0a      	adds	r2, r1, #0
 8004470:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <ssd1306_SetCursor+0x30>)
 800447a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800447c:	1dbb      	adds	r3, r7, #6
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b29a      	uxth	r2, r3
 8004482:	4b03      	ldr	r3, [pc, #12]	; (8004490 <ssd1306_SetCursor+0x30>)
 8004484:	805a      	strh	r2, [r3, #2]
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000734 	.word	0x20000734

08004494 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004494:	b5b0      	push	{r4, r5, r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	0005      	movs	r5, r0
 800449c:	000c      	movs	r4, r1
 800449e:	0010      	movs	r0, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	1c2a      	adds	r2, r5, #0
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	1dbb      	adds	r3, r7, #6
 80044aa:	1c22      	adds	r2, r4, #0
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	1d7b      	adds	r3, r7, #5
 80044b0:	1c02      	adds	r2, r0, #0
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	1c0a      	adds	r2, r1, #0
 80044b8:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80044ba:	230d      	movs	r3, #13
 80044bc:	18fa      	adds	r2, r7, r3
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	1d79      	adds	r1, r7, #5
 80044c2:	780c      	ldrb	r4, [r1, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b2d8      	uxtb	r0, r3
 80044c8:	b2e1      	uxtb	r1, r4
 80044ca:	4288      	cmp	r0, r1
 80044cc:	d900      	bls.n	80044d0 <ssd1306_FillRectangle+0x3c>
 80044ce:	1c23      	adds	r3, r4, #0
 80044d0:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80044d2:	230c      	movs	r3, #12
 80044d4:	18fa      	adds	r2, r7, r3
 80044d6:	1d7b      	adds	r3, r7, #5
 80044d8:	1df9      	adds	r1, r7, #7
 80044da:	780c      	ldrb	r4, [r1, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b2d8      	uxtb	r0, r3
 80044e0:	b2e1      	uxtb	r1, r4
 80044e2:	4288      	cmp	r0, r1
 80044e4:	d200      	bcs.n	80044e8 <ssd1306_FillRectangle+0x54>
 80044e6:	1c23      	adds	r3, r4, #0
 80044e8:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80044ea:	230b      	movs	r3, #11
 80044ec:	18fa      	adds	r2, r7, r3
 80044ee:	1dbb      	adds	r3, r7, #6
 80044f0:	1d39      	adds	r1, r7, #4
 80044f2:	780c      	ldrb	r4, [r1, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2d8      	uxtb	r0, r3
 80044f8:	b2e1      	uxtb	r1, r4
 80044fa:	4288      	cmp	r0, r1
 80044fc:	d900      	bls.n	8004500 <ssd1306_FillRectangle+0x6c>
 80044fe:	1c23      	adds	r3, r4, #0
 8004500:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004502:	230a      	movs	r3, #10
 8004504:	18fa      	adds	r2, r7, r3
 8004506:	1d3b      	adds	r3, r7, #4
 8004508:	1db9      	adds	r1, r7, #6
 800450a:	780c      	ldrb	r4, [r1, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2d8      	uxtb	r0, r3
 8004510:	b2e1      	uxtb	r1, r4
 8004512:	4288      	cmp	r0, r1
 8004514:	d200      	bcs.n	8004518 <ssd1306_FillRectangle+0x84>
 8004516:	1c23      	adds	r3, r4, #0
 8004518:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800451a:	230f      	movs	r3, #15
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	220b      	movs	r2, #11
 8004520:	18ba      	adds	r2, r7, r2
 8004522:	7812      	ldrb	r2, [r2, #0]
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e02b      	b.n	8004580 <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004528:	230e      	movs	r3, #14
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	220d      	movs	r2, #13
 800452e:	18ba      	adds	r2, r7, r2
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e011      	b.n	800455a <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 8004536:	2320      	movs	r3, #32
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	230f      	movs	r3, #15
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	240e      	movs	r4, #14
 8004544:	193b      	adds	r3, r7, r4
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fe63 	bl	8004214 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800454e:	0021      	movs	r1, r4
 8004550:	187b      	adds	r3, r7, r1
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	187b      	adds	r3, r7, r1
 8004556:	3201      	adds	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	210e      	movs	r1, #14
 800455c:	187a      	adds	r2, r7, r1
 800455e:	230c      	movs	r3, #12
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d804      	bhi.n	8004574 <ssd1306_FillRectangle+0xe0>
 800456a:	187b      	adds	r3, r7, r1
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b25b      	sxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	dae0      	bge.n	8004536 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004574:	210f      	movs	r1, #15
 8004576:	187b      	adds	r3, r7, r1
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	187b      	adds	r3, r7, r1
 800457c:	3201      	adds	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	210f      	movs	r1, #15
 8004582:	187a      	adds	r2, r7, r1
 8004584:	230a      	movs	r3, #10
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d804      	bhi.n	800459a <ssd1306_FillRectangle+0x106>
 8004590:	187b      	adds	r3, r7, r1
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b3f      	cmp	r3, #63	; 0x3f
 8004596:	d9c7      	bls.n	8004528 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46c0      	nop			; (mov r8, r8)
}
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bdb0      	pop	{r4, r5, r7, pc}

080045a2 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80045a2:	b590      	push	{r4, r7, lr}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	0004      	movs	r4, r0
 80045aa:	0008      	movs	r0, r1
 80045ac:	603a      	str	r2, [r7, #0]
 80045ae:	0019      	movs	r1, r3
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	1c22      	adds	r2, r4, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	1c02      	adds	r2, r0, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	1d7b      	adds	r3, r7, #5
 80045be:	1c0a      	adds	r2, r1, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80045c2:	1d7b      	adds	r3, r7, #5
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	3307      	adds	r3, #7
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da00      	bge.n	80045ce <ssd1306_DrawBitmap+0x2c>
 80045cc:	3307      	adds	r3, #7
 80045ce:	10db      	asrs	r3, r3, #3
 80045d0:	001a      	movs	r2, r3
 80045d2:	230a      	movs	r3, #10
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80045d8:	230f      	movs	r3, #15
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db65      	blt.n	80046b6 <ssd1306_DrawBitmap+0x114>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b3f      	cmp	r3, #63	; 0x3f
 80045f0:	d861      	bhi.n	80046b6 <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80045f2:	230e      	movs	r3, #14
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e053      	b.n	80046a4 <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 80045fc:	230d      	movs	r3, #13
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e03c      	b.n	8004680 <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 8004606:	230d      	movs	r3, #13
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	d006      	beq.n	8004620 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8004612:	230f      	movs	r3, #15
 8004614:	18fa      	adds	r2, r7, r3
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	18db      	adds	r3, r3, r3
 800461c:	7013      	strb	r3, [r2, #0]
 800461e:	e014      	b.n	800464a <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004620:	230e      	movs	r3, #14
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	220a      	movs	r2, #10
 8004628:	18ba      	adds	r2, r7, r2
 800462a:	2100      	movs	r1, #0
 800462c:	5e52      	ldrsh	r2, [r2, r1]
 800462e:	4353      	muls	r3, r2
 8004630:	220d      	movs	r2, #13
 8004632:	18ba      	adds	r2, r7, r2
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	08d2      	lsrs	r2, r2, #3
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	189b      	adds	r3, r3, r2
 800463c:	001a      	movs	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	189a      	adds	r2, r3, r2
 8004642:	230f      	movs	r3, #15
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 800464a:	230f      	movs	r3, #15
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b25b      	sxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	da0e      	bge.n	8004674 <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 8004656:	1dfa      	adds	r2, r7, #7
 8004658:	230d      	movs	r3, #13
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	b2d8      	uxtb	r0, r3
 8004664:	2324      	movs	r3, #36	; 0x24
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	1dbb      	adds	r3, r7, #6
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	0019      	movs	r1, r3
 8004670:	f7ff fdd0 	bl	8004214 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004674:	210d      	movs	r1, #13
 8004676:	187b      	adds	r3, r7, r1
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	187b      	adds	r3, r7, r1
 800467c:	3201      	adds	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	230d      	movs	r3, #13
 8004682:	18fa      	adds	r2, r7, r3
 8004684:	1d7b      	adds	r3, r7, #5
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3bb      	bcc.n	8004606 <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 800468e:	210e      	movs	r1, #14
 8004690:	187b      	adds	r3, r7, r1
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	187b      	adds	r3, r7, r1
 8004696:	3201      	adds	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	1dbb      	adds	r3, r7, #6
 80046a0:	3201      	adds	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	230e      	movs	r3, #14
 80046a6:	18fa      	adds	r2, r7, r3
 80046a8:	2320      	movs	r3, #32
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3a3      	bcc.n	80045fc <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 80046b4:	e000      	b.n	80046b8 <ssd1306_DrawBitmap+0x116>
        return;
 80046b6:	46c0      	nop			; (mov r8, r8)
}
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b005      	add	sp, #20
 80046bc:	bd90      	pop	{r4, r7, pc}

080046be <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	0002      	movs	r2, r0
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80046ca:	210f      	movs	r1, #15
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	2281      	movs	r2, #129	; 0x81
 80046d0:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff fcaa 	bl	8004030 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff fca5 	bl	8004030 <ssd1306_WriteCommand>
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	0002      	movs	r2, r0
 80046f8:	1dfb      	adds	r3, r7, #7
 80046fa:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80046fc:	1dfb      	adds	r3, r7, #7
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8004704:	230f      	movs	r3, #15
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	22af      	movs	r2, #175	; 0xaf
 800470a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <ssd1306_SetDisplayOn+0x48>)
 800470e:	2201      	movs	r2, #1
 8004710:	715a      	strb	r2, [r3, #5]
 8004712:	e006      	b.n	8004722 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8004714:	230f      	movs	r3, #15
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	22ae      	movs	r2, #174	; 0xae
 800471a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <ssd1306_SetDisplayOn+0x48>)
 800471e:	2200      	movs	r2, #0
 8004720:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004722:	230f      	movs	r3, #15
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff fc81 	bl	8004030 <ssd1306_WriteCommand>
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b004      	add	sp, #16
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	20000734 	.word	0x20000734

0800473c <ssd1306_DrawDashboard>:
    ssd1306_UpdateScreen();
    HAL_Delay(3000);

}
void ssd1306_DrawDashboard()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8004742:	2001      	movs	r0, #1
 8004744:	f7ff fd14 	bl	8004170 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,dashboard,128,64,Black);
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <ssd1306_DrawDashboard+0x34>)
 800474a:	2300      	movs	r3, #0
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	2100      	movs	r1, #0
 8004756:	2000      	movs	r0, #0
 8004758:	f7ff ff23 	bl	80045a2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800475c:	f7ff fd2c 	bl	80041b8 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <ssd1306_DrawDashboard+0x38>)
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fca2 	bl	80050ac <HAL_Delay>

}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	0800f6ac 	.word	0x0800f6ac
 8004774:	00000bb8 	.word	0x00000bb8

08004778 <ssd1306_DrawMenu>:
void ssd1306_DrawMenu(uint8_t index)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af02      	add	r7, sp, #8
 800477e:	0002      	movs	r2, r0
 8004780:	1dfb      	adds	r3, r7, #7
 8004782:	701a      	strb	r2, [r3, #0]
    ssd1306_Fill(White);
 8004784:	2001      	movs	r0, #1
 8004786:	f7ff fcf3 	bl	8004170 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,menuAllArray[index],128,64,Black);
 800478a:	1dfb      	adds	r3, r7, #7
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <ssd1306_DrawMenu+0x3c>)
 8004790:	0092      	lsls	r2, r2, #2
 8004792:	58d2      	ldr	r2, [r2, r3]
 8004794:	2300      	movs	r3, #0
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	2100      	movs	r1, #0
 80047a0:	2000      	movs	r0, #0
 80047a2:	f7ff fefe 	bl	80045a2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80047a6:	f7ff fd07 	bl	80041b8 <ssd1306_UpdateScreen>

}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	20000028 	.word	0x20000028

080047b8 <ssd1306_DrawTempIcon>:
void ssd1306_DrawTempIcon(uint8_t index)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af02      	add	r7, sp, #8
 80047be:	0002      	movs	r2, r0
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	701a      	strb	r2, [r3, #0]

    ssd1306_FillRectangle(41, 3, 56, 18, Black);
 80047c4:	2300      	movs	r3, #0
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2312      	movs	r3, #18
 80047ca:	2238      	movs	r2, #56	; 0x38
 80047cc:	2103      	movs	r1, #3
 80047ce:	2029      	movs	r0, #41	; 0x29
 80047d0:	f7ff fe60 	bl	8004494 <ssd1306_FillRectangle>

    ssd1306_DrawBitmap(41,3,Temp_icon[index],16,16,White);
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <ssd1306_DrawTempIcon+0x44>)
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	58d2      	ldr	r2, [r2, r3]
 80047de:	2301      	movs	r3, #1
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	2310      	movs	r3, #16
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2310      	movs	r3, #16
 80047e8:	2103      	movs	r1, #3
 80047ea:	2029      	movs	r0, #41	; 0x29
 80047ec:	f7ff fed9 	bl	80045a2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80047f0:	f7ff fce2 	bl	80041b8 <ssd1306_UpdateScreen>

}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000010 	.word	0x20000010

08004800 <ssd1306_DrawLedStatus>:

void ssd1306_DrawLedStatus(uint8_t index){
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af02      	add	r7, sp, #8
 8004806:	0002      	movs	r2, r0
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(White);
 800480c:	2001      	movs	r0, #1
 800480e:	f7ff fcaf 	bl	8004170 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,ledAll[index],128,64,Black);
 8004812:	1dfb      	adds	r3, r7, #7
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <ssd1306_DrawLedStatus+0x3c>)
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	58d2      	ldr	r2, [r2, r3]
 800481c:	2300      	movs	r3, #0
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	2340      	movs	r3, #64	; 0x40
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	2100      	movs	r1, #0
 8004828:	2000      	movs	r0, #0
 800482a:	f7ff feba 	bl	80045a2 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800482e:	f7ff fcc3 	bl	80041b8 <ssd1306_UpdateScreen>
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b002      	add	sp, #8
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	20000020 	.word	0x20000020

08004840 <ssd1306_DrawVolumeStatus>:

void ssd1306_DrawVolumeStatus(char * vol){
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(White);
 8004848:	2001      	movs	r0, #1
 800484a:	f7ff fc91 	bl	8004170 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,volume,128,64,Black);
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <ssd1306_DrawVolumeStatus+0x44>)
 8004850:	2300      	movs	r3, #0
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	2340      	movs	r3, #64	; 0x40
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	2100      	movs	r1, #0
 800485c:	2000      	movs	r0, #0
 800485e:	f7ff fea0 	bl	80045a2 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(85, 20);
 8004862:	2114      	movs	r1, #20
 8004864:	2055      	movs	r0, #85	; 0x55
 8004866:	f7ff fdfb 	bl	8004460 <ssd1306_SetCursor>
	ssd1306_WriteString(vol, Font_7x10, Black);
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <ssd1306_DrawVolumeStatus+0x48>)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	2300      	movs	r3, #0
 8004870:	6811      	ldr	r1, [r2, #0]
 8004872:	6852      	ldr	r2, [r2, #4]
 8004874:	f7ff fdca 	bl	800440c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004878:	f7ff fc9e 	bl	80041b8 <ssd1306_UpdateScreen>
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}
 8004884:	0800f2ac 	.word	0x0800f2ac
 8004888:	20000008 	.word	0x20000008

0800488c <ssd1306_DrawIntervalStatus>:

void ssd1306_DrawIntervalStatus(char * vol){
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(White);
 8004894:	2001      	movs	r0, #1
 8004896:	f7ff fc6b 	bl	8004170 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,interval,128,64,Black);
 800489a:	4a0d      	ldr	r2, [pc, #52]	; (80048d0 <ssd1306_DrawIntervalStatus+0x44>)
 800489c:	2300      	movs	r3, #0
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	2100      	movs	r1, #0
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7ff fe7a 	bl	80045a2 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(85, 20);
 80048ae:	2114      	movs	r1, #20
 80048b0:	2055      	movs	r0, #85	; 0x55
 80048b2:	f7ff fdd5 	bl	8004460 <ssd1306_SetCursor>
	ssd1306_WriteString(vol, Font_7x10, Black);
 80048b6:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <ssd1306_DrawIntervalStatus+0x48>)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	6852      	ldr	r2, [r2, #4]
 80048c0:	f7ff fda4 	bl	800440c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80048c4:	f7ff fc78 	bl	80041b8 <ssd1306_UpdateScreen>
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	0800eeac 	.word	0x0800eeac
 80048d4:	20000008 	.word	0x20000008

080048d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <HAL_MspInit+0x44>)
 80048e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_MspInit+0x44>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	430a      	orrs	r2, r1
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <HAL_MspInit+0x44>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_MspInit+0x44>)
 80048f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_MspInit+0x44>)
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	0549      	lsls	r1, r1, #21
 8004900:	430a      	orrs	r2, r1
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_MspInit+0x44>)
 8004906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	055b      	lsls	r3, r3, #21
 800490c:	4013      	ands	r3, r2
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b002      	add	sp, #8
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	40021000 	.word	0x40021000

08004920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <NMI_Handler+0x4>

08004926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800492a:	e7fe      	b.n	800492a <HardFault_Handler+0x4>

0800492c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	i++;
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <SysTick_Handler+0x98>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <SysTick_Handler+0x98>)
 800494c:	601a      	str	r2, [r3, #0]
	  if (i==100)
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <SysTick_Handler+0x98>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d13b      	bne.n	80049ce <SysTick_Handler+0x8e>
	  {
		  Flow = (pulse) *2.25*60/1000*20;
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <SysTick_Handler+0x9c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0018      	movs	r0, r3
 800495c:	f7fe fa0c 	bl	8002d78 <__aeabi_i2d>
 8004960:	2200      	movs	r2, #0
 8004962:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <SysTick_Handler+0xa0>)
 8004964:	f7fd fb70 	bl	8002048 <__aeabi_dmul>
 8004968:	0002      	movs	r2, r0
 800496a:	000b      	movs	r3, r1
 800496c:	0010      	movs	r0, r2
 800496e:	0019      	movs	r1, r3
 8004970:	2200      	movs	r2, #0
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <SysTick_Handler+0xa4>)
 8004974:	f7fd fb68 	bl	8002048 <__aeabi_dmul>
 8004978:	0002      	movs	r2, r0
 800497a:	000b      	movs	r3, r1
 800497c:	0010      	movs	r0, r2
 800497e:	0019      	movs	r1, r3
 8004980:	2200      	movs	r2, #0
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <SysTick_Handler+0xa8>)
 8004984:	f7fc ff66 	bl	8001854 <__aeabi_ddiv>
 8004988:	0002      	movs	r2, r0
 800498a:	000b      	movs	r3, r1
 800498c:	0010      	movs	r0, r2
 800498e:	0019      	movs	r1, r3
 8004990:	2200      	movs	r2, #0
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <SysTick_Handler+0xac>)
 8004994:	f7fd fb58 	bl	8002048 <__aeabi_dmul>
 8004998:	0002      	movs	r2, r0
 800499a:	000b      	movs	r3, r1
 800499c:	0010      	movs	r0, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	f7fe fa88 	bl	8002eb4 <__aeabi_d2f>
 80049a4:	1c02      	adds	r2, r0, #0
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <SysTick_Handler+0xb0>)
 80049a8:	601a      	str	r2, [r3, #0]
		  /*if (Flow > 0.136){
			  water+=Flow;
		  }*/
		  water+=Flow;
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <SysTick_Handler+0xb4>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <SysTick_Handler+0xb0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	1c19      	adds	r1, r3, #0
 80049b4:	1c10      	adds	r0, r2, #0
 80049b6:	f7fb fe9b 	bl	80006f0 <__aeabi_fadd>
 80049ba:	1c03      	adds	r3, r0, #0
 80049bc:	1c1a      	adds	r2, r3, #0
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <SysTick_Handler+0xb4>)
 80049c0:	601a      	str	r2, [r3, #0]

		  i = 0;
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SysTick_Handler+0x98>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		  pulse = 0;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <SysTick_Handler+0x9c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ce:	f000 fb51 	bl	8005074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000740 	.word	0x20000740
 80049dc:	2000073c 	.word	0x2000073c
 80049e0:	40020000 	.word	0x40020000
 80049e4:	404e0000 	.word	0x404e0000
 80049e8:	408f4000 	.word	0x408f4000
 80049ec:	40340000 	.word	0x40340000
 80049f0:	200002e4 	.word	0x200002e4
 80049f4:	200002e8 	.word	0x200002e8

080049f8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <RTC_TAMP_IRQHandler+0x14>)
 80049fe:	0018      	movs	r0, r3
 8004a00:	f003 fb0c 	bl	800801c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000308 	.word	0x20000308

08004a10 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 8004a14:	23a0      	movs	r3, #160	; 0xa0
 8004a16:	05db      	lsls	r3, r3, #23
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f001 fbd6 	bl	80061cc <HAL_GPIO_ReadPin>
 8004a20:	1e03      	subs	r3, r0, #0
 8004a22:	d004      	beq.n	8004a2e <EXTI4_15_IRQHandler+0x1e>
		  pulse++;
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <EXTI4_15_IRQHandler+0x34>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <EXTI4_15_IRQHandler+0x34>)
 8004a2c:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLOW_Pin);
 8004a2e:	2040      	movs	r0, #64	; 0x40
 8004a30:	f001 fc06 	bl	8006240 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f001 fc01 	bl	8006240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	2000073c 	.word	0x2000073c

08004a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  return 1;
 8004a4c:	2301      	movs	r3, #1
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_kill>:

int _kill(int pid, int sig)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a5e:	f005 ff5d 	bl	800a91c <__errno>
 8004a62:	0003      	movs	r3, r0
 8004a64:	2216      	movs	r2, #22
 8004a66:	601a      	str	r2, [r3, #0]
  return -1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	425b      	negs	r3, r3
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_exit>:

void _exit (int status)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	425a      	negs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ffe5 	bl	8004a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a8a:	e7fe      	b.n	8004a8a <_exit+0x16>

08004a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e00a      	b.n	8004ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a9e:	e000      	b.n	8004aa2 <_read+0x16>
 8004aa0:	bf00      	nop
 8004aa2:	0001      	movs	r1, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	60ba      	str	r2, [r7, #8]
 8004aaa:	b2ca      	uxtb	r2, r1
 8004aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	dbf0      	blt.n	8004a9e <_read+0x12>
  }

  return len;
 8004abc:	687b      	ldr	r3, [r7, #4]
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b006      	add	sp, #24
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e009      	b.n	8004aec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	60ba      	str	r2, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	e000      	b.n	8004ae6 <_write+0x20>
 8004ae4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	dbf1      	blt.n	8004ad8 <_write+0x12>
  }
  return len;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b006      	add	sp, #24
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_close>:

int _close(int file)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	425b      	negs	r3, r3
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	0192      	lsls	r2, r2, #6
 8004b22:	605a      	str	r2, [r3, #4]
  return 0;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_isatty>:

int _isatty(int file)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <_sbrk+0x5c>)
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <_sbrk+0x60>)
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <_sbrk+0x64>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b74:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <_sbrk+0x64>)
 8004b76:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <_sbrk+0x68>)
 8004b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <_sbrk+0x64>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d207      	bcs.n	8004b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b88:	f005 fec8 	bl	800a91c <__errno>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	220c      	movs	r2, #12
 8004b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	425b      	negs	r3, r3
 8004b96:	e009      	b.n	8004bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <_sbrk+0x64>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <_sbrk+0x64>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	18d2      	adds	r2, r2, r3
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <_sbrk+0x64>)
 8004ba8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b006      	add	sp, #24
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20009000 	.word	0x20009000
 8004bb8:	00000400 	.word	0x00000400
 8004bbc:	20000744 	.word	0x20000744
 8004bc0:	200009c8 	.word	0x200009c8

08004bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd6:	231c      	movs	r3, #28
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	0018      	movs	r0, r3
 8004bdc:	230c      	movs	r3, #12
 8004bde:	001a      	movs	r2, r3
 8004be0:	2100      	movs	r1, #0
 8004be2:	f005 fe40 	bl	800a866 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004be6:	003b      	movs	r3, r7
 8004be8:	0018      	movs	r0, r3
 8004bea:	231c      	movs	r3, #28
 8004bec:	001a      	movs	r2, r3
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f005 fe39 	bl	800a866 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	05d2      	lsls	r2, r2, #23
 8004bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8004c08:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c14:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f003 fbc5 	bl	80083ac <HAL_TIM_PWM_Init>
 8004c22:	1e03      	subs	r3, r0, #0
 8004c24:	d001      	beq.n	8004c2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004c26:	f7ff f90d 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c2a:	211c      	movs	r1, #28
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c38:	187a      	adds	r2, r7, r1
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c3c:	0011      	movs	r1, r2
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f004 f9ea 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8004c44:	1e03      	subs	r3, r0, #0
 8004c46:	d001      	beq.n	8004c4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8004c48:	f7ff f8fc 	bl	8003e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c4c:	003b      	movs	r3, r7
 8004c4e:	2260      	movs	r2, #96	; 0x60
 8004c50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 127;
 8004c52:	003b      	movs	r3, r7
 8004c54:	227f      	movs	r2, #127	; 0x7f
 8004c56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c58:	003b      	movs	r3, r7
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c5e:	003b      	movs	r3, r7
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c64:	0039      	movs	r1, r7
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f003 fd6c 	bl	8008748 <HAL_TIM_PWM_ConfigChannel>
 8004c70:	1e03      	subs	r3, r0, #0
 8004c72:	d001      	beq.n	8004c78 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8004c74:	f7ff f8e6 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <MX_TIM2_Init+0xb8>)
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 f87c 	bl	8004d78 <HAL_TIM_MspPostInit>

}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b00a      	add	sp, #40	; 0x28
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000748 	.word	0x20000748

08004c8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	0018      	movs	r0, r3
 8004c96:	230c      	movs	r3, #12
 8004c98:	001a      	movs	r2, r3
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f005 fde3 	bl	800a866 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004ca0:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004ca2:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <MX_TIM6_Init+0x70>)
 8004ca4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004ca8:	223f      	movs	r2, #63	; 0x3f
 8004caa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <MX_TIM6_Init+0x74>)
 8004cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f003 fac7 	bl	8008254 <HAL_TIM_Base_Init>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d001      	beq.n	8004cce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004cca:	f7ff f8bb 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cd4:	1d3b      	adds	r3, r7, #4
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004cda:	1d3a      	adds	r2, r7, #4
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <MX_TIM6_Init+0x6c>)
 8004cde:	0011      	movs	r1, r2
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f004 f999 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d001      	beq.n	8004cee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004cea:	f7ff f8ab 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b004      	add	sp, #16
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	20000794 	.word	0x20000794
 8004cfc:	40001000 	.word	0x40001000
 8004d00:	0000ffff 	.word	0x0000ffff

08004d04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d10b      	bne.n	8004d30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_TIM_PWM_MspInit+0x34>)
 8004d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_TIM_PWM_MspInit+0x34>)
 8004d1e:	2101      	movs	r1, #1
 8004d20:	430a      	orrs	r2, r1
 8004d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <HAL_TIM_PWM_MspInit+0x34>)
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000

08004d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <HAL_TIM_Base_MspInit+0x34>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10b      	bne.n	8004d66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_TIM_Base_MspInit+0x38>)
 8004d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_TIM_Base_MspInit+0x38>)
 8004d54:	2110      	movs	r1, #16
 8004d56:	430a      	orrs	r2, r1
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_TIM_Base_MspInit+0x38>)
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	2210      	movs	r2, #16
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b004      	add	sp, #16
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	40001000 	.word	0x40001000
 8004d74:	40021000 	.word	0x40021000

08004d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	240c      	movs	r4, #12
 8004d82:	193b      	adds	r3, r7, r4
 8004d84:	0018      	movs	r0, r3
 8004d86:	2314      	movs	r3, #20
 8004d88:	001a      	movs	r2, r3
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f005 fd6b 	bl	800a866 <memset>
  if(timHandle->Instance==TIM2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d122      	bne.n	8004de2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_TIM_MspPostInit+0x74>)
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_TIM_MspPostInit+0x74>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	430a      	orrs	r2, r1
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_TIM_MspPostInit+0x74>)
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	2201      	movs	r2, #1
 8004dae:	4013      	ands	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004db4:	0021      	movs	r1, r4
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2220      	movs	r2, #32
 8004dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd4:	187a      	adds	r2, r7, r1
 8004dd6:	23a0      	movs	r3, #160	; 0xa0
 8004dd8:	05db      	lsls	r3, r3, #23
 8004dda:	0011      	movs	r1, r2
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f001 f891 	bl	8005f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b009      	add	sp, #36	; 0x24
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000

08004df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004df4:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004df6:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <MX_USART2_UART_Init+0x98>)
 8004df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004dfa:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004dfc:	22e1      	movs	r2, #225	; 0xe1
 8004dfe:	0252      	lsls	r2, r2, #9
 8004e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e16:	220c      	movs	r2, #12
 8004e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e20:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f004 f95a 	bl	80090f4 <HAL_UART_Init>
 8004e40:	1e03      	subs	r3, r0, #0
 8004e42:	d001      	beq.n	8004e48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004e44:	f7fe fffe 	bl	8003e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f004 fe69 	bl	8009b24 <HAL_UARTEx_SetTxFifoThreshold>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d001      	beq.n	8004e5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004e56:	f7fe fff5 	bl	8003e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f004 fea0 	bl	8009ba4 <HAL_UARTEx_SetRxFifoThreshold>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d001      	beq.n	8004e6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004e68:	f7fe ffec 	bl	8003e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <MX_USART2_UART_Init+0x94>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f004 fe1e 	bl	8009ab0 <HAL_UARTEx_DisableFifoMode>
 8004e74:	1e03      	subs	r3, r0, #0
 8004e76:	d001      	beq.n	8004e7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004e78:	f7fe ffe4 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	200007e0 	.word	0x200007e0
 8004e88:	40004400 	.word	0x40004400

08004e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b097      	sub	sp, #92	; 0x5c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	2344      	movs	r3, #68	; 0x44
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	0018      	movs	r0, r3
 8004e9a:	2314      	movs	r3, #20
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f005 fce1 	bl	800a866 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ea4:	2410      	movs	r4, #16
 8004ea6:	193b      	adds	r3, r7, r4
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	2334      	movs	r3, #52	; 0x34
 8004eac:	001a      	movs	r2, r3
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f005 fcd9 	bl	800a866 <memset>
  if(uartHandle->Instance==USART2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <HAL_UART_MspInit+0xb8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d13e      	bne.n	8004f3c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004eca:	193b      	adds	r3, r7, r4
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f002 fbd1 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004ed6:	f7fe ffb5 	bl	8003e44 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	0289      	lsls	r1, r1, #10
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ee8:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	029b      	lsls	r3, r3, #10
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004efc:	2101      	movs	r1, #1
 8004efe:	430a      	orrs	r2, r1
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_UART_MspInit+0xbc>)
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2201      	movs	r2, #1
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004f0e:	2144      	movs	r1, #68	; 0x44
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	220c      	movs	r2, #12
 8004f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2202      	movs	r2, #2
 8004f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	2201      	movs	r2, #1
 8004f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2e:	187a      	adds	r2, r7, r1
 8004f30:	23a0      	movs	r3, #160	; 0xa0
 8004f32:	05db      	lsls	r3, r3, #23
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 ffe4 	bl	8005f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b017      	add	sp, #92	; 0x5c
 8004f42:	bd90      	pop	{r4, r7, pc}
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40021000 	.word	0x40021000

08004f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f50:	f7ff fe38 	bl	8004bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f56:	490d      	ldr	r1, [pc, #52]	; (8004f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <LoopForever+0xe>)
  movs r3, #0
 8004f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f5c:	e002      	b.n	8004f64 <LoopCopyDataInit>

08004f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f62:	3304      	adds	r3, #4

08004f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f68:	d3f9      	bcc.n	8004f5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f6c:	4c0a      	ldr	r4, [pc, #40]	; (8004f98 <LoopForever+0x16>)
  movs r3, #0
 8004f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f70:	e001      	b.n	8004f76 <LoopFillZerobss>

08004f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f74:	3204      	adds	r2, #4

08004f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f78:	d3fb      	bcc.n	8004f72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f7a:	f005 fcd5 	bl	800a928 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f7e:	f7fe fd73 	bl	8003a68 <main>

08004f82 <LoopForever>:

LoopForever:
  b LoopForever
 8004f82:	e7fe      	b.n	8004f82 <LoopForever>
  ldr   r0, =_estack
 8004f84:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f8c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004f90:	0800ff0c 	.word	0x0800ff0c
  ldr r2, =_sbss
 8004f94:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8004f98:	200009c4 	.word	0x200009c4

08004f9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f9c:	e7fe      	b.n	8004f9c <ADC1_COMP_IRQHandler>
	...

08004fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_Init+0x3c>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_Init+0x3c>)
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	0049      	lsls	r1, r1, #1
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f000 f810 	bl	8004fe0 <HAL_InitTick>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004fc4:	1dfb      	adds	r3, r7, #7
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e001      	b.n	8004fd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004fcc:	f7ff fc84 	bl	80048d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	781b      	ldrb	r3, [r3, #0]
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40022000 	.word	0x40022000

08004fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fe8:	230f      	movs	r3, #15
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_InitTick+0x88>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02b      	beq.n	8005050 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <HAL_InitTick+0x8c>)
 8004ffa:	681c      	ldr	r4, [r3, #0]
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_InitTick+0x88>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	0019      	movs	r1, r3
 8005002:	23fa      	movs	r3, #250	; 0xfa
 8005004:	0098      	lsls	r0, r3, #2
 8005006:	f7fb f899 	bl	800013c <__udivsi3>
 800500a:	0003      	movs	r3, r0
 800500c:	0019      	movs	r1, r3
 800500e:	0020      	movs	r0, r4
 8005010:	f7fb f894 	bl	800013c <__udivsi3>
 8005014:	0003      	movs	r3, r0
 8005016:	0018      	movs	r0, r3
 8005018:	f000 ff67 	bl	8005eea <HAL_SYSTICK_Config>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d112      	bne.n	8005046 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d80a      	bhi.n	800503c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	2301      	movs	r3, #1
 800502a:	425b      	negs	r3, r3
 800502c:	2200      	movs	r2, #0
 800502e:	0018      	movs	r0, r3
 8005030:	f000 ff36 	bl	8005ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_InitTick+0x90>)
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00d      	b.n	8005058 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800503c:	230f      	movs	r3, #15
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005050:	230f      	movs	r3, #15
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005058:	230f      	movs	r3, #15
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b005      	add	sp, #20
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	20000040 	.word	0x20000040
 800506c:	20000038 	.word	0x20000038
 8005070:	2000003c 	.word	0x2000003c

08005074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_IncTick+0x1c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	001a      	movs	r2, r3
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_IncTick+0x20>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	18d2      	adds	r2, r2, r3
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_IncTick+0x20>)
 8005086:	601a      	str	r2, [r3, #0]
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	20000040 	.word	0x20000040
 8005094:	20000874 	.word	0x20000874

08005098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  return uwTick;
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <HAL_GetTick+0x10>)
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	20000874 	.word	0x20000874

080050ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050b4:	f7ff fff0 	bl	8005098 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	d005      	beq.n	80050d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <HAL_Delay+0x44>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	001a      	movs	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	f7ff ffe0 	bl	8005098 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d8f7      	bhi.n	80050d4 <HAL_Delay+0x28>
  {
  }
}
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b004      	add	sp, #16
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000040 	.word	0x20000040

080050f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005104:	401a      	ands	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	fe3fffff 	.word	0xfe3fffff

0800511c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	23e0      	movs	r3, #224	; 0xe0
 800512a:	045b      	lsls	r3, r3, #17
 800512c:	4013      	ands	r3, r2
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b002      	add	sp, #8
 8005134:	bd80      	pop	{r7, pc}

08005136 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	2104      	movs	r1, #4
 800514a:	400a      	ands	r2, r1
 800514c:	2107      	movs	r1, #7
 800514e:	4091      	lsls	r1, r2
 8005150:	000a      	movs	r2, r1
 8005152:	43d2      	mvns	r2, r2
 8005154:	401a      	ands	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2104      	movs	r1, #4
 800515a:	400b      	ands	r3, r1
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4099      	lsls	r1, r3
 8005160:	000b      	movs	r3, r1
 8005162:	431a      	orrs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b004      	add	sp, #16
 800516e:	bd80      	pop	{r7, pc}

08005170 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	2104      	movs	r1, #4
 8005182:	400a      	ands	r2, r1
 8005184:	2107      	movs	r1, #7
 8005186:	4091      	lsls	r1, r2
 8005188:	000a      	movs	r2, r1
 800518a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2104      	movs	r1, #4
 8005190:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005192:	40da      	lsrs	r2, r3
 8005194:	0013      	movs	r3, r2
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}

0800519e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	23c0      	movs	r3, #192	; 0xc0
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	4013      	ands	r3, r2
 80051b0:	d101      	bne.n	80051b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}

080051c0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	211f      	movs	r1, #31
 80051d4:	400a      	ands	r2, r1
 80051d6:	210f      	movs	r1, #15
 80051d8:	4091      	lsls	r1, r2
 80051da:	000a      	movs	r2, r1
 80051dc:	43d2      	mvns	r2, r2
 80051de:	401a      	ands	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0e9b      	lsrs	r3, r3, #26
 80051e4:	210f      	movs	r1, #15
 80051e6:	4019      	ands	r1, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	201f      	movs	r0, #31
 80051ec:	4003      	ands	r3, r0
 80051ee:	4099      	lsls	r1, r3
 80051f0:	000b      	movs	r3, r1
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}

08005200 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	035b      	lsls	r3, r3, #13
 8005212:	0b5b      	lsrs	r3, r3, #13
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b002      	add	sp, #8
 8005220:	bd80      	pop	{r7, pc}

08005222 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	0352      	lsls	r2, r2, #13
 8005234:	0b52      	lsrs	r2, r2, #13
 8005236:	43d2      	mvns	r2, r2
 8005238:	401a      	ands	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	b002      	add	sp, #8
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	0212      	lsls	r2, r2, #8
 800525c:	43d2      	mvns	r2, r2
 800525e:	401a      	ands	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	400b      	ands	r3, r1
 8005268:	4904      	ldr	r1, [pc, #16]	; (800527c <LL_ADC_SetChannelSamplingTime+0x34>)
 800526a:	400b      	ands	r3, r1
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b004      	add	sp, #16
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	07ffff00 	.word	0x07ffff00

08005280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a05      	ldr	r2, [pc, #20]	; (80052a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800528e:	4013      	ands	r3, r2
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	0552      	lsls	r2, r2, #21
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	6fffffe8 	.word	0x6fffffe8

080052a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	055b      	lsls	r3, r3, #21
 80052b8:	401a      	ands	r2, r3
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	055b      	lsls	r3, r3, #21
 80052be:	429a      	cmp	r2, r3
 80052c0:	d101      	bne.n	80052c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <LL_ADC_Enable+0x20>)
 80052de:	4013      	ands	r3, r2
 80052e0:	2201      	movs	r2, #1
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	7fffffe8 	.word	0x7fffffe8

080052f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2201      	movs	r2, #1
 8005302:	4013      	ands	r3, r2
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <LL_ADC_IsEnabled+0x18>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <LL_ADC_IsEnabled+0x1a>
 800530c:	2300      	movs	r3, #0
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b002      	add	sp, #8
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <LL_ADC_REG_StartConversion+0x20>)
 8005326:	4013      	ands	r3, r2
 8005328:	2204      	movs	r2, #4
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005330:	46c0      	nop			; (mov r8, r8)
 8005332:	46bd      	mov	sp, r7
 8005334:	b002      	add	sp, #8
 8005336:	bd80      	pop	{r7, pc}
 8005338:	7fffffe8 	.word	0x7fffffe8

0800533c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2204      	movs	r2, #4
 800534a:	4013      	ands	r3, r2
 800534c:	2b04      	cmp	r3, #4
 800534e:	d101      	bne.n	8005354 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005368:	231f      	movs	r3, #31
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005370:	2300      	movs	r3, #0
 8005372:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e17f      	b.n	8005686 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	0018      	movs	r0, r3
 8005392:	f7fd fea5 	bl	80030e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2254      	movs	r2, #84	; 0x54
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f7ff ff7d 	bl	80052a8 <LL_ADC_IsInternalRegulatorEnabled>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d115      	bne.n	80053de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7ff ff62 	bl	8005280 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053bc:	4bb4      	ldr	r3, [pc, #720]	; (8005690 <HAL_ADC_Init+0x330>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	49b4      	ldr	r1, [pc, #720]	; (8005694 <HAL_ADC_Init+0x334>)
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7fa feba 	bl	800013c <__udivsi3>
 80053c8:	0003      	movs	r3, r0
 80053ca:	3301      	adds	r3, #1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053d0:	e002      	b.n	80053d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f9      	bne.n	80053d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff ff60 	bl	80052a8 <LL_ADC_IsInternalRegulatorEnabled>
 80053e8:	1e03      	subs	r3, r0, #0
 80053ea:	d10f      	bne.n	800540c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	2210      	movs	r2, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fc:	2201      	movs	r2, #1
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005404:	231f      	movs	r3, #31
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff ff93 	bl	800533c <LL_ADC_REG_IsConversionOngoing>
 8005416:	0003      	movs	r3, r0
 8005418:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	2210      	movs	r2, #16
 8005420:	4013      	ands	r3, r2
 8005422:	d000      	beq.n	8005426 <HAL_ADC_Init+0xc6>
 8005424:	e122      	b.n	800566c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d000      	beq.n	800542e <HAL_ADC_Init+0xce>
 800542c:	e11e      	b.n	800566c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	4a99      	ldr	r2, [pc, #612]	; (8005698 <HAL_ADC_Init+0x338>)
 8005434:	4013      	ands	r3, r2
 8005436:	2202      	movs	r2, #2
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	0018      	movs	r0, r3
 8005444:	f7ff ff56 	bl	80052f4 <LL_ADC_IsEnabled>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d000      	beq.n	800544e <HAL_ADC_Init+0xee>
 800544c:	e0ad      	b.n	80055aa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7e1b      	ldrb	r3, [r3, #24]
 8005456:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005458:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7e5b      	ldrb	r3, [r3, #25]
 800545e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005460:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7e9b      	ldrb	r3, [r3, #26]
 8005466:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005468:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_ADC_Init+0x118>
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	015b      	lsls	r3, r3, #5
 8005476:	e000      	b.n	800547a <HAL_ADC_Init+0x11a>
 8005478:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800547a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005480:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da04      	bge.n	8005494 <HAL_ADC_Init+0x134>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	e001      	b.n	8005498 <HAL_ADC_Init+0x138>
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8005498:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	212c      	movs	r1, #44	; 0x2c
 800549e:	5c5b      	ldrb	r3, [r3, r1]
 80054a0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054a2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	5c9b      	ldrb	r3, [r3, r2]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d115      	bne.n	80054e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7e9b      	ldrb	r3, [r3, #26]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	0252      	lsls	r2, r2, #9
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e00b      	b.n	80054e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	2220      	movs	r2, #32
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	2201      	movs	r2, #1
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ec:	23e0      	movs	r3, #224	; 0xe0
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80054f6:	4313      	orrs	r3, r2
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_ADC_Init+0x33c>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	430a      	orrs	r2, r1
 8005512:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	0f9b      	lsrs	r3, r3, #30
 800551a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005520:	4313      	orrs	r3, r2
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	223c      	movs	r2, #60	; 0x3c
 800552c:	5c9b      	ldrb	r3, [r3, r2]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d111      	bne.n	8005556 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	0f9b      	lsrs	r3, r3, #30
 8005538:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800553e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005544:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800554a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	2201      	movs	r2, #1
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4a50      	ldr	r2, [pc, #320]	; (80056a0 <HAL_ADC_Init+0x340>)
 800555e:	4013      	ands	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	430a      	orrs	r2, r1
 800556a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	061b      	lsls	r3, r3, #24
 8005574:	429a      	cmp	r2, r3
 8005576:	d018      	beq.n	80055aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	05db      	lsls	r3, r3, #23
 8005580:	429a      	cmp	r2, r3
 8005582:	d012      	beq.n	80055aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	429a      	cmp	r2, r3
 800558e:	d00c      	beq.n	80055aa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005590:	4b44      	ldr	r3, [pc, #272]	; (80056a4 <HAL_ADC_Init+0x344>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a44      	ldr	r2, [pc, #272]	; (80056a8 <HAL_ADC_Init+0x348>)
 8005596:	4013      	ands	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	23f0      	movs	r3, #240	; 0xf0
 80055a0:	039b      	lsls	r3, r3, #14
 80055a2:	401a      	ands	r2, r3
 80055a4:	4b3f      	ldr	r3, [pc, #252]	; (80056a4 <HAL_ADC_Init+0x344>)
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	001a      	movs	r2, r3
 80055b4:	2100      	movs	r1, #0
 80055b6:	f7ff fdbe 	bl	8005136 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	493a      	ldr	r1, [pc, #232]	; (80056ac <HAL_ADC_Init+0x34c>)
 80055c4:	001a      	movs	r2, r3
 80055c6:	f7ff fdb6 	bl	8005136 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2110      	movs	r1, #16
 80055de:	4249      	negs	r1, r1
 80055e0:	430a      	orrs	r2, r1
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
 80055e4:	e018      	b.n	8005618 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	039b      	lsls	r3, r3, #14
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d112      	bne.n	8005618 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	221c      	movs	r2, #28
 8005602:	4013      	ands	r3, r2
 8005604:	2210      	movs	r2, #16
 8005606:	4252      	negs	r2, r2
 8005608:	409a      	lsls	r2, r3
 800560a:	0011      	movs	r1, r2
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2100      	movs	r1, #0
 800561e:	0018      	movs	r0, r3
 8005620:	f7ff fda6 	bl	8005170 <LL_ADC_GetSamplingTimeCommonChannels>
 8005624:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800562a:	429a      	cmp	r2, r3
 800562c:	d10b      	bne.n	8005646 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	2203      	movs	r2, #3
 800563a:	4393      	bics	r3, r2
 800563c:	2201      	movs	r2, #1
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005644:	e01c      	b.n	8005680 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	2212      	movs	r2, #18
 800564c:	4393      	bics	r3, r2
 800564e:	2210      	movs	r2, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	2201      	movs	r2, #1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005662:	231f      	movs	r3, #31
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800566a:	e009      	b.n	8005680 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	2210      	movs	r2, #16
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005678:	231f      	movs	r3, #31
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005680:	231f      	movs	r3, #31
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	781b      	ldrb	r3, [r3, #0]
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b008      	add	sp, #32
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000038 	.word	0x20000038
 8005694:	00030d40 	.word	0x00030d40
 8005698:	fffffefd 	.word	0xfffffefd
 800569c:	fffe0201 	.word	0xfffe0201
 80056a0:	1ffffc02 	.word	0x1ffffc02
 80056a4:	40012708 	.word	0x40012708
 80056a8:	ffc3ffff 	.word	0xffc3ffff
 80056ac:	07ffff04 	.word	0x07ffff04

080056b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80056b0:	b5b0      	push	{r4, r5, r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	0018      	movs	r0, r3
 80056be:	f7ff fe3d 	bl	800533c <LL_ADC_REG_IsConversionOngoing>
 80056c2:	1e03      	subs	r3, r0, #0
 80056c4:	d135      	bne.n	8005732 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2254      	movs	r2, #84	; 0x54
 80056ca:	5c9b      	ldrb	r3, [r3, r2]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_Start+0x24>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e035      	b.n	8005740 <HAL_ADC_Start+0x90>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2254      	movs	r2, #84	; 0x54
 80056d8:	2101      	movs	r1, #1
 80056da:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80056dc:	250f      	movs	r5, #15
 80056de:	197c      	adds	r4, r7, r5
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 faaa 	bl	8005c3c <ADC_Enable>
 80056e8:	0003      	movs	r3, r0
 80056ea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80056ec:	197b      	adds	r3, r7, r5
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d119      	bne.n	8005728 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	4a13      	ldr	r2, [pc, #76]	; (8005748 <HAL_ADC_Start+0x98>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	0052      	lsls	r2, r2, #1
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	221c      	movs	r2, #28
 8005712:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2254      	movs	r2, #84	; 0x54
 8005718:	2100      	movs	r1, #0
 800571a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff fdf9 	bl	8005318 <LL_ADC_REG_StartConversion>
 8005726:	e008      	b.n	800573a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2254      	movs	r2, #84	; 0x54
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]
 8005730:	e003      	b.n	800573a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005732:	230f      	movs	r3, #15
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800573a:	230f      	movs	r3, #15
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	781b      	ldrb	r3, [r3, #0]
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b004      	add	sp, #16
 8005746:	bdb0      	pop	{r4, r5, r7, pc}
 8005748:	fffff0fe 	.word	0xfffff0fe

0800574c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d102      	bne.n	8005764 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800575e:	2308      	movs	r3, #8
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e00f      	b.n	8005784 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	d007      	beq.n	8005780 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	2220      	movs	r2, #32
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e072      	b.n	8005866 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005780:	2304      	movs	r3, #4
 8005782:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005784:	f7ff fc88 	bl	8005098 <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800578c:	e01f      	b.n	80057ce <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	d01c      	beq.n	80057ce <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005794:	f7ff fc80 	bl	8005098 <HAL_GetTick>
 8005798:	0002      	movs	r2, r0
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <HAL_ADC_PollForConversion+0x5e>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d111      	bne.n	80057ce <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4013      	ands	r3, r2
 80057b4:	d10b      	bne.n	80057ce <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	2204      	movs	r2, #4
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2254      	movs	r2, #84	; 0x54
 80057c6:	2100      	movs	r1, #0
 80057c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e04b      	b.n	8005866 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	d0d9      	beq.n	800578e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7ff fcd6 	bl	800519e <LL_ADC_REG_IsTriggerSourceSWStart>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d02e      	beq.n	8005854 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7e9b      	ldrb	r3, [r3, #26]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d12a      	bne.n	8005854 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	4013      	ands	r3, r2
 8005808:	2b08      	cmp	r3, #8
 800580a:	d123      	bne.n	8005854 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff fd93 	bl	800533c <LL_ADC_REG_IsConversionOngoing>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d110      	bne.n	800583c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	210c      	movs	r1, #12
 8005826:	438a      	bics	r2, r1
 8005828:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	4a10      	ldr	r2, [pc, #64]	; (8005870 <HAL_ADC_PollForConversion+0x124>)
 8005830:	4013      	ands	r3, r2
 8005832:	2201      	movs	r2, #1
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	659a      	str	r2, [r3, #88]	; 0x58
 800583a:	e00b      	b.n	8005854 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	2220      	movs	r2, #32
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	2201      	movs	r2, #1
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	7e1b      	ldrb	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	220c      	movs	r2, #12
 8005862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	fffffefe 	.word	0xfffffefe

08005874 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005896:	2317      	movs	r3, #23
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2254      	movs	r2, #84	; 0x54
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x24>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e1c0      	b.n	8005c32 <HAL_ADC_ConfigChannel+0x3a6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2254      	movs	r2, #84	; 0x54
 80058b4:	2101      	movs	r1, #1
 80058b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0018      	movs	r0, r3
 80058be:	f7ff fd3d 	bl	800533c <LL_ADC_REG_IsConversionOngoing>
 80058c2:	1e03      	subs	r3, r0, #0
 80058c4:	d000      	beq.n	80058c8 <HAL_ADC_ConfigChannel+0x3c>
 80058c6:	e1a3      	b.n	8005c10 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d100      	bne.n	80058d2 <HAL_ADC_ConfigChannel+0x46>
 80058d0:	e143      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	429a      	cmp	r2, r3
 80058dc:	d004      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80058e2:	4ac1      	ldr	r2, [pc, #772]	; (8005be8 <HAL_ADC_ConfigChannel+0x35c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	0019      	movs	r1, r3
 80058f2:	0010      	movs	r0, r2
 80058f4:	f7ff fc84 	bl	8005200 <LL_ADC_REG_SetSequencerChAdd>
 80058f8:	e0c9      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	211f      	movs	r1, #31
 8005904:	400b      	ands	r3, r1
 8005906:	210f      	movs	r1, #15
 8005908:	4099      	lsls	r1, r3
 800590a:	000b      	movs	r3, r1
 800590c:	43db      	mvns	r3, r3
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	035b      	lsls	r3, r3, #13
 8005918:	0b5b      	lsrs	r3, r3, #13
 800591a:	d105      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x9c>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	0e9b      	lsrs	r3, r3, #26
 8005922:	221f      	movs	r2, #31
 8005924:	4013      	ands	r3, r2
 8005926:	e098      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2201      	movs	r2, #1
 800592e:	4013      	ands	r3, r2
 8005930:	d000      	beq.n	8005934 <HAL_ADC_ConfigChannel+0xa8>
 8005932:	e091      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x1cc>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2202      	movs	r2, #2
 800593a:	4013      	ands	r3, r2
 800593c:	d000      	beq.n	8005940 <HAL_ADC_ConfigChannel+0xb4>
 800593e:	e089      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x1c8>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2204      	movs	r2, #4
 8005946:	4013      	ands	r3, r2
 8005948:	d000      	beq.n	800594c <HAL_ADC_ConfigChannel+0xc0>
 800594a:	e081      	b.n	8005a50 <HAL_ADC_ConfigChannel+0x1c4>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2208      	movs	r2, #8
 8005952:	4013      	ands	r3, r2
 8005954:	d000      	beq.n	8005958 <HAL_ADC_ConfigChannel+0xcc>
 8005956:	e079      	b.n	8005a4c <HAL_ADC_ConfigChannel+0x1c0>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2210      	movs	r2, #16
 800595e:	4013      	ands	r3, r2
 8005960:	d000      	beq.n	8005964 <HAL_ADC_ConfigChannel+0xd8>
 8005962:	e071      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x1bc>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2220      	movs	r2, #32
 800596a:	4013      	ands	r3, r2
 800596c:	d000      	beq.n	8005970 <HAL_ADC_ConfigChannel+0xe4>
 800596e:	e069      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x1b8>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2240      	movs	r2, #64	; 0x40
 8005976:	4013      	ands	r3, r2
 8005978:	d000      	beq.n	800597c <HAL_ADC_ConfigChannel+0xf0>
 800597a:	e061      	b.n	8005a40 <HAL_ADC_ConfigChannel+0x1b4>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	4013      	ands	r3, r2
 8005984:	d000      	beq.n	8005988 <HAL_ADC_ConfigChannel+0xfc>
 8005986:	e059      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x1b0>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4013      	ands	r3, r2
 8005992:	d151      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0x1ac>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4013      	ands	r3, r2
 800599e:	d149      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x1a8>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4013      	ands	r3, r2
 80059aa:	d141      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x1a4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d139      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x1a0>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	015b      	lsls	r3, r3, #5
 80059c0:	4013      	ands	r3, r2
 80059c2:	d131      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x19c>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	019b      	lsls	r3, r3, #6
 80059cc:	4013      	ands	r3, r2
 80059ce:	d129      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x198>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	01db      	lsls	r3, r3, #7
 80059d8:	4013      	ands	r3, r2
 80059da:	d121      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x194>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4013      	ands	r3, r2
 80059e6:	d119      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x190>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	025b      	lsls	r3, r3, #9
 80059f0:	4013      	ands	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x18c>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	029b      	lsls	r3, r3, #10
 80059fc:	4013      	ands	r3, r2
 80059fe:	d109      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x188>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	02db      	lsls	r3, r3, #11
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d001      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x184>
 8005a0c:	2312      	movs	r3, #18
 8005a0e:	e024      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a10:	2300      	movs	r3, #0
 8005a12:	e022      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a14:	2311      	movs	r3, #17
 8005a16:	e020      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	e01e      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	e01c      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a20:	230e      	movs	r3, #14
 8005a22:	e01a      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a24:	230d      	movs	r3, #13
 8005a26:	e018      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a28:	230c      	movs	r3, #12
 8005a2a:	e016      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a2c:	230b      	movs	r3, #11
 8005a2e:	e014      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a30:	230a      	movs	r3, #10
 8005a32:	e012      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a34:	2309      	movs	r3, #9
 8005a36:	e010      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a38:	2308      	movs	r3, #8
 8005a3a:	e00e      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a3c:	2307      	movs	r3, #7
 8005a3e:	e00c      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a40:	2306      	movs	r3, #6
 8005a42:	e00a      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a44:	2305      	movs	r3, #5
 8005a46:	e008      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	e006      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e004      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e002      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1ce>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	6852      	ldr	r2, [r2, #4]
 8005a5e:	201f      	movs	r0, #31
 8005a60:	4002      	ands	r2, r0
 8005a62:	4093      	lsls	r3, r2
 8005a64:	000a      	movs	r2, r1
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	089b      	lsrs	r3, r3, #2
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d808      	bhi.n	8005a8e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6859      	ldr	r1, [r3, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	001a      	movs	r2, r3
 8005a8a:	f7ff fb99 	bl	80051c0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6819      	ldr	r1, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	001a      	movs	r2, r3
 8005a9c:	f7ff fbd4 	bl	8005248 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db00      	blt.n	8005aaa <HAL_ADC_ConfigChannel+0x21e>
 8005aa8:	e0bc      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005aaa:	4b50      	ldr	r3, [pc, #320]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7ff fb35 	bl	800511c <LL_ADC_GetCommonPathInternalCh>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4d      	ldr	r2, [pc, #308]	; (8005bf0 <HAL_ADC_ConfigChannel+0x364>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d122      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ac8:	d11d      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	0412      	lsls	r2, r2, #16
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	4a46      	ldr	r2, [pc, #280]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005ad4:	0019      	movs	r1, r3
 8005ad6:	0010      	movs	r0, r2
 8005ad8:	f7ff fb0c 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005adc:	4b45      	ldr	r3, [pc, #276]	; (8005bf4 <HAL_ADC_ConfigChannel+0x368>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4945      	ldr	r1, [pc, #276]	; (8005bf8 <HAL_ADC_ConfigChannel+0x36c>)
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fa fb2a 	bl	800013c <__udivsi3>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	0013      	movs	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	189b      	adds	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005af6:	e002      	b.n	8005afe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f9      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b04:	e08e      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <HAL_ADC_ConfigChannel+0x370>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10e      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	045b      	lsls	r3, r3, #17
 8005b16:	4013      	ands	r3, r2
 8005b18:	d109      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	0452      	lsls	r2, r2, #17
 8005b20:	4313      	orrs	r3, r2
 8005b22:	4a32      	ldr	r2, [pc, #200]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005b24:	0019      	movs	r1, r3
 8005b26:	0010      	movs	r0, r2
 8005b28:	f7ff fae4 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
 8005b2c:	e07a      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_ADC_ConfigChannel+0x374>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d000      	beq.n	8005b3a <HAL_ADC_ConfigChannel+0x2ae>
 8005b38:	e074      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	03db      	lsls	r3, r3, #15
 8005b40:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005b42:	d000      	beq.n	8005b46 <HAL_ADC_ConfigChannel+0x2ba>
 8005b44:	e06e      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	03d2      	lsls	r2, r2, #15
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	4a27      	ldr	r2, [pc, #156]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005b50:	0019      	movs	r1, r3
 8005b52:	0010      	movs	r0, r2
 8005b54:	f7ff face 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
 8005b58:	e064      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d004      	beq.n	8005b70 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b6a:	4a1f      	ldr	r2, [pc, #124]	; (8005be8 <HAL_ADC_ConfigChannel+0x35c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d107      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	0019      	movs	r1, r3
 8005b7a:	0010      	movs	r0, r2
 8005b7c:	f7ff fb51 	bl	8005222 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da4d      	bge.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b88:	4b18      	ldr	r3, [pc, #96]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7ff fac6 	bl	800511c <LL_ADC_GetCommonPathInternalCh>
 8005b90:	0003      	movs	r3, r0
 8005b92:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <HAL_ADC_ConfigChannel+0x364>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_ADC_ConfigChannel+0x378>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	0010      	movs	r0, r2
 8005baa:	f7ff faa3 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
 8005bae:	e039      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <HAL_ADC_ConfigChannel+0x370>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <HAL_ADC_ConfigChannel+0x37c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	0010      	movs	r0, r2
 8005bc6:	f7ff fa95 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
 8005bca:	e02b      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <HAL_ADC_ConfigChannel+0x374>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d126      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <HAL_ADC_ConfigChannel+0x380>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	4a03      	ldr	r2, [pc, #12]	; (8005bec <HAL_ADC_ConfigChannel+0x360>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	0010      	movs	r0, r2
 8005be2:	f7ff fa87 	bl	80050f4 <LL_ADC_SetCommonPathInternalCh>
 8005be6:	e01d      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x398>
 8005be8:	80000004 	.word	0x80000004
 8005bec:	40012708 	.word	0x40012708
 8005bf0:	b0001000 	.word	0xb0001000
 8005bf4:	20000038 	.word	0x20000038
 8005bf8:	00030d40 	.word	0x00030d40
 8005bfc:	b8004000 	.word	0xb8004000
 8005c00:	b4002000 	.word	0xb4002000
 8005c04:	ff7fffff 	.word	0xff7fffff
 8005c08:	feffffff 	.word	0xfeffffff
 8005c0c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	2220      	movs	r2, #32
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2254      	movs	r2, #84	; 0x54
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005c2c:	2317      	movs	r3, #23
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	781b      	ldrb	r3, [r3, #0]
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b006      	add	sp, #24
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)

08005c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7ff fb51 	bl	80052f4 <LL_ADC_IsEnabled>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d000      	beq.n	8005c58 <ADC_Enable+0x1c>
 8005c56:	e069      	b.n	8005d2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4a36      	ldr	r2, [pc, #216]	; (8005d38 <ADC_Enable+0xfc>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00d      	beq.n	8005c80 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	2210      	movs	r2, #16
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	2201      	movs	r2, #1
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e056      	b.n	8005d2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f7ff fb23 	bl	80052d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005c8a:	4b2c      	ldr	r3, [pc, #176]	; (8005d3c <ADC_Enable+0x100>)
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff fa45 	bl	800511c <LL_ADC_GetCommonPathInternalCh>
 8005c92:	0002      	movs	r2, r0
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d00f      	beq.n	8005cbc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c9c:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <ADC_Enable+0x104>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4928      	ldr	r1, [pc, #160]	; (8005d44 <ADC_Enable+0x108>)
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7fa fa4a 	bl	800013c <__udivsi3>
 8005ca8:	0003      	movs	r3, r0
 8005caa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005cac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005cae:	e002      	b.n	8005cb6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f9      	bne.n	8005cb0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7e5b      	ldrb	r3, [r3, #25]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d033      	beq.n	8005d2c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005cc4:	f7ff f9e8 	bl	8005098 <HAL_GetTick>
 8005cc8:	0003      	movs	r3, r0
 8005cca:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ccc:	e027      	b.n	8005d1e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff fb0e 	bl	80052f4 <LL_ADC_IsEnabled>
 8005cd8:	1e03      	subs	r3, r0, #0
 8005cda:	d104      	bne.n	8005ce6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7ff faf5 	bl	80052d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ce6:	f7ff f9d7 	bl	8005098 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d914      	bls.n	8005d1e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d00d      	beq.n	8005d1e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d06:	2210      	movs	r2, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d12:	2201      	movs	r2, #1
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e007      	b.n	8005d2e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2201      	movs	r2, #1
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d1d0      	bne.n	8005cce <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b004      	add	sp, #16
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	80000017 	.word	0x80000017
 8005d3c:	40012708 	.word	0x40012708
 8005d40:	20000038 	.word	0x20000038
 8005d44:	00030d40 	.word	0x00030d40

08005d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	0002      	movs	r2, r0
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5a:	d809      	bhi.n	8005d70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d5c:	1dfb      	adds	r3, r7, #7
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	001a      	movs	r2, r3
 8005d62:	231f      	movs	r3, #31
 8005d64:	401a      	ands	r2, r3
 8005d66:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <__NVIC_EnableIRQ+0x30>)
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4091      	lsls	r1, r2
 8005d6c:	000a      	movs	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000e100 	.word	0xe000e100

08005d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	0002      	movs	r2, r0
 8005d84:	6039      	str	r1, [r7, #0]
 8005d86:	1dfb      	adds	r3, r7, #7
 8005d88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d8a:	1dfb      	adds	r3, r7, #7
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d90:	d828      	bhi.n	8005de4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d92:	4a2f      	ldr	r2, [pc, #188]	; (8005e50 <__NVIC_SetPriority+0xd4>)
 8005d94:	1dfb      	adds	r3, r7, #7
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	089b      	lsrs	r3, r3, #2
 8005d9c:	33c0      	adds	r3, #192	; 0xc0
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	589b      	ldr	r3, [r3, r2]
 8005da2:	1dfa      	adds	r2, r7, #7
 8005da4:	7812      	ldrb	r2, [r2, #0]
 8005da6:	0011      	movs	r1, r2
 8005da8:	2203      	movs	r2, #3
 8005daa:	400a      	ands	r2, r1
 8005dac:	00d2      	lsls	r2, r2, #3
 8005dae:	21ff      	movs	r1, #255	; 0xff
 8005db0:	4091      	lsls	r1, r2
 8005db2:	000a      	movs	r2, r1
 8005db4:	43d2      	mvns	r2, r2
 8005db6:	401a      	ands	r2, r3
 8005db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	019b      	lsls	r3, r3, #6
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	401a      	ands	r2, r3
 8005dc2:	1dfb      	adds	r3, r7, #7
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	2303      	movs	r3, #3
 8005dca:	4003      	ands	r3, r0
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dd0:	481f      	ldr	r0, [pc, #124]	; (8005e50 <__NVIC_SetPriority+0xd4>)
 8005dd2:	1dfb      	adds	r3, r7, #7
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	33c0      	adds	r3, #192	; 0xc0
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005de2:	e031      	b.n	8005e48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <__NVIC_SetPriority+0xd8>)
 8005de6:	1dfb      	adds	r3, r7, #7
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	0019      	movs	r1, r3
 8005dec:	230f      	movs	r3, #15
 8005dee:	400b      	ands	r3, r1
 8005df0:	3b08      	subs	r3, #8
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	3306      	adds	r3, #6
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	1dfa      	adds	r2, r7, #7
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	0011      	movs	r1, r2
 8005e04:	2203      	movs	r2, #3
 8005e06:	400a      	ands	r2, r1
 8005e08:	00d2      	lsls	r2, r2, #3
 8005e0a:	21ff      	movs	r1, #255	; 0xff
 8005e0c:	4091      	lsls	r1, r2
 8005e0e:	000a      	movs	r2, r1
 8005e10:	43d2      	mvns	r2, r2
 8005e12:	401a      	ands	r2, r3
 8005e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	22ff      	movs	r2, #255	; 0xff
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	1dfb      	adds	r3, r7, #7
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	0018      	movs	r0, r3
 8005e24:	2303      	movs	r3, #3
 8005e26:	4003      	ands	r3, r0
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e2c:	4809      	ldr	r0, [pc, #36]	; (8005e54 <__NVIC_SetPriority+0xd8>)
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	001c      	movs	r4, r3
 8005e34:	230f      	movs	r3, #15
 8005e36:	4023      	ands	r3, r4
 8005e38:	3b08      	subs	r3, #8
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	3306      	adds	r3, #6
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	18c3      	adds	r3, r0, r3
 8005e44:	3304      	adds	r3, #4
 8005e46:	601a      	str	r2, [r3, #0]
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b003      	add	sp, #12
 8005e4e:	bd90      	pop	{r4, r7, pc}
 8005e50:	e000e100 	.word	0xe000e100
 8005e54:	e000ed00 	.word	0xe000ed00

08005e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	045b      	lsls	r3, r3, #17
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d301      	bcc.n	8005e70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e010      	b.n	8005e92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <SysTick_Config+0x44>)
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	3a01      	subs	r2, #1
 8005e76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e78:	2301      	movs	r3, #1
 8005e7a:	425b      	negs	r3, r3
 8005e7c:	2103      	movs	r1, #3
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7ff ff7c 	bl	8005d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <SysTick_Config+0x44>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e8a:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <SysTick_Config+0x44>)
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	e000e010 	.word	0xe000e010

08005ea0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	210f      	movs	r1, #15
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	1c02      	adds	r2, r0, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff ff5d 	bl	8005d7c <__NVIC_SetPriority>
}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b004      	add	sp, #16
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	1dfb      	adds	r3, r7, #7
 8005ed4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ed6:	1dfb      	adds	r3, r7, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7ff ff33 	bl	8005d48 <__NVIC_EnableIRQ>
}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b002      	add	sp, #8
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f7ff ffaf 	bl	8005e58 <SysTick_Config>
 8005efa:	0003      	movs	r3, r0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f12:	e147      	b.n	80061a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4091      	lsls	r1, r2
 8005f1e:	000a      	movs	r2, r1
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d100      	bne.n	8005f2c <HAL_GPIO_Init+0x28>
 8005f2a:	e138      	b.n	800619e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2203      	movs	r2, #3
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d005      	beq.n	8005f44 <HAL_GPIO_Init+0x40>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d130      	bne.n	8005fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	2203      	movs	r2, #3
 8005f50:	409a      	lsls	r2, r3
 8005f52:	0013      	movs	r3, r2
 8005f54:	43da      	mvns	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	409a      	lsls	r2, r3
 8005f66:	0013      	movs	r3, r2
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	0013      	movs	r3, r2
 8005f82:	43da      	mvns	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	2201      	movs	r2, #1
 8005f92:	401a      	ands	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	409a      	lsls	r2, r3
 8005f98:	0013      	movs	r3, r2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2203      	movs	r2, #3
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d017      	beq.n	8005fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	0013      	movs	r3, r2
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d123      	bne.n	8006036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	08da      	lsrs	r2, r3, #3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3208      	adds	r2, #8
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	58d3      	ldr	r3, [r2, r3]
 8005ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2207      	movs	r2, #7
 8006000:	4013      	ands	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	220f      	movs	r2, #15
 8006006:	409a      	lsls	r2, r3
 8006008:	0013      	movs	r3, r2
 800600a:	43da      	mvns	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2107      	movs	r1, #7
 800601a:	400b      	ands	r3, r1
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	409a      	lsls	r2, r3
 8006020:	0013      	movs	r3, r2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	08da      	lsrs	r2, r3, #3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3208      	adds	r2, #8
 8006030:	0092      	lsls	r2, r2, #2
 8006032:	6939      	ldr	r1, [r7, #16]
 8006034:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	2203      	movs	r2, #3
 8006042:	409a      	lsls	r2, r3
 8006044:	0013      	movs	r3, r2
 8006046:	43da      	mvns	r2, r3
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	401a      	ands	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	409a      	lsls	r2, r3
 800605c:	0013      	movs	r3, r2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	23c0      	movs	r3, #192	; 0xc0
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	4013      	ands	r3, r2
 8006074:	d100      	bne.n	8006078 <HAL_GPIO_Init+0x174>
 8006076:	e092      	b.n	800619e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006078:	4a50      	ldr	r2, [pc, #320]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	3318      	adds	r3, #24
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	589b      	ldr	r3, [r3, r2]
 8006084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2203      	movs	r2, #3
 800608a:	4013      	ands	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	220f      	movs	r2, #15
 8006090:	409a      	lsls	r2, r3
 8006092:	0013      	movs	r3, r2
 8006094:	43da      	mvns	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4013      	ands	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	23a0      	movs	r3, #160	; 0xa0
 80060a0:	05db      	lsls	r3, r3, #23
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d013      	beq.n	80060ce <HAL_GPIO_Init+0x1ca>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a45      	ldr	r2, [pc, #276]	; (80061c0 <HAL_GPIO_Init+0x2bc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00d      	beq.n	80060ca <HAL_GPIO_Init+0x1c6>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a44      	ldr	r2, [pc, #272]	; (80061c4 <HAL_GPIO_Init+0x2c0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <HAL_GPIO_Init+0x1c2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a43      	ldr	r2, [pc, #268]	; (80061c8 <HAL_GPIO_Init+0x2c4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <HAL_GPIO_Init+0x1be>
 80060be:	2303      	movs	r3, #3
 80060c0:	e006      	b.n	80060d0 <HAL_GPIO_Init+0x1cc>
 80060c2:	2305      	movs	r3, #5
 80060c4:	e004      	b.n	80060d0 <HAL_GPIO_Init+0x1cc>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e002      	b.n	80060d0 <HAL_GPIO_Init+0x1cc>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_GPIO_Init+0x1cc>
 80060ce:	2300      	movs	r3, #0
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	2103      	movs	r1, #3
 80060d4:	400a      	ands	r2, r1
 80060d6:	00d2      	lsls	r2, r2, #3
 80060d8:	4093      	lsls	r3, r2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80060e0:	4936      	ldr	r1, [pc, #216]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	3318      	adds	r3, #24
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060ee:	4b33      	ldr	r3, [pc, #204]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	43da      	mvns	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	035b      	lsls	r3, r3, #13
 8006106:	4013      	ands	r3, r2
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006112:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006118:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	43da      	mvns	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4013      	ands	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	039b      	lsls	r3, r3, #14
 8006130:	4013      	ands	r3, r2
 8006132:	d003      	beq.n	800613c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006142:	4a1e      	ldr	r2, [pc, #120]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 8006144:	2384      	movs	r3, #132	; 0x84
 8006146:	58d3      	ldr	r3, [r2, r3]
 8006148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	43da      	mvns	r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	029b      	lsls	r3, r3, #10
 800615c:	4013      	ands	r3, r2
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006168:	4914      	ldr	r1, [pc, #80]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 800616a:	2284      	movs	r2, #132	; 0x84
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006170:	4a12      	ldr	r2, [pc, #72]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	58d3      	ldr	r3, [r2, r3]
 8006176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	43da      	mvns	r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	025b      	lsls	r3, r3, #9
 800618a:	4013      	ands	r3, r2
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006196:	4909      	ldr	r1, [pc, #36]	; (80061bc <HAL_GPIO_Init+0x2b8>)
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3301      	adds	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	40da      	lsrs	r2, r3
 80061ac:	1e13      	subs	r3, r2, #0
 80061ae:	d000      	beq.n	80061b2 <HAL_GPIO_Init+0x2ae>
 80061b0:	e6b0      	b.n	8005f14 <HAL_GPIO_Init+0x10>
  }
}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b006      	add	sp, #24
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40021800 	.word	0x40021800
 80061c0:	50000400 	.word	0x50000400
 80061c4:	50000800 	.word	0x50000800
 80061c8:	50000c00 	.word	0x50000c00

080061cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	000a      	movs	r2, r1
 80061d6:	1cbb      	adds	r3, r7, #2
 80061d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	1cba      	adds	r2, r7, #2
 80061e0:	8812      	ldrh	r2, [r2, #0]
 80061e2:	4013      	ands	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80061e6:	230f      	movs	r3, #15
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e003      	b.n	80061f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061f0:	230f      	movs	r3, #15
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80061f8:	230f      	movs	r3, #15
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	781b      	ldrb	r3, [r3, #0]
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b004      	add	sp, #16
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	0008      	movs	r0, r1
 8006210:	0011      	movs	r1, r2
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	1c02      	adds	r2, r0, #0
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	1c7b      	adds	r3, r7, #1
 800621a:	1c0a      	adds	r2, r1, #0
 800621c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800621e:	1c7b      	adds	r3, r7, #1
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006226:	1cbb      	adds	r3, r7, #2
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800622e:	e003      	b.n	8006238 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006230:	1cbb      	adds	r3, r7, #2
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	0002      	movs	r2, r0
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800624c:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	1dba      	adds	r2, r7, #6
 8006252:	8812      	ldrh	r2, [r2, #0]
 8006254:	4013      	ands	r3, r2
 8006256:	d008      	beq.n	800626a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800625a:	1dba      	adds	r2, r7, #6
 800625c:	8812      	ldrh	r2, [r2, #0]
 800625e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006260:	1dbb      	adds	r3, r7, #6
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	0018      	movs	r0, r3
 8006266:	f000 f815 	bl	8006294 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	1dba      	adds	r2, r7, #6
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	4013      	ands	r3, r2
 8006274:	d008      	beq.n	8006288 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006278:	1dba      	adds	r2, r7, #6
 800627a:	8812      	ldrh	r2, [r2, #0]
 800627c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800627e:	1dbb      	adds	r3, r7, #6
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	0018      	movs	r0, r3
 8006284:	f7fd fd98 	bl	8003db8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006288:	46c0      	nop			; (mov r8, r8)
 800628a:	46bd      	mov	sp, r7
 800628c:	b002      	add	sp, #8
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021800 	.word	0x40021800

08006294 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	0002      	movs	r2, r0
 800629c:	1dbb      	adds	r3, r7, #6
 800629e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b002      	add	sp, #8
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e082      	b.n	80063c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2241      	movs	r2, #65	; 0x41
 80062be:	5c9b      	ldrb	r3, [r3, r2]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2240      	movs	r2, #64	; 0x40
 80062ca:	2100      	movs	r1, #0
 80062cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fd f9a9 	bl	8003628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2241      	movs	r2, #65	; 0x41
 80062da:	2124      	movs	r1, #36	; 0x24
 80062dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2101      	movs	r1, #1
 80062ea:	438a      	bics	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4934      	ldr	r1, [pc, #208]	; (80063c8 <HAL_I2C_Init+0x120>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4931      	ldr	r1, [pc, #196]	; (80063cc <HAL_I2C_Init+0x124>)
 8006308:	400a      	ands	r2, r1
 800630a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d108      	bne.n	8006326 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2180      	movs	r1, #128	; 0x80
 800631e:	0209      	lsls	r1, r1, #8
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	e007      	b.n	8006336 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2184      	movs	r1, #132	; 0x84
 8006330:	0209      	lsls	r1, r1, #8
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d104      	bne.n	8006348 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	0112      	lsls	r2, r2, #4
 8006346:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	491f      	ldr	r1, [pc, #124]	; (80063d0 <HAL_I2C_Init+0x128>)
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	491a      	ldr	r1, [pc, #104]	; (80063cc <HAL_I2C_Init+0x124>)
 8006364:	400a      	ands	r2, r1
 8006366:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	431a      	orrs	r2, r3
 8006372:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69d9      	ldr	r1, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2101      	movs	r1, #1
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2241      	movs	r2, #65	; 0x41
 80063ac:	2120      	movs	r1, #32
 80063ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2242      	movs	r2, #66	; 0x42
 80063ba:	2100      	movs	r1, #0
 80063bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	0018      	movs	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	f0ffffff 	.word	0xf0ffffff
 80063cc:	ffff7fff 	.word	0xffff7fff
 80063d0:	02008000 	.word	0x02008000

080063d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b089      	sub	sp, #36	; 0x24
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	000c      	movs	r4, r1
 80063de:	0010      	movs	r0, r2
 80063e0:	0019      	movs	r1, r3
 80063e2:	230a      	movs	r3, #10
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	1c22      	adds	r2, r4, #0
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	2308      	movs	r3, #8
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	1c02      	adds	r2, r0, #0
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	1dbb      	adds	r3, r7, #6
 80063f4:	1c0a      	adds	r2, r1, #0
 80063f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2241      	movs	r2, #65	; 0x41
 80063fc:	5c9b      	ldrb	r3, [r3, r2]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b20      	cmp	r3, #32
 8006402:	d000      	beq.n	8006406 <HAL_I2C_Mem_Write+0x32>
 8006404:	e10c      	b.n	8006620 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <HAL_I2C_Mem_Write+0x42>
 800640c:	232c      	movs	r3, #44	; 0x2c
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e0ff      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	5c9b      	ldrb	r3, [r3, r2]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_I2C_Mem_Write+0x5c>
 800642c:	2302      	movs	r3, #2
 800642e:	e0f8      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2240      	movs	r2, #64	; 0x40
 8006434:	2101      	movs	r1, #1
 8006436:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006438:	f7fe fe2e 	bl	8005098 <HAL_GetTick>
 800643c:	0003      	movs	r3, r0
 800643e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	0219      	lsls	r1, r3, #8
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	2319      	movs	r3, #25
 800644c:	2201      	movs	r2, #1
 800644e:	f000 f975 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0e3      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2241      	movs	r2, #65	; 0x41
 800645e:	2121      	movs	r1, #33	; 0x21
 8006460:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2242      	movs	r2, #66	; 0x42
 8006466:	2140      	movs	r1, #64	; 0x40
 8006468:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	222c      	movs	r2, #44	; 0x2c
 800647a:	18ba      	adds	r2, r7, r2
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006486:	1dbb      	adds	r3, r7, #6
 8006488:	881c      	ldrh	r4, [r3, #0]
 800648a:	2308      	movs	r3, #8
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	230a      	movs	r3, #10
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	8819      	ldrh	r1, [r3, #0]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	0023      	movs	r3, r4
 80064a2:	f000 f8c5 	bl	8006630 <I2C_RequestMemoryWrite>
 80064a6:	1e03      	subs	r3, r0, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2240      	movs	r2, #64	; 0x40
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e0b5      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2bff      	cmp	r3, #255	; 0xff
 80064be:	d911      	bls.n	80064e4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	045c      	lsls	r4, r3, #17
 80064d0:	230a      	movs	r3, #10
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	8819      	ldrh	r1, [r3, #0]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	0023      	movs	r3, r4
 80064de:	f000 fae7 	bl	8006ab0 <I2C_TransferConfig>
 80064e2:	e012      	b.n	800650a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	049c      	lsls	r4, r3, #18
 80064f8:	230a      	movs	r3, #10
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	8819      	ldrh	r1, [r3, #0]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	2300      	movs	r3, #0
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0023      	movs	r3, r4
 8006506:	f000 fad3 	bl	8006ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	0018      	movs	r0, r3
 8006512:	f000 f952 	bl	80067ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006516:	1e03      	subs	r3, r0, #0
 8006518:	d001      	beq.n	800651e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e081      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03a      	beq.n	80065ce <HAL_I2C_Mem_Write+0x1fa>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d136      	bne.n	80065ce <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	0013      	movs	r3, r2
 800656a:	2200      	movs	r2, #0
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	f000 f8e5 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e053      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2bff      	cmp	r3, #255	; 0xff
 8006582:	d911      	bls.n	80065a8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ff      	movs	r2, #255	; 0xff
 8006588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	b2da      	uxtb	r2, r3
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	045c      	lsls	r4, r3, #17
 8006594:	230a      	movs	r3, #10
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	8819      	ldrh	r1, [r3, #0]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	0023      	movs	r3, r4
 80065a2:	f000 fa85 	bl	8006ab0 <I2C_TransferConfig>
 80065a6:	e012      	b.n	80065ce <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	049c      	lsls	r4, r3, #18
 80065bc:	230a      	movs	r3, #10
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	8819      	ldrh	r1, [r3, #0]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	2300      	movs	r3, #0
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	0023      	movs	r3, r4
 80065ca:	f000 fa71 	bl	8006ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d198      	bne.n	800650a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f92a 	bl	8006838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e01a      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2220      	movs	r2, #32
 80065f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	490b      	ldr	r1, [pc, #44]	; (800662c <HAL_I2C_Mem_Write+0x258>)
 8006600:	400a      	ands	r2, r1
 8006602:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2241      	movs	r2, #65	; 0x41
 8006608:	2120      	movs	r1, #32
 800660a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2242      	movs	r2, #66	; 0x42
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	2100      	movs	r1, #0
 800661a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
  }
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b007      	add	sp, #28
 8006628:	bd90      	pop	{r4, r7, pc}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	fe00e800 	.word	0xfe00e800

08006630 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006630:	b5b0      	push	{r4, r5, r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	000c      	movs	r4, r1
 800663a:	0010      	movs	r0, r2
 800663c:	0019      	movs	r1, r3
 800663e:	250a      	movs	r5, #10
 8006640:	197b      	adds	r3, r7, r5
 8006642:	1c22      	adds	r2, r4, #0
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	2308      	movs	r3, #8
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	1c02      	adds	r2, r0, #0
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	1dbb      	adds	r3, r7, #6
 8006650:	1c0a      	adds	r2, r1, #0
 8006652:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006654:	1dbb      	adds	r3, r7, #6
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	2380      	movs	r3, #128	; 0x80
 800665c:	045c      	lsls	r4, r3, #17
 800665e:	197b      	adds	r3, r7, r5
 8006660:	8819      	ldrh	r1, [r3, #0]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <I2C_RequestMemoryWrite+0xc4>)
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	0023      	movs	r3, r4
 800666a:	f000 fa21 	bl	8006ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	6a39      	ldr	r1, [r7, #32]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f8a0 	bl	80067ba <I2C_WaitOnTXISFlagUntilTimeout>
 800667a:	1e03      	subs	r3, r0, #0
 800667c:	d001      	beq.n	8006682 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e033      	b.n	80066ea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006682:	1dbb      	adds	r3, r7, #6
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d107      	bne.n	800669a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800668a:	2308      	movs	r3, #8
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
 8006698:	e019      	b.n	80066ce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800669a:	2308      	movs	r3, #8
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ae:	6a39      	ldr	r1, [r7, #32]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 f881 	bl	80067ba <I2C_WaitOnTXISFlagUntilTimeout>
 80066b8:	1e03      	subs	r3, r0, #0
 80066ba:	d001      	beq.n	80066c0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e014      	b.n	80066ea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066c0:	2308      	movs	r3, #8
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	0013      	movs	r3, r2
 80066d8:	2200      	movs	r2, #0
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	f000 f82e 	bl	800673c <I2C_WaitOnFlagUntilTimeout>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d001      	beq.n	80066e8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	80002000 	.word	0x80002000

080066f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d103      	bne.n	8006716 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2201      	movs	r2, #1
 800671e:	4013      	ands	r3, r2
 8006720:	2b01      	cmp	r3, #1
 8006722:	d007      	beq.n	8006734 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2101      	movs	r1, #1
 8006730:	430a      	orrs	r2, r1
 8006732:	619a      	str	r2, [r3, #24]
  }
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	1dfb      	adds	r3, r7, #7
 800674a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674c:	e021      	b.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	d01e      	beq.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006754:	f7fe fca0 	bl	8005098 <HAL_GetTick>
 8006758:	0002      	movs	r2, r0
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d113      	bne.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	2220      	movs	r2, #32
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2241      	movs	r2, #65	; 0x41
 800677a:	2120      	movs	r1, #32
 800677c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2242      	movs	r2, #66	; 0x42
 8006782:	2100      	movs	r1, #0
 8006784:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	2100      	movs	r1, #0
 800678c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e00f      	b.n	80067b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	425a      	negs	r2, r3
 80067a2:	4153      	adcs	r3, r2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	001a      	movs	r2, r3
 80067a8:	1dfb      	adds	r3, r7, #7
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d0ce      	beq.n	800674e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b004      	add	sp, #16
 80067b8:	bd80      	pop	{r7, pc}

080067ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067c6:	e02b      	b.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f86e 	bl	80068b0 <I2C_IsErrorOccurred>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e029      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	3301      	adds	r3, #1
 80067e0:	d01e      	beq.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fe fc59 	bl	8005098 <HAL_GetTick>
 80067e6:	0002      	movs	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d113      	bne.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	2220      	movs	r2, #32
 80067fe:	431a      	orrs	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2241      	movs	r2, #65	; 0x41
 8006808:	2120      	movs	r1, #32
 800680a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2242      	movs	r2, #66	; 0x42
 8006810:	2100      	movs	r1, #0
 8006812:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2240      	movs	r2, #64	; 0x40
 8006818:	2100      	movs	r1, #0
 800681a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e007      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2202      	movs	r2, #2
 8006828:	4013      	ands	r3, r2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d1cc      	bne.n	80067c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	0018      	movs	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	b004      	add	sp, #16
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006844:	e028      	b.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	0018      	movs	r0, r3
 800684e:	f000 f82f 	bl	80068b0 <I2C_IsErrorOccurred>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d001      	beq.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e026      	b.n	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fe fc1d 	bl	8005098 <HAL_GetTick>
 800685e:	0002      	movs	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d113      	bne.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	2220      	movs	r2, #32
 8006876:	431a      	orrs	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2241      	movs	r2, #65	; 0x41
 8006880:	2120      	movs	r1, #32
 8006882:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2242      	movs	r2, #66	; 0x42
 8006888:	2100      	movs	r1, #0
 800688a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e007      	b.n	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2220      	movs	r2, #32
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d1cf      	bne.n	8006846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b004      	add	sp, #16
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b08b      	sub	sp, #44	; 0x2c
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2327      	movs	r3, #39	; 0x27
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2210      	movs	r2, #16
 80068d8:	4013      	ands	r3, r2
 80068da:	d100      	bne.n	80068de <I2C_IsErrorOccurred+0x2e>
 80068dc:	e082      	b.n	80069e4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2210      	movs	r2, #16
 80068e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068e6:	e060      	b.n	80069aa <I2C_IsErrorOccurred+0xfa>
 80068e8:	2427      	movs	r4, #39	; 0x27
 80068ea:	193b      	adds	r3, r7, r4
 80068ec:	193a      	adds	r2, r7, r4
 80068ee:	7812      	ldrb	r2, [r2, #0]
 80068f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3301      	adds	r3, #1
 80068f6:	d058      	beq.n	80069aa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068f8:	f7fe fbce 	bl	8005098 <HAL_GetTick>
 80068fc:	0002      	movs	r2, r0
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	d306      	bcc.n	8006916 <I2C_IsErrorOccurred+0x66>
 8006908:	193b      	adds	r3, r7, r4
 800690a:	193a      	adds	r2, r7, r4
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d149      	bne.n	80069aa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	2380      	movs	r3, #128	; 0x80
 800691e:	01db      	lsls	r3, r3, #7
 8006920:	4013      	ands	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006924:	2013      	movs	r0, #19
 8006926:	183b      	adds	r3, r7, r0
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	2142      	movs	r1, #66	; 0x42
 800692c:	5c52      	ldrb	r2, [r2, r1]
 800692e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	401a      	ands	r2, r3
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	429a      	cmp	r2, r3
 8006942:	d126      	bne.n	8006992 <I2C_IsErrorOccurred+0xe2>
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	01db      	lsls	r3, r3, #7
 800694a:	429a      	cmp	r2, r3
 800694c:	d021      	beq.n	8006992 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800694e:	183b      	adds	r3, r7, r0
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b20      	cmp	r3, #32
 8006954:	d01d      	beq.n	8006992 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	01c9      	lsls	r1, r1, #7
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006968:	f7fe fb96 	bl	8005098 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006970:	e00f      	b.n	8006992 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006972:	f7fe fb91 	bl	8005098 <HAL_GetTick>
 8006976:	0002      	movs	r2, r0
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b19      	cmp	r3, #25
 800697e:	d908      	bls.n	8006992 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2220      	movs	r2, #32
 8006984:	4313      	orrs	r3, r2
 8006986:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006988:	2327      	movs	r3, #39	; 0x27
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]

              break;
 8006990:	e00b      	b.n	80069aa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2220      	movs	r2, #32
 800699a:	4013      	ands	r3, r2
 800699c:	2127      	movs	r1, #39	; 0x27
 800699e:	187a      	adds	r2, r7, r1
 80069a0:	1879      	adds	r1, r7, r1
 80069a2:	7809      	ldrb	r1, [r1, #0]
 80069a4:	7011      	strb	r1, [r2, #0]
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d1e3      	bne.n	8006972 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2220      	movs	r2, #32
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d004      	beq.n	80069c2 <I2C_IsErrorOccurred+0x112>
 80069b8:	2327      	movs	r3, #39	; 0x27
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d092      	beq.n	80068e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069c2:	2327      	movs	r3, #39	; 0x27
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2220      	movs	r2, #32
 80069d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2204      	movs	r2, #4
 80069d8:	4313      	orrs	r3, r2
 80069da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069dc:	2327      	movs	r3, #39	; 0x27
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	2380      	movs	r3, #128	; 0x80
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4013      	ands	r3, r2
 80069f4:	d00c      	beq.n	8006a10 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2201      	movs	r2, #1
 80069fa:	4313      	orrs	r3, r2
 80069fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2280      	movs	r2, #128	; 0x80
 8006a04:	0052      	lsls	r2, r2, #1
 8006a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a08:	2327      	movs	r3, #39	; 0x27
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	2380      	movs	r3, #128	; 0x80
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4013      	ands	r3, r2
 8006a18:	d00c      	beq.n	8006a34 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2280      	movs	r2, #128	; 0x80
 8006a28:	00d2      	lsls	r2, r2, #3
 8006a2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a2c:	2327      	movs	r3, #39	; 0x27
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	2380      	movs	r3, #128	; 0x80
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d00c      	beq.n	8006a58 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4313      	orrs	r3, r2
 8006a44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	0092      	lsls	r2, r2, #2
 8006a4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a50:	2327      	movs	r3, #39	; 0x27
 8006a52:	18fb      	adds	r3, r7, r3
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006a58:	2327      	movs	r3, #39	; 0x27
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01d      	beq.n	8006a9e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff fe47 	bl	80066f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	490d      	ldr	r1, [pc, #52]	; (8006aac <I2C_IsErrorOccurred+0x1fc>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2241      	movs	r2, #65	; 0x41
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2242      	movs	r2, #66	; 0x42
 8006a92:	2100      	movs	r1, #0
 8006a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2240      	movs	r2, #64	; 0x40
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006a9e:	2327      	movs	r3, #39	; 0x27
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	781b      	ldrb	r3, [r3, #0]
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b00b      	add	sp, #44	; 0x2c
 8006aaa:	bd90      	pop	{r4, r7, pc}
 8006aac:	fe00e800 	.word	0xfe00e800

08006ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	0008      	movs	r0, r1
 8006aba:	0011      	movs	r1, r2
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	240a      	movs	r4, #10
 8006ac0:	193b      	adds	r3, r7, r4
 8006ac2:	1c02      	adds	r2, r0, #0
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	2009      	movs	r0, #9
 8006ac8:	183b      	adds	r3, r7, r0
 8006aca:	1c0a      	adds	r2, r1, #0
 8006acc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ace:	193b      	adds	r3, r7, r4
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	059b      	lsls	r3, r3, #22
 8006ad4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ad6:	183b      	adds	r3, r7, r0
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	0419      	lsls	r1, r3, #16
 8006adc:	23ff      	movs	r3, #255	; 0xff
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ae2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	4313      	orrs	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afa:	0d51      	lsrs	r1, r2, #21
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	00d2      	lsls	r2, r2, #3
 8006b00:	400a      	ands	r2, r1
 8006b02:	4907      	ldr	r1, [pc, #28]	; (8006b20 <I2C_TransferConfig+0x70>)
 8006b04:	430a      	orrs	r2, r1
 8006b06:	43d2      	mvns	r2, r2
 8006b08:	401a      	ands	r2, r3
 8006b0a:	0011      	movs	r1, r2
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b007      	add	sp, #28
 8006b1c:	bd90      	pop	{r4, r7, pc}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	03ff63ff 	.word	0x03ff63ff

08006b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2241      	movs	r2, #65	; 0x41
 8006b32:	5c9b      	ldrb	r3, [r3, r2]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d138      	bne.n	8006bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	5c9b      	ldrb	r3, [r3, r2]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e032      	b.n	8006bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2241      	movs	r2, #65	; 0x41
 8006b54:	2124      	movs	r1, #36	; 0x24
 8006b56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2101      	movs	r1, #1
 8006b64:	438a      	bics	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4911      	ldr	r1, [pc, #68]	; (8006bb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006b74:	400a      	ands	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6819      	ldr	r1, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2101      	movs	r1, #1
 8006b94:	430a      	orrs	r2, r1
 8006b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2241      	movs	r2, #65	; 0x41
 8006b9c:	2120      	movs	r1, #32
 8006b9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b002      	add	sp, #8
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	ffffefff 	.word	0xffffefff

08006bbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2241      	movs	r2, #65	; 0x41
 8006bca:	5c9b      	ldrb	r3, [r3, r2]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d139      	bne.n	8006c46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2240      	movs	r2, #64	; 0x40
 8006bd6:	5c9b      	ldrb	r3, [r3, r2]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e033      	b.n	8006c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2240      	movs	r2, #64	; 0x40
 8006be4:	2101      	movs	r1, #1
 8006be6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2241      	movs	r2, #65	; 0x41
 8006bec:	2124      	movs	r1, #36	; 0x24
 8006bee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	438a      	bics	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2241      	movs	r2, #65	; 0x41
 8006c36:	2120      	movs	r1, #32
 8006c38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2240      	movs	r2, #64	; 0x40
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b004      	add	sp, #16
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	fffff0ff 	.word	0xfffff0ff

08006c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	0019      	movs	r1, r3
 8006c66:	4b17      	ldr	r3, [pc, #92]	; (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d11f      	bne.n	8006cb8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	0013      	movs	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7f9 fa58 	bl	800013c <__udivsi3>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c92:	e008      	b.n	8006ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e001      	b.n	8006ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e009      	b.n	8006cba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	401a      	ands	r2, r3
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d0ed      	beq.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b004      	add	sp, #16
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	fffff9ff 	.word	0xfffff9ff
 8006ccc:	20000038 	.word	0x20000038
 8006cd0:	000f4240 	.word	0x000f4240

08006cd4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006cd8:	4b03      	ldr	r3, [pc, #12]	; (8006ce8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	23e0      	movs	r3, #224	; 0xe0
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4013      	ands	r3, r2
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000

08006cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e2fe      	b.n	80072fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2201      	movs	r2, #1
 8006d04:	4013      	ands	r3, r2
 8006d06:	d100      	bne.n	8006d0a <HAL_RCC_OscConfig+0x1e>
 8006d08:	e07c      	b.n	8006e04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0a:	4bc3      	ldr	r3, [pc, #780]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2238      	movs	r2, #56	; 0x38
 8006d10:	4013      	ands	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d14:	4bc0      	ldr	r3, [pc, #768]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d102      	bne.n	8006d2a <HAL_RCC_OscConfig+0x3e>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d002      	beq.n	8006d30 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d10b      	bne.n	8006d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d30:	4bb9      	ldr	r3, [pc, #740]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d062      	beq.n	8006e02 <HAL_RCC_OscConfig+0x116>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d15e      	bne.n	8006e02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e2d9      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	025b      	lsls	r3, r3, #9
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d107      	bne.n	8006d64 <HAL_RCC_OscConfig+0x78>
 8006d54:	4bb0      	ldr	r3, [pc, #704]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4baf      	ldr	r3, [pc, #700]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	0249      	lsls	r1, r1, #9
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e020      	b.n	8006da6 <HAL_RCC_OscConfig+0xba>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	23a0      	movs	r3, #160	; 0xa0
 8006d6a:	02db      	lsls	r3, r3, #11
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10e      	bne.n	8006d8e <HAL_RCC_OscConfig+0xa2>
 8006d70:	4ba9      	ldr	r3, [pc, #676]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4ba8      	ldr	r3, [pc, #672]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	02c9      	lsls	r1, r1, #11
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	4ba6      	ldr	r3, [pc, #664]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4ba5      	ldr	r3, [pc, #660]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	0249      	lsls	r1, r1, #9
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCC_OscConfig+0xba>
 8006d8e:	4ba2      	ldr	r3, [pc, #648]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4ba1      	ldr	r3, [pc, #644]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d94:	49a1      	ldr	r1, [pc, #644]	; (800701c <HAL_RCC_OscConfig+0x330>)
 8006d96:	400a      	ands	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	4b9f      	ldr	r3, [pc, #636]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b9e      	ldr	r3, [pc, #632]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006da0:	499f      	ldr	r1, [pc, #636]	; (8007020 <HAL_RCC_OscConfig+0x334>)
 8006da2:	400a      	ands	r2, r1
 8006da4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d014      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fe f973 	bl	8005098 <HAL_GetTick>
 8006db2:	0003      	movs	r3, r0
 8006db4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db8:	f7fe f96e 	bl	8005098 <HAL_GetTick>
 8006dbc:	0002      	movs	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e298      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dca:	4b93      	ldr	r3, [pc, #588]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0xcc>
 8006dd6:	e015      	b.n	8006e04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fe f95e 	bl	8005098 <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de2:	f7fe f959 	bl	8005098 <HAL_GetTick>
 8006de6:	0002      	movs	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b64      	cmp	r3, #100	; 0x64
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e283      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006df4:	4b88      	ldr	r3, [pc, #544]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d1f0      	bne.n	8006de2 <HAL_RCC_OscConfig+0xf6>
 8006e00:	e000      	b.n	8006e04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d100      	bne.n	8006e10 <HAL_RCC_OscConfig+0x124>
 8006e0e:	e099      	b.n	8006f44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e10:	4b81      	ldr	r3, [pc, #516]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2238      	movs	r2, #56	; 0x38
 8006e16:	4013      	ands	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e1a:	4b7f      	ldr	r3, [pc, #508]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2203      	movs	r2, #3
 8006e20:	4013      	ands	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d102      	bne.n	8006e30 <HAL_RCC_OscConfig+0x144>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d002      	beq.n	8006e36 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d135      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e36:	4b78      	ldr	r3, [pc, #480]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	2380      	movs	r3, #128	; 0x80
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	4013      	ands	r3, r2
 8006e40:	d005      	beq.n	8006e4e <HAL_RCC_OscConfig+0x162>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e256      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4e:	4b72      	ldr	r3, [pc, #456]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4a74      	ldr	r2, [pc, #464]	; (8007024 <HAL_RCC_OscConfig+0x338>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	0019      	movs	r1, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	021a      	lsls	r2, r3, #8
 8006e5e:	4b6e      	ldr	r3, [pc, #440]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d112      	bne.n	8006e90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006e6a:	4b6b      	ldr	r3, [pc, #428]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a6e      	ldr	r2, [pc, #440]	; (8007028 <HAL_RCC_OscConfig+0x33c>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	0019      	movs	r1, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	4b67      	ldr	r3, [pc, #412]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006e7e:	4b66      	ldr	r3, [pc, #408]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	0adb      	lsrs	r3, r3, #11
 8006e84:	2207      	movs	r2, #7
 8006e86:	4013      	ands	r3, r2
 8006e88:	4a68      	ldr	r2, [pc, #416]	; (800702c <HAL_RCC_OscConfig+0x340>)
 8006e8a:	40da      	lsrs	r2, r3
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <HAL_RCC_OscConfig+0x344>)
 8006e8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e90:	4b68      	ldr	r3, [pc, #416]	; (8007034 <HAL_RCC_OscConfig+0x348>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7fe f8a3 	bl	8004fe0 <HAL_InitTick>
 8006e9a:	1e03      	subs	r3, r0, #0
 8006e9c:	d051      	beq.n	8006f42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e22c      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d030      	beq.n	8006f0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006eaa:	4b5b      	ldr	r3, [pc, #364]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5e      	ldr	r2, [pc, #376]	; (8007028 <HAL_RCC_OscConfig+0x33c>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	4b57      	ldr	r3, [pc, #348]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006ebe:	4b56      	ldr	r3, [pc, #344]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b55      	ldr	r3, [pc, #340]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	0049      	lsls	r1, r1, #1
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fe f8e4 	bl	8005098 <HAL_GetTick>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ed6:	f7fe f8df 	bl	8005098 <HAL_GetTick>
 8006eda:	0002      	movs	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e209      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ee8:	4b4b      	ldr	r3, [pc, #300]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d0f0      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef4:	4b48      	ldr	r3, [pc, #288]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4a4a      	ldr	r2, [pc, #296]	; (8007024 <HAL_RCC_OscConfig+0x338>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	0019      	movs	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	021a      	lsls	r2, r3, #8
 8006f04:	4b44      	ldr	r3, [pc, #272]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	e01b      	b.n	8006f44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006f0c:	4b42      	ldr	r3, [pc, #264]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	4b41      	ldr	r3, [pc, #260]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f12:	4949      	ldr	r1, [pc, #292]	; (8007038 <HAL_RCC_OscConfig+0x34c>)
 8006f14:	400a      	ands	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f18:	f7fe f8be 	bl	8005098 <HAL_GetTick>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f22:	f7fe f8b9 	bl	8005098 <HAL_GetTick>
 8006f26:	0002      	movs	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e1e3      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f34:	4b38      	ldr	r3, [pc, #224]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCC_OscConfig+0x236>
 8006f40:	e000      	b.n	8006f44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2208      	movs	r2, #8
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d047      	beq.n	8006fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006f4e:	4b32      	ldr	r3, [pc, #200]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2238      	movs	r2, #56	; 0x38
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b18      	cmp	r3, #24
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5e:	2202      	movs	r2, #2
 8006f60:	4013      	ands	r3, r2
 8006f62:	d03c      	beq.n	8006fde <HAL_RCC_OscConfig+0x2f2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d138      	bne.n	8006fde <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e1c5      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d019      	beq.n	8006fac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006f78:	4b27      	ldr	r3, [pc, #156]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006f7e:	2101      	movs	r1, #1
 8006f80:	430a      	orrs	r2, r1
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fe f888 	bl	8005098 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f8e:	f7fe f883 	bl	8005098 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e1ad      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d0f1      	beq.n	8006f8e <HAL_RCC_OscConfig+0x2a2>
 8006faa:	e018      	b.n	8006fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006fac:	4b1a      	ldr	r3, [pc, #104]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006fae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	438a      	bics	r2, r1
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fe f86e 	bl	8005098 <HAL_GetTick>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fc2:	f7fe f869 	bl	8005098 <HAL_GetTick>
 8006fc6:	0002      	movs	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e193      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd8:	2202      	movs	r2, #2
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d1f1      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d100      	bne.n	8006fea <HAL_RCC_OscConfig+0x2fe>
 8006fe8:	e0c6      	b.n	8007178 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fea:	231f      	movs	r3, #31
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006ff2:	4b09      	ldr	r3, [pc, #36]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2238      	movs	r2, #56	; 0x38
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d11e      	bne.n	800703c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <HAL_RCC_OscConfig+0x32c>)
 8007000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007002:	2202      	movs	r2, #2
 8007004:	4013      	ands	r3, r2
 8007006:	d100      	bne.n	800700a <HAL_RCC_OscConfig+0x31e>
 8007008:	e0b6      	b.n	8007178 <HAL_RCC_OscConfig+0x48c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d000      	beq.n	8007014 <HAL_RCC_OscConfig+0x328>
 8007012:	e0b1      	b.n	8007178 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e171      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
 8007018:	40021000 	.word	0x40021000
 800701c:	fffeffff 	.word	0xfffeffff
 8007020:	fffbffff 	.word	0xfffbffff
 8007024:	ffff80ff 	.word	0xffff80ff
 8007028:	ffffc7ff 	.word	0xffffc7ff
 800702c:	00f42400 	.word	0x00f42400
 8007030:	20000038 	.word	0x20000038
 8007034:	2000003c 	.word	0x2000003c
 8007038:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800703c:	4bb1      	ldr	r3, [pc, #708]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800703e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	055b      	lsls	r3, r3, #21
 8007044:	4013      	ands	r3, r2
 8007046:	d101      	bne.n	800704c <HAL_RCC_OscConfig+0x360>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x362>
 800704c:	2300      	movs	r3, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d011      	beq.n	8007076 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4bac      	ldr	r3, [pc, #688]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007056:	4bab      	ldr	r3, [pc, #684]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	0549      	lsls	r1, r1, #21
 800705c:	430a      	orrs	r2, r1
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007060:	4ba8      	ldr	r3, [pc, #672]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	055b      	lsls	r3, r3, #21
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800706e:	231f      	movs	r3, #31
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007076:	4ba4      	ldr	r3, [pc, #656]	; (8007308 <HAL_RCC_OscConfig+0x61c>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	2380      	movs	r3, #128	; 0x80
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4013      	ands	r3, r2
 8007080:	d11a      	bne.n	80070b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007082:	4ba1      	ldr	r3, [pc, #644]	; (8007308 <HAL_RCC_OscConfig+0x61c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4ba0      	ldr	r3, [pc, #640]	; (8007308 <HAL_RCC_OscConfig+0x61c>)
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	0049      	lsls	r1, r1, #1
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007090:	f7fe f802 	bl	8005098 <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800709a:	f7fd fffd 	bl	8005098 <HAL_GetTick>
 800709e:	0002      	movs	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e127      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ac:	4b96      	ldr	r3, [pc, #600]	; (8007308 <HAL_RCC_OscConfig+0x61c>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4013      	ands	r3, r2
 80070b6:	d0f0      	beq.n	800709a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d106      	bne.n	80070ce <HAL_RCC_OscConfig+0x3e2>
 80070c0:	4b90      	ldr	r3, [pc, #576]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070c4:	4b8f      	ldr	r3, [pc, #572]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070c6:	2101      	movs	r1, #1
 80070c8:	430a      	orrs	r2, r1
 80070ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80070cc:	e01c      	b.n	8007108 <HAL_RCC_OscConfig+0x41c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCC_OscConfig+0x404>
 80070d6:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070da:	4b8a      	ldr	r3, [pc, #552]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070dc:	2104      	movs	r1, #4
 80070de:	430a      	orrs	r2, r1
 80070e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80070e2:	4b88      	ldr	r3, [pc, #544]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070e6:	4b87      	ldr	r3, [pc, #540]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070e8:	2101      	movs	r1, #1
 80070ea:	430a      	orrs	r2, r1
 80070ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80070ee:	e00b      	b.n	8007108 <HAL_RCC_OscConfig+0x41c>
 80070f0:	4b84      	ldr	r3, [pc, #528]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070f4:	4b83      	ldr	r3, [pc, #524]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070f6:	2101      	movs	r1, #1
 80070f8:	438a      	bics	r2, r1
 80070fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80070fc:	4b81      	ldr	r3, [pc, #516]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80070fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007100:	4b80      	ldr	r3, [pc, #512]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007102:	2104      	movs	r1, #4
 8007104:	438a      	bics	r2, r1
 8007106:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d014      	beq.n	800713a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fd ffc2 	bl	8005098 <HAL_GetTick>
 8007114:	0003      	movs	r3, r0
 8007116:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007118:	e009      	b.n	800712e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711a:	f7fd ffbd 	bl	8005098 <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	4a79      	ldr	r2, [pc, #484]	; (800730c <HAL_RCC_OscConfig+0x620>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e0e6      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800712e:	4b75      	ldr	r3, [pc, #468]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	2202      	movs	r2, #2
 8007134:	4013      	ands	r3, r2
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x42e>
 8007138:	e013      	b.n	8007162 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fd ffad 	bl	8005098 <HAL_GetTick>
 800713e:	0003      	movs	r3, r0
 8007140:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007142:	e009      	b.n	8007158 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007144:	f7fd ffa8 	bl	8005098 <HAL_GetTick>
 8007148:	0002      	movs	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	4a6f      	ldr	r2, [pc, #444]	; (800730c <HAL_RCC_OscConfig+0x620>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e0d1      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007158:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800715a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715c:	2202      	movs	r2, #2
 800715e:	4013      	ands	r3, r2
 8007160:	d1f0      	bne.n	8007144 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007162:	231f      	movs	r3, #31
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d105      	bne.n	8007178 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800716c:	4b65      	ldr	r3, [pc, #404]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800716e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007170:	4b64      	ldr	r3, [pc, #400]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007172:	4967      	ldr	r1, [pc, #412]	; (8007310 <HAL_RCC_OscConfig+0x624>)
 8007174:	400a      	ands	r2, r1
 8007176:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d100      	bne.n	8007182 <HAL_RCC_OscConfig+0x496>
 8007180:	e0bb      	b.n	80072fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007182:	4b60      	ldr	r3, [pc, #384]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2238      	movs	r2, #56	; 0x38
 8007188:	4013      	ands	r3, r2
 800718a:	2b10      	cmp	r3, #16
 800718c:	d100      	bne.n	8007190 <HAL_RCC_OscConfig+0x4a4>
 800718e:	e07b      	b.n	8007288 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d156      	bne.n	8007246 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007198:	4b5a      	ldr	r3, [pc, #360]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b59      	ldr	r3, [pc, #356]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800719e:	495d      	ldr	r1, [pc, #372]	; (8007314 <HAL_RCC_OscConfig+0x628>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fd ff78 	bl	8005098 <HAL_GetTick>
 80071a8:	0003      	movs	r3, r0
 80071aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071ac:	e008      	b.n	80071c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ae:	f7fd ff73 	bl	8005098 <HAL_GetTick>
 80071b2:	0002      	movs	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e09d      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	4b50      	ldr	r3, [pc, #320]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	2380      	movs	r3, #128	; 0x80
 80071c6:	049b      	lsls	r3, r3, #18
 80071c8:	4013      	ands	r3, r2
 80071ca:	d1f0      	bne.n	80071ae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071cc:	4b4d      	ldr	r3, [pc, #308]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4a51      	ldr	r2, [pc, #324]	; (8007318 <HAL_RCC_OscConfig+0x62c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	0019      	movs	r1, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	431a      	orrs	r2, r3
 80071fa:	4b42      	ldr	r3, [pc, #264]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 80071fc:	430a      	orrs	r2, r1
 80071fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007200:	4b40      	ldr	r3, [pc, #256]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b3f      	ldr	r3, [pc, #252]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	0449      	lsls	r1, r1, #17
 800720a:	430a      	orrs	r2, r1
 800720c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800720e:	4b3d      	ldr	r3, [pc, #244]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	4b3c      	ldr	r3, [pc, #240]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007214:	2180      	movs	r1, #128	; 0x80
 8007216:	0549      	lsls	r1, r1, #21
 8007218:	430a      	orrs	r2, r1
 800721a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fd ff3c 	bl	8005098 <HAL_GetTick>
 8007220:	0003      	movs	r3, r0
 8007222:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007226:	f7fd ff37 	bl	8005098 <HAL_GetTick>
 800722a:	0002      	movs	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e061      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007238:	4b32      	ldr	r3, [pc, #200]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	049b      	lsls	r3, r3, #18
 8007240:	4013      	ands	r3, r2
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x53a>
 8007244:	e059      	b.n	80072fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007246:	4b2f      	ldr	r3, [pc, #188]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800724c:	4931      	ldr	r1, [pc, #196]	; (8007314 <HAL_RCC_OscConfig+0x628>)
 800724e:	400a      	ands	r2, r1
 8007250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007252:	f7fd ff21 	bl	8005098 <HAL_GetTick>
 8007256:	0003      	movs	r3, r0
 8007258:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fd ff1c 	bl	8005098 <HAL_GetTick>
 8007260:	0002      	movs	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e046      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800726e:	4b25      	ldr	r3, [pc, #148]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	049b      	lsls	r3, r3, #18
 8007276:	4013      	ands	r3, r2
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800727a:	4b22      	ldr	r3, [pc, #136]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007280:	4926      	ldr	r1, [pc, #152]	; (800731c <HAL_RCC_OscConfig+0x630>)
 8007282:	400a      	ands	r2, r1
 8007284:	60da      	str	r2, [r3, #12]
 8007286:	e038      	b.n	80072fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e033      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007294:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <HAL_RCC_OscConfig+0x618>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2203      	movs	r2, #3
 800729e:	401a      	ands	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d126      	bne.n	80072f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2270      	movs	r2, #112	; 0x70
 80072ac:	401a      	ands	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d11f      	bne.n	80072f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	23fe      	movs	r3, #254	; 0xfe
 80072ba:	01db      	lsls	r3, r3, #7
 80072bc:	401a      	ands	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d116      	bne.n	80072f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	23f8      	movs	r3, #248	; 0xf8
 80072cc:	039b      	lsls	r3, r3, #14
 80072ce:	401a      	ands	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d10e      	bne.n	80072f6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	23e0      	movs	r3, #224	; 0xe0
 80072dc:	051b      	lsls	r3, r3, #20
 80072de:	401a      	ands	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d106      	bne.n	80072f6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	0f5b      	lsrs	r3, r3, #29
 80072ec:	075a      	lsls	r2, r3, #29
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d001      	beq.n	80072fa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	0018      	movs	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	b008      	add	sp, #32
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40021000 	.word	0x40021000
 8007308:	40007000 	.word	0x40007000
 800730c:	00001388 	.word	0x00001388
 8007310:	efffffff 	.word	0xefffffff
 8007314:	feffffff 	.word	0xfeffffff
 8007318:	11c1808c 	.word	0x11c1808c
 800731c:	eefefffc 	.word	0xeefefffc

08007320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0e9      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007334:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2207      	movs	r2, #7
 800733a:	4013      	ands	r3, r2
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d91e      	bls.n	8007380 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007342:	4b73      	ldr	r3, [pc, #460]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2207      	movs	r2, #7
 8007348:	4393      	bics	r3, r2
 800734a:	0019      	movs	r1, r3
 800734c:	4b70      	ldr	r3, [pc, #448]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007354:	f7fd fea0 	bl	8005098 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800735c:	e009      	b.n	8007372 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800735e:	f7fd fe9b 	bl	8005098 <HAL_GetTick>
 8007362:	0002      	movs	r2, r0
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	4a6a      	ldr	r2, [pc, #424]	; (8007514 <HAL_RCC_ClockConfig+0x1f4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e0ca      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007372:	4b67      	ldr	r3, [pc, #412]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2207      	movs	r2, #7
 8007378:	4013      	ands	r3, r2
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d1ee      	bne.n	800735e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2202      	movs	r2, #2
 8007386:	4013      	ands	r3, r2
 8007388:	d015      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2204      	movs	r2, #4
 8007390:	4013      	ands	r3, r2
 8007392:	d006      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007394:	4b60      	ldr	r3, [pc, #384]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	4b5f      	ldr	r3, [pc, #380]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 800739a:	21e0      	movs	r1, #224	; 0xe0
 800739c:	01c9      	lsls	r1, r1, #7
 800739e:	430a      	orrs	r2, r1
 80073a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a2:	4b5d      	ldr	r3, [pc, #372]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4a5d      	ldr	r2, [pc, #372]	; (800751c <HAL_RCC_ClockConfig+0x1fc>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	0019      	movs	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	4b59      	ldr	r3, [pc, #356]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2201      	movs	r2, #1
 80073bc:	4013      	ands	r3, r2
 80073be:	d057      	beq.n	8007470 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d107      	bne.n	80073d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073c8:	4b53      	ldr	r3, [pc, #332]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	029b      	lsls	r3, r3, #10
 80073d0:	4013      	ands	r3, r2
 80073d2:	d12b      	bne.n	800742c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e097      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d107      	bne.n	80073f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073e0:	4b4d      	ldr	r3, [pc, #308]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	049b      	lsls	r3, r3, #18
 80073e8:	4013      	ands	r3, r2
 80073ea:	d11f      	bne.n	800742c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e08b      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073f8:	4b47      	ldr	r3, [pc, #284]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4013      	ands	r3, r2
 8007402:	d113      	bne.n	800742c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e07f      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d106      	bne.n	800741e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007410:	4b41      	ldr	r3, [pc, #260]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	2202      	movs	r2, #2
 8007416:	4013      	ands	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e074      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800741e:	4b3e      	ldr	r3, [pc, #248]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	2202      	movs	r2, #2
 8007424:	4013      	ands	r3, r2
 8007426:	d101      	bne.n	800742c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e06d      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800742c:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2207      	movs	r2, #7
 8007432:	4393      	bics	r3, r2
 8007434:	0019      	movs	r1, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	4b37      	ldr	r3, [pc, #220]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 800743c:	430a      	orrs	r2, r1
 800743e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fd fe2a 	bl	8005098 <HAL_GetTick>
 8007444:	0003      	movs	r3, r0
 8007446:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007448:	e009      	b.n	800745e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744a:	f7fd fe25 	bl	8005098 <HAL_GetTick>
 800744e:	0002      	movs	r2, r0
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	4a2f      	ldr	r2, [pc, #188]	; (8007514 <HAL_RCC_ClockConfig+0x1f4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e054      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	4b2e      	ldr	r3, [pc, #184]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2238      	movs	r2, #56	; 0x38
 8007464:	401a      	ands	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	429a      	cmp	r2, r3
 800746e:	d1ec      	bne.n	800744a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007470:	4b27      	ldr	r3, [pc, #156]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2207      	movs	r2, #7
 8007476:	4013      	ands	r3, r2
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d21e      	bcs.n	80074bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2207      	movs	r2, #7
 8007484:	4393      	bics	r3, r2
 8007486:	0019      	movs	r1, r3
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007490:	f7fd fe02 	bl	8005098 <HAL_GetTick>
 8007494:	0003      	movs	r3, r0
 8007496:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007498:	e009      	b.n	80074ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800749a:	f7fd fdfd 	bl	8005098 <HAL_GetTick>
 800749e:	0002      	movs	r2, r0
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	4a1b      	ldr	r2, [pc, #108]	; (8007514 <HAL_RCC_ClockConfig+0x1f4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e02c      	b.n	8007508 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80074ae:	4b18      	ldr	r3, [pc, #96]	; (8007510 <HAL_RCC_ClockConfig+0x1f0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2207      	movs	r2, #7
 80074b4:	4013      	ands	r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d1ee      	bne.n	800749a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2204      	movs	r2, #4
 80074c2:	4013      	ands	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80074c6:	4b14      	ldr	r3, [pc, #80]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4a15      	ldr	r2, [pc, #84]	; (8007520 <HAL_RCC_ClockConfig+0x200>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	0019      	movs	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	4b10      	ldr	r3, [pc, #64]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80074d6:	430a      	orrs	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80074da:	f000 f829 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 80074de:	0001      	movs	r1, r0
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <HAL_RCC_ClockConfig+0x1f8>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	220f      	movs	r2, #15
 80074e8:	401a      	ands	r2, r3
 80074ea:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <HAL_RCC_ClockConfig+0x204>)
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	58d3      	ldr	r3, [r2, r3]
 80074f0:	221f      	movs	r2, #31
 80074f2:	4013      	ands	r3, r2
 80074f4:	000a      	movs	r2, r1
 80074f6:	40da      	lsrs	r2, r3
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <HAL_RCC_ClockConfig+0x208>)
 80074fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_RCC_ClockConfig+0x20c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	0018      	movs	r0, r3
 8007502:	f7fd fd6d 	bl	8004fe0 <HAL_InitTick>
 8007506:	0003      	movs	r3, r0
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b004      	add	sp, #16
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40022000 	.word	0x40022000
 8007514:	00001388 	.word	0x00001388
 8007518:	40021000 	.word	0x40021000
 800751c:	fffff0ff 	.word	0xfffff0ff
 8007520:	ffff8fff 	.word	0xffff8fff
 8007524:	0800faac 	.word	0x0800faac
 8007528:	20000038 	.word	0x20000038
 800752c:	2000003c 	.word	0x2000003c

08007530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007536:	4b3c      	ldr	r3, [pc, #240]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2238      	movs	r2, #56	; 0x38
 800753c:	4013      	ands	r3, r2
 800753e:	d10f      	bne.n	8007560 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	0adb      	lsrs	r3, r3, #11
 8007546:	2207      	movs	r2, #7
 8007548:	4013      	ands	r3, r2
 800754a:	2201      	movs	r2, #1
 800754c:	409a      	lsls	r2, r3
 800754e:	0013      	movs	r3, r2
 8007550:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	4835      	ldr	r0, [pc, #212]	; (800762c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007556:	f7f8 fdf1 	bl	800013c <__udivsi3>
 800755a:	0003      	movs	r3, r0
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e05d      	b.n	800761c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007560:	4b31      	ldr	r3, [pc, #196]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2238      	movs	r2, #56	; 0x38
 8007566:	4013      	ands	r3, r2
 8007568:	2b08      	cmp	r3, #8
 800756a:	d102      	bne.n	8007572 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800756c:	4b30      	ldr	r3, [pc, #192]	; (8007630 <HAL_RCC_GetSysClockFreq+0x100>)
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	e054      	b.n	800761c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007572:	4b2d      	ldr	r3, [pc, #180]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2238      	movs	r2, #56	; 0x38
 8007578:	4013      	ands	r3, r2
 800757a:	2b10      	cmp	r3, #16
 800757c:	d138      	bne.n	80075f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2203      	movs	r2, #3
 8007584:	4013      	ands	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007588:	4b27      	ldr	r3, [pc, #156]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	2207      	movs	r2, #7
 8007590:	4013      	ands	r3, r2
 8007592:	3301      	adds	r3, #1
 8007594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b03      	cmp	r3, #3
 800759a:	d10d      	bne.n	80075b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	4824      	ldr	r0, [pc, #144]	; (8007630 <HAL_RCC_GetSysClockFreq+0x100>)
 80075a0:	f7f8 fdcc 	bl	800013c <__udivsi3>
 80075a4:	0003      	movs	r3, r0
 80075a6:	0019      	movs	r1, r3
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	227f      	movs	r2, #127	; 0x7f
 80075b0:	4013      	ands	r3, r2
 80075b2:	434b      	muls	r3, r1
 80075b4:	617b      	str	r3, [r7, #20]
        break;
 80075b6:	e00d      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	481c      	ldr	r0, [pc, #112]	; (800762c <HAL_RCC_GetSysClockFreq+0xfc>)
 80075bc:	f7f8 fdbe 	bl	800013c <__udivsi3>
 80075c0:	0003      	movs	r3, r0
 80075c2:	0019      	movs	r1, r3
 80075c4:	4b18      	ldr	r3, [pc, #96]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	0a1b      	lsrs	r3, r3, #8
 80075ca:	227f      	movs	r2, #127	; 0x7f
 80075cc:	4013      	ands	r3, r2
 80075ce:	434b      	muls	r3, r1
 80075d0:	617b      	str	r3, [r7, #20]
        break;
 80075d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80075d4:	4b14      	ldr	r3, [pc, #80]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	0f5b      	lsrs	r3, r3, #29
 80075da:	2207      	movs	r2, #7
 80075dc:	4013      	ands	r3, r2
 80075de:	3301      	adds	r3, #1
 80075e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f7f8 fda9 	bl	800013c <__udivsi3>
 80075ea:	0003      	movs	r3, r0
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	e015      	b.n	800761c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2238      	movs	r2, #56	; 0x38
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d103      	bne.n	8007604 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	e00b      	b.n	800761c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007604:	4b08      	ldr	r3, [pc, #32]	; (8007628 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2238      	movs	r2, #56	; 0x38
 800760a:	4013      	ands	r3, r2
 800760c:	2b18      	cmp	r3, #24
 800760e:	d103      	bne.n	8007618 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007610:	23fa      	movs	r3, #250	; 0xfa
 8007612:	01db      	lsls	r3, r3, #7
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	e001      	b.n	800761c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800761c:	693b      	ldr	r3, [r7, #16]
}
 800761e:	0018      	movs	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	b006      	add	sp, #24
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	40021000 	.word	0x40021000
 800762c:	00f42400 	.word	0x00f42400
 8007630:	007a1200 	.word	0x007a1200

08007634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <HAL_RCC_GetHCLKFreq+0x10>)
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	20000038 	.word	0x20000038

08007648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007648:	b5b0      	push	{r4, r5, r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800764c:	f7ff fff2 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8007650:	0004      	movs	r4, r0
 8007652:	f7ff fb3f 	bl	8006cd4 <LL_RCC_GetAPB1Prescaler>
 8007656:	0003      	movs	r3, r0
 8007658:	0b1a      	lsrs	r2, r3, #12
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	58d3      	ldr	r3, [r2, r3]
 8007660:	221f      	movs	r2, #31
 8007662:	4013      	ands	r3, r2
 8007664:	40dc      	lsrs	r4, r3
 8007666:	0023      	movs	r3, r4
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	bdb0      	pop	{r4, r5, r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	0800faec 	.word	0x0800faec

08007674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800767c:	2313      	movs	r3, #19
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007684:	2312      	movs	r3, #18
 8007686:	18fb      	adds	r3, r7, r3
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	4013      	ands	r3, r2
 8007696:	d100      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007698:	e0a3      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800769a:	2011      	movs	r0, #17
 800769c:	183b      	adds	r3, r7, r0
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076a2:	4bc3      	ldr	r3, [pc, #780]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	055b      	lsls	r3, r3, #21
 80076aa:	4013      	ands	r3, r2
 80076ac:	d110      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ae:	4bc0      	ldr	r3, [pc, #768]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	4bbf      	ldr	r3, [pc, #764]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	0549      	lsls	r1, r1, #21
 80076b8:	430a      	orrs	r2, r1
 80076ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80076bc:	4bbc      	ldr	r3, [pc, #752]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80076be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	055b      	lsls	r3, r3, #21
 80076c4:	4013      	ands	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ca:	183b      	adds	r3, r7, r0
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076d0:	4bb8      	ldr	r3, [pc, #736]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	4bb7      	ldr	r3, [pc, #732]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	0049      	lsls	r1, r1, #1
 80076da:	430a      	orrs	r2, r1
 80076dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076de:	f7fd fcdb 	bl	8005098 <HAL_GetTick>
 80076e2:	0003      	movs	r3, r0
 80076e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e6:	e00b      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e8:	f7fd fcd6 	bl	8005098 <HAL_GetTick>
 80076ec:	0002      	movs	r2, r0
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d904      	bls.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80076f6:	2313      	movs	r3, #19
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	2203      	movs	r2, #3
 80076fc:	701a      	strb	r2, [r3, #0]
        break;
 80076fe:	e005      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007700:	4bac      	ldr	r3, [pc, #688]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	2380      	movs	r3, #128	; 0x80
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	4013      	ands	r3, r2
 800770a:	d0ed      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800770c:	2313      	movs	r3, #19
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d154      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007716:	4ba6      	ldr	r3, [pc, #664]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800771a:	23c0      	movs	r3, #192	; 0xc0
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4013      	ands	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d019      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	429a      	cmp	r2, r3
 8007730:	d014      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007732:	4b9f      	ldr	r3, [pc, #636]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	4aa0      	ldr	r2, [pc, #640]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007738:	4013      	ands	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800773c:	4b9c      	ldr	r3, [pc, #624]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800773e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007740:	4b9b      	ldr	r3, [pc, #620]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007742:	2180      	movs	r1, #128	; 0x80
 8007744:	0249      	lsls	r1, r1, #9
 8007746:	430a      	orrs	r2, r1
 8007748:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800774a:	4b99      	ldr	r3, [pc, #612]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800774c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800774e:	4b98      	ldr	r3, [pc, #608]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007750:	499a      	ldr	r1, [pc, #616]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007752:	400a      	ands	r2, r1
 8007754:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007756:	4b96      	ldr	r3, [pc, #600]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2201      	movs	r2, #1
 8007760:	4013      	ands	r3, r2
 8007762:	d016      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fd fc98 	bl	8005098 <HAL_GetTick>
 8007768:	0003      	movs	r3, r0
 800776a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800776c:	e00c      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800776e:	f7fd fc93 	bl	8005098 <HAL_GetTick>
 8007772:	0002      	movs	r2, r0
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	4a91      	ldr	r2, [pc, #580]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d904      	bls.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800777e:	2313      	movs	r3, #19
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]
            break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007788:	4b89      	ldr	r3, [pc, #548]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	2202      	movs	r2, #2
 800778e:	4013      	ands	r3, r2
 8007790:	d0ed      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007792:	2313      	movs	r3, #19
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800779c:	4b84      	ldr	r3, [pc, #528]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800779e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a0:	4a85      	ldr	r2, [pc, #532]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	0019      	movs	r1, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	4b81      	ldr	r3, [pc, #516]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077ac:	430a      	orrs	r2, r1
 80077ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80077b0:	e00c      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077b2:	2312      	movs	r3, #18
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	2213      	movs	r2, #19
 80077b8:	18ba      	adds	r2, r7, r2
 80077ba:	7812      	ldrb	r2, [r2, #0]
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e005      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	2312      	movs	r3, #18
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	2213      	movs	r2, #19
 80077c6:	18ba      	adds	r2, r7, r2
 80077c8:	7812      	ldrb	r2, [r2, #0]
 80077ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077cc:	2311      	movs	r3, #17
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d105      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077d6:	4b76      	ldr	r3, [pc, #472]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077da:	4b75      	ldr	r3, [pc, #468]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077dc:	4979      	ldr	r1, [pc, #484]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80077de:	400a      	ands	r2, r1
 80077e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2201      	movs	r2, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077ec:	4b70      	ldr	r3, [pc, #448]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f0:	2203      	movs	r2, #3
 80077f2:	4393      	bics	r3, r2
 80077f4:	0019      	movs	r1, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	4b6d      	ldr	r3, [pc, #436]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077fc:	430a      	orrs	r2, r1
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2202      	movs	r2, #2
 8007806:	4013      	ands	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800780a:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	220c      	movs	r2, #12
 8007810:	4393      	bics	r3, r2
 8007812:	0019      	movs	r1, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	4b65      	ldr	r3, [pc, #404]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800781a:	430a      	orrs	r2, r1
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2210      	movs	r2, #16
 8007824:	4013      	ands	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007828:	4b61      	ldr	r3, [pc, #388]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	4a66      	ldr	r2, [pc, #408]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800782e:	4013      	ands	r3, r2
 8007830:	0019      	movs	r1, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007838:	430a      	orrs	r2, r1
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4013      	ands	r3, r2
 8007846:	d009      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007848:	4b59      	ldr	r3, [pc, #356]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	4a5f      	ldr	r2, [pc, #380]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800784e:	4013      	ands	r3, r2
 8007850:	0019      	movs	r1, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	4b56      	ldr	r3, [pc, #344]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007858:	430a      	orrs	r2, r1
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4013      	ands	r3, r2
 8007866:	d009      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007868:	4b51      	ldr	r3, [pc, #324]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	4a58      	ldr	r2, [pc, #352]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786e:	4013      	ands	r3, r2
 8007870:	0019      	movs	r1, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	4b4e      	ldr	r3, [pc, #312]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007878:	430a      	orrs	r2, r1
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2220      	movs	r2, #32
 8007882:	4013      	ands	r3, r2
 8007884:	d009      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007886:	4b4a      	ldr	r3, [pc, #296]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	4a52      	ldr	r2, [pc, #328]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800788c:	4013      	ands	r3, r2
 800788e:	0019      	movs	r1, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	4b46      	ldr	r3, [pc, #280]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007896:	430a      	orrs	r2, r1
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	2380      	movs	r3, #128	; 0x80
 80078a0:	01db      	lsls	r3, r3, #7
 80078a2:	4013      	ands	r3, r2
 80078a4:	d015      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078a6:	4b42      	ldr	r3, [pc, #264]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	0899      	lsrs	r1, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	4b3f      	ldr	r3, [pc, #252]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078b4:	430a      	orrs	r2, r1
 80078b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1a      	ldr	r2, [r3, #32]
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	05db      	lsls	r3, r3, #23
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d106      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	0249      	lsls	r1, r1, #9
 80078ce:	430a      	orrs	r2, r1
 80078d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	2380      	movs	r3, #128	; 0x80
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	4013      	ands	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078de:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	2240      	movs	r2, #64	; 0x40
 80078e4:	4393      	bics	r3, r2
 80078e6:	0019      	movs	r1, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ec:	4b30      	ldr	r3, [pc, #192]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078ee:	430a      	orrs	r2, r1
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	2380      	movs	r3, #128	; 0x80
 80078f8:	039b      	lsls	r3, r3, #14
 80078fa:	4013      	ands	r3, r2
 80078fc:	d016      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80078fe:	4b2c      	ldr	r3, [pc, #176]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	4a35      	ldr	r2, [pc, #212]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800790c:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800790e:	430a      	orrs	r2, r1
 8007910:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007916:	2380      	movs	r3, #128	; 0x80
 8007918:	03db      	lsls	r3, r3, #15
 800791a:	429a      	cmp	r2, r3
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	4b23      	ldr	r3, [pc, #140]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007924:	2180      	movs	r1, #128	; 0x80
 8007926:	0449      	lsls	r1, r1, #17
 8007928:	430a      	orrs	r2, r1
 800792a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	2380      	movs	r3, #128	; 0x80
 8007932:	03db      	lsls	r3, r3, #15
 8007934:	4013      	ands	r3, r2
 8007936:	d016      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007938:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800793a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793c:	4a27      	ldr	r2, [pc, #156]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800793e:	4013      	ands	r3, r2
 8007940:	0019      	movs	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007948:	430a      	orrs	r2, r1
 800794a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	045b      	lsls	r3, r3, #17
 8007954:	429a      	cmp	r2, r3
 8007956:	d106      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007958:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	0449      	lsls	r1, r1, #17
 8007962:	430a      	orrs	r2, r1
 8007964:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	2380      	movs	r3, #128	; 0x80
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	4013      	ands	r3, r2
 8007970:	d016      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	4a1a      	ldr	r2, [pc, #104]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007978:	4013      	ands	r3, r2
 800797a:	0019      	movs	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	695a      	ldr	r2, [r3, #20]
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007982:	430a      	orrs	r2, r1
 8007984:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	2380      	movs	r3, #128	; 0x80
 800798c:	01db      	lsls	r3, r3, #7
 800798e:	429a      	cmp	r2, r3
 8007990:	d106      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	0249      	lsls	r1, r1, #9
 800799c:	430a      	orrs	r2, r1
 800799e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80079a0:	2312      	movs	r3, #18
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	781b      	ldrb	r3, [r3, #0]
}
 80079a6:	0018      	movs	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b006      	add	sp, #24
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	40021000 	.word	0x40021000
 80079b4:	40007000 	.word	0x40007000
 80079b8:	fffffcff 	.word	0xfffffcff
 80079bc:	fffeffff 	.word	0xfffeffff
 80079c0:	00001388 	.word	0x00001388
 80079c4:	efffffff 	.word	0xefffffff
 80079c8:	fffff3ff 	.word	0xfffff3ff
 80079cc:	fff3ffff 	.word	0xfff3ffff
 80079d0:	ffcfffff 	.word	0xffcfffff
 80079d4:	ffffcfff 	.word	0xffffcfff
 80079d8:	ffbfffff 	.word	0xffbfffff
 80079dc:	feffffff 	.word	0xfeffffff
 80079e0:	ffff3fff 	.word	0xffff3fff

080079e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079e4:	b5b0      	push	{r4, r5, r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079ec:	230f      	movs	r3, #15
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	2201      	movs	r2, #1
 80079f2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d100      	bne.n	80079fc <HAL_RTC_Init+0x18>
 80079fa:	e08c      	b.n	8007b16 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2229      	movs	r2, #41	; 0x29
 8007a00:	5c9b      	ldrb	r3, [r3, r2]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2228      	movs	r2, #40	; 0x28
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2288      	movs	r2, #136	; 0x88
 8007a14:	0212      	lsls	r2, r2, #8
 8007a16:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f7fc fabc 	bl	8003f98 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2229      	movs	r2, #41	; 0x29
 8007a24:	2102      	movs	r1, #2
 8007a26:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b10      	cmp	r3, #16
 8007a34:	d062      	beq.n	8007afc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	22ca      	movs	r2, #202	; 0xca
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2253      	movs	r2, #83	; 0x53
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007a46:	250f      	movs	r5, #15
 8007a48:	197c      	adds	r4, r7, r5
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 fb4a 	bl	80080e6 <RTC_EnterInitMode>
 8007a52:	0003      	movs	r3, r0
 8007a54:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8007a56:	0028      	movs	r0, r5
 8007a58:	183b      	adds	r3, r7, r0
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d12c      	bne.n	8007aba <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	492e      	ldr	r1, [pc, #184]	; (8007b24 <HAL_RTC_Init+0x140>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6912      	ldr	r2, [r2, #16]
 8007a96:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6919      	ldr	r1, [r3, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	041a      	lsls	r2, r3, #16
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007aac:	183c      	adds	r4, r7, r0
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f000 fb5b 	bl	800816c <RTC_ExitInitMode>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8007aba:	230f      	movs	r3, #15
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	00d2      	lsls	r2, r2, #3
 8007ad0:	08d2      	lsrs	r2, r2, #3
 8007ad2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	22ff      	movs	r2, #255	; 0xff
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24
 8007afa:	e003      	b.n	8007b04 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007afc:	230f      	movs	r3, #15
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8007b04:	230f      	movs	r3, #15
 8007b06:	18fb      	adds	r3, r7, r3
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2229      	movs	r2, #41	; 0x29
 8007b12:	2101      	movs	r1, #1
 8007b14:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007b16:	230f      	movs	r3, #15
 8007b18:	18fb      	adds	r3, r7, r3
 8007b1a:	781b      	ldrb	r3, [r3, #0]
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b004      	add	sp, #16
 8007b22:	bdb0      	pop	{r4, r5, r7, pc}
 8007b24:	fb8fffbf 	.word	0xfb8fffbf

08007b28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2228      	movs	r2, #40	; 0x28
 8007b38:	5c9b      	ldrb	r3, [r3, r2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_RTC_SetTime+0x1a>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e092      	b.n	8007c68 <HAL_RTC_SetTime+0x140>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2228      	movs	r2, #40	; 0x28
 8007b46:	2101      	movs	r1, #1
 8007b48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2229      	movs	r2, #41	; 0x29
 8007b4e:	2102      	movs	r1, #2
 8007b50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	22ca      	movs	r2, #202	; 0xca
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2253      	movs	r2, #83	; 0x53
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b62:	2513      	movs	r5, #19
 8007b64:	197c      	adds	r4, r7, r5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fabc 	bl	80080e6 <RTC_EnterInitMode>
 8007b6e:	0003      	movs	r3, r0
 8007b70:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8007b72:	197b      	adds	r3, r7, r5
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d162      	bne.n	8007c40 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d125      	bne.n	8007bcc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	2240      	movs	r2, #64	; 0x40
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d102      	bne.n	8007b92 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 fb2c 	bl	80081f4 <RTC_ByteToBcd2>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 fb25 	bl	80081f4 <RTC_ByteToBcd2>
 8007baa:	0003      	movs	r3, r0
 8007bac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 fb1d 	bl	80081f4 <RTC_ByteToBcd2>
 8007bba:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bbc:	0022      	movs	r2, r4
 8007bbe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	e017      	b.n	8007bfc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2240      	movs	r2, #64	; 0x40
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	d102      	bne.n	8007bde <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bf0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	491b      	ldr	r1, [pc, #108]	; (8007c70 <HAL_RTC_SetTime+0x148>)
 8007c04:	400a      	ands	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4918      	ldr	r1, [pc, #96]	; (8007c74 <HAL_RTC_SetTime+0x14c>)
 8007c14:	400a      	ands	r2, r1
 8007c16:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c30:	2313      	movs	r3, #19
 8007c32:	18fc      	adds	r4, r7, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f000 fa98 	bl	800816c <RTC_ExitInitMode>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8007c48:	2313      	movs	r3, #19
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2229      	movs	r2, #41	; 0x29
 8007c56:	2101      	movs	r1, #1
 8007c58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2228      	movs	r2, #40	; 0x28
 8007c5e:	2100      	movs	r1, #0
 8007c60:	5499      	strb	r1, [r3, r2]

  return status;
 8007c62:	2313      	movs	r3, #19
 8007c64:	18fb      	adds	r3, r7, r3
 8007c66:	781b      	ldrb	r3, [r3, #0]
}
 8007c68:	0018      	movs	r0, r3
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b006      	add	sp, #24
 8007c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c70:	007f7f7f 	.word	0x007f7f7f
 8007c74:	fffbffff 	.word	0xfffbffff

08007c78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c78:	b5b0      	push	{r4, r5, r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2228      	movs	r2, #40	; 0x28
 8007c88:	5c9b      	ldrb	r3, [r3, r2]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_RTC_SetDate+0x1a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e07e      	b.n	8007d90 <HAL_RTC_SetDate+0x118>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2228      	movs	r2, #40	; 0x28
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2229      	movs	r2, #41	; 0x29
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_RTC_SetDate+0x4e>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	001a      	movs	r2, r3
 8007cae:	2310      	movs	r3, #16
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d008      	beq.n	8007cc6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	4393      	bics	r3, r2
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	330a      	adds	r3, #10
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11c      	bne.n	8007d06 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	78db      	ldrb	r3, [r3, #3]
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f000 fa8f 	bl	80081f4 <RTC_ByteToBcd2>
 8007cd6:	0003      	movs	r3, r0
 8007cd8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 fa88 	bl	80081f4 <RTC_ByteToBcd2>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ce8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	789b      	ldrb	r3, [r3, #2]
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f000 fa80 	bl	80081f4 <RTC_ByteToBcd2>
 8007cf4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cf6:	0022      	movs	r2, r4
 8007cf8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e00e      	b.n	8007d24 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d12:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	22ca      	movs	r2, #202	; 0xca
 8007d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2253      	movs	r2, #83	; 0x53
 8007d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d34:	2513      	movs	r5, #19
 8007d36:	197c      	adds	r4, r7, r5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f000 f9d3 	bl	80080e6 <RTC_EnterInitMode>
 8007d40:	0003      	movs	r3, r0
 8007d42:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8007d44:	0028      	movs	r0, r5
 8007d46:	183b      	adds	r3, r7, r0
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10c      	bne.n	8007d68 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4910      	ldr	r1, [pc, #64]	; (8007d98 <HAL_RTC_SetDate+0x120>)
 8007d56:	400a      	ands	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d5a:	183c      	adds	r4, r7, r0
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 fa04 	bl	800816c <RTC_ExitInitMode>
 8007d64:	0003      	movs	r3, r0
 8007d66:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007d70:	2313      	movs	r3, #19
 8007d72:	18fb      	adds	r3, r7, r3
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2229      	movs	r2, #41	; 0x29
 8007d7e:	2101      	movs	r1, #1
 8007d80:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2228      	movs	r2, #40	; 0x28
 8007d86:	2100      	movs	r1, #0
 8007d88:	5499      	strb	r1, [r3, r2]

  return status;
 8007d8a:	2313      	movs	r3, #19
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	781b      	ldrb	r3, [r3, #0]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b006      	add	sp, #24
 8007d96:	bdb0      	pop	{r4, r5, r7, pc}
 8007d98:	00ffff3f 	.word	0x00ffff3f

08007d9c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2228      	movs	r2, #40	; 0x28
 8007dac:	5c9b      	ldrb	r3, [r3, r2]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_RTC_SetAlarm_IT+0x1a>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e127      	b.n	8008006 <HAL_RTC_SetAlarm_IT+0x26a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2228      	movs	r2, #40	; 0x28
 8007dba:	2101      	movs	r1, #1
 8007dbc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2229      	movs	r2, #41	; 0x29
 8007dc2:	2102      	movs	r1, #2
 8007dc4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d136      	bne.n	8007e3a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d102      	bne.n	8007dde <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	0018      	movs	r0, r3
 8007de4:	f000 fa06 	bl	80081f4 <RTC_ByteToBcd2>
 8007de8:	0003      	movs	r3, r0
 8007dea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 f9ff 	bl	80081f4 <RTC_ByteToBcd2>
 8007df6:	0003      	movs	r3, r0
 8007df8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dfa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	789b      	ldrb	r3, [r3, #2]
 8007e00:	0018      	movs	r0, r3
 8007e02:	f000 f9f7 	bl	80081f4 <RTC_ByteToBcd2>
 8007e06:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e08:	0022      	movs	r2, r4
 8007e0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	78db      	ldrb	r3, [r3, #3]
 8007e10:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e12:	431a      	orrs	r2, r3
 8007e14:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	5c9b      	ldrb	r3, [r3, r2]
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f000 f9e9 	bl	80081f4 <RTC_ByteToBcd2>
 8007e22:	0003      	movs	r3, r0
 8007e24:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e26:	0022      	movs	r2, r4
 8007e28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e022      	b.n	8007e80 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2240      	movs	r2, #64	; 0x40
 8007e42:	4013      	ands	r3, r2
 8007e44:	d102      	bne.n	8007e4c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e58:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	78db      	ldrb	r3, [r3, #3]
 8007e64:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2120      	movs	r1, #32
 8007e6c:	5c5b      	ldrb	r3, [r3, r1]
 8007e6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	22ca      	movs	r2, #202	; 0xca
 8007e92:	625a      	str	r2, [r3, #36]	; 0x24
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2253      	movs	r2, #83	; 0x53
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea0:	2380      	movs	r3, #128	; 0x80
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d14c      	bne.n	8007f42 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4957      	ldr	r1, [pc, #348]	; (8008010 <HAL_RTC_SetAlarm_IT+0x274>)
 8007eb4:	400a      	ands	r2, r1
 8007eb6:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8007ec8:	f7fd f8e6 	bl	8005098 <HAL_GetTick>
 8007ecc:	0003      	movs	r3, r0
 8007ece:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007ed0:	e016      	b.n	8007f00 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ed2:	f7fd f8e1 	bl	8005098 <HAL_GetTick>
 8007ed6:	0002      	movs	r2, r0
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	23fa      	movs	r3, #250	; 0xfa
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d90d      	bls.n	8007f00 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2229      	movs	r2, #41	; 0x29
 8007ef0:	2103      	movs	r1, #3
 8007ef2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2228      	movs	r2, #40	; 0x28
 8007ef8:	2100      	movs	r1, #0
 8007efa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e082      	b.n	8008006 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	4013      	ands	r3, r2
 8007f0a:	d0e2      	beq.n	8007ed2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	0049      	lsls	r1, r1, #1
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	0149      	lsls	r1, r1, #5
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	619a      	str	r2, [r3, #24]
 8007f40:	e04b      	b.n	8007fda <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699a      	ldr	r2, [r3, #24]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4931      	ldr	r1, [pc, #196]	; (8008014 <HAL_RTC_SetAlarm_IT+0x278>)
 8007f4e:	400a      	ands	r2, r1
 8007f50:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8007f62:	f7fd f899 	bl	8005098 <HAL_GetTick>
 8007f66:	0003      	movs	r3, r0
 8007f68:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f6a:	e016      	b.n	8007f9a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f6c:	f7fd f894 	bl	8005098 <HAL_GetTick>
 8007f70:	0002      	movs	r2, r0
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	23fa      	movs	r3, #250	; 0xfa
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d90d      	bls.n	8007f9a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	22ff      	movs	r2, #255	; 0xff
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2229      	movs	r2, #41	; 0x29
 8007f8a:	2103      	movs	r1, #3
 8007f8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2228      	movs	r2, #40	; 0x28
 8007f92:	2100      	movs	r1, #0
 8007f94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e035      	b.n	8008006 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d0e2      	beq.n	8007f6c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	0089      	lsls	r1, r1, #2
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2180      	movs	r1, #128	; 0x80
 8007fd4:	0189      	lsls	r1, r1, #6
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007fda:	4a0f      	ldr	r2, [pc, #60]	; (8008018 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007fdc:	2380      	movs	r3, #128	; 0x80
 8007fde:	58d3      	ldr	r3, [r2, r3]
 8007fe0:	490d      	ldr	r1, [pc, #52]	; (8008018 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007fe2:	2280      	movs	r2, #128	; 0x80
 8007fe4:	0312      	lsls	r2, r2, #12
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	2280      	movs	r2, #128	; 0x80
 8007fea:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	22ff      	movs	r2, #255	; 0xff
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2229      	movs	r2, #41	; 0x29
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2228      	movs	r2, #40	; 0x28
 8008000:	2100      	movs	r1, #0
 8008002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	0018      	movs	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	b009      	add	sp, #36	; 0x24
 800800c:	bd90      	pop	{r4, r7, pc}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	fffffeff 	.word	0xfffffeff
 8008014:	fffffdff 	.word	0xfffffdff
 8008018:	40021800 	.word	0x40021800

0800801c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	2380      	movs	r3, #128	; 0x80
 800802c:	015b      	lsls	r3, r3, #5
 800802e:	4013      	ands	r3, r2
 8008030:	d011      	beq.n	8008056 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008038:	2201      	movs	r2, #1
 800803a:	4013      	ands	r3, r2
 800803c:	d00b      	beq.n	8008056 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2101      	movs	r1, #1
 800804a:	430a      	orrs	r2, r1
 800804c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	0018      	movs	r0, r3
 8008052:	f7fb fee9 	bl	8003e28 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	2380      	movs	r3, #128	; 0x80
 800805e:	019b      	lsls	r3, r3, #6
 8008060:	4013      	ands	r3, r2
 8008062:	d011      	beq.n	8008088 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806a:	2202      	movs	r2, #2
 800806c:	4013      	ands	r3, r2
 800806e:	d00b      	beq.n	8008088 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2102      	movs	r1, #2
 800807c:	430a      	orrs	r2, r1
 800807e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	0018      	movs	r0, r3
 8008084:	f000 f8de 	bl	8008244 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2229      	movs	r2, #41	; 0x29
 800808c:	2101      	movs	r1, #1
 800808e:	5499      	strb	r1, [r3, r2]
}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	21a0      	movs	r1, #160	; 0xa0
 80080ac:	438a      	bics	r2, r1
 80080ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80080b0:	f7fc fff2 	bl	8005098 <HAL_GetTick>
 80080b4:	0003      	movs	r3, r0
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80080b8:	e00a      	b.n	80080d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080ba:	f7fc ffed 	bl	8005098 <HAL_GetTick>
 80080be:	0002      	movs	r2, r0
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	1ad2      	subs	r2, r2, r3
 80080c4:	23fa      	movs	r3, #250	; 0xfa
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d901      	bls.n	80080d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	4013      	ands	r3, r2
 80080da:	d0ee      	beq.n	80080ba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b004      	add	sp, #16
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80080ee:	230f      	movs	r3, #15
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	2200      	movs	r2, #0
 80080f4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2240      	movs	r2, #64	; 0x40
 80080fe:	4013      	ands	r3, r2
 8008100:	d12c      	bne.n	800815c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	430a      	orrs	r2, r1
 8008110:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008112:	f7fc ffc1 	bl	8005098 <HAL_GetTick>
 8008116:	0003      	movs	r3, r0
 8008118:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800811a:	e014      	b.n	8008146 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800811c:	f7fc ffbc 	bl	8005098 <HAL_GetTick>
 8008120:	0002      	movs	r2, r0
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	1ad2      	subs	r2, r2, r3
 8008126:	200f      	movs	r0, #15
 8008128:	183b      	adds	r3, r7, r0
 800812a:	1839      	adds	r1, r7, r0
 800812c:	7809      	ldrb	r1, [r1, #0]
 800812e:	7019      	strb	r1, [r3, #0]
 8008130:	23fa      	movs	r3, #250	; 0xfa
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	429a      	cmp	r2, r3
 8008136:	d906      	bls.n	8008146 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8008138:	183b      	adds	r3, r7, r0
 800813a:	2203      	movs	r2, #3
 800813c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2229      	movs	r2, #41	; 0x29
 8008142:	2103      	movs	r1, #3
 8008144:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2240      	movs	r2, #64	; 0x40
 800814e:	4013      	ands	r3, r2
 8008150:	d104      	bne.n	800815c <RTC_EnterInitMode+0x76>
 8008152:	230f      	movs	r3, #15
 8008154:	18fb      	adds	r3, r7, r3
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d1df      	bne.n	800811c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800815c:	230f      	movs	r3, #15
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	781b      	ldrb	r3, [r3, #0]
}
 8008162:	0018      	movs	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	b004      	add	sp, #16
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008174:	240f      	movs	r4, #15
 8008176:	193b      	adds	r3, r7, r4
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800817c:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <RTC_ExitInitMode+0x84>)
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	4b1b      	ldr	r3, [pc, #108]	; (80081f0 <RTC_ExitInitMode+0x84>)
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	438a      	bics	r2, r1
 8008186:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008188:	4b19      	ldr	r3, [pc, #100]	; (80081f0 <RTC_ExitInitMode+0x84>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	2220      	movs	r2, #32
 800818e:	4013      	ands	r3, r2
 8008190:	d10d      	bne.n	80081ae <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff ff7f 	bl	8008098 <HAL_RTC_WaitForSynchro>
 800819a:	1e03      	subs	r3, r0, #0
 800819c:	d021      	beq.n	80081e2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2229      	movs	r2, #41	; 0x29
 80081a2:	2103      	movs	r1, #3
 80081a4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80081a6:	193b      	adds	r3, r7, r4
 80081a8:	2203      	movs	r2, #3
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e019      	b.n	80081e2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081ae:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <RTC_ExitInitMode+0x84>)
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <RTC_ExitInitMode+0x84>)
 80081b4:	2120      	movs	r1, #32
 80081b6:	438a      	bics	r2, r1
 80081b8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	0018      	movs	r0, r3
 80081be:	f7ff ff6b 	bl	8008098 <HAL_RTC_WaitForSynchro>
 80081c2:	1e03      	subs	r3, r0, #0
 80081c4:	d007      	beq.n	80081d6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2229      	movs	r2, #41	; 0x29
 80081ca:	2103      	movs	r1, #3
 80081cc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80081ce:	230f      	movs	r3, #15
 80081d0:	18fb      	adds	r3, r7, r3
 80081d2:	2203      	movs	r2, #3
 80081d4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <RTC_ExitInitMode+0x84>)
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <RTC_ExitInitMode+0x84>)
 80081dc:	2120      	movs	r1, #32
 80081de:	430a      	orrs	r2, r1
 80081e0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80081e2:	230f      	movs	r3, #15
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	781b      	ldrb	r3, [r3, #0]
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b005      	add	sp, #20
 80081ee:	bd90      	pop	{r4, r7, pc}
 80081f0:	40002800 	.word	0x40002800

080081f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	0002      	movs	r2, r0
 80081fc:	1dfb      	adds	r3, r7, #7
 80081fe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8008204:	230b      	movs	r3, #11
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	1dfa      	adds	r2, r7, #7
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800820e:	e008      	b.n	8008222 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8008216:	220b      	movs	r2, #11
 8008218:	18bb      	adds	r3, r7, r2
 800821a:	18ba      	adds	r2, r7, r2
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	3a0a      	subs	r2, #10
 8008220:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8008222:	210b      	movs	r1, #11
 8008224:	187b      	adds	r3, r7, r1
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b09      	cmp	r3, #9
 800822a:	d8f1      	bhi.n	8008210 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	b2da      	uxtb	r2, r3
 8008234:	187b      	adds	r3, r7, r1
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	4313      	orrs	r3, r2
 800823a:	b2db      	uxtb	r3, r3
}
 800823c:	0018      	movs	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	b004      	add	sp, #16
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800824c:	46c0      	nop			; (mov r8, r8)
 800824e:	46bd      	mov	sp, r7
 8008250:	b002      	add	sp, #8
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e04a      	b.n	80082fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	223d      	movs	r2, #61	; 0x3d
 800826a:	5c9b      	ldrb	r3, [r3, r2]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d107      	bne.n	8008282 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	223c      	movs	r2, #60	; 0x3c
 8008276:	2100      	movs	r1, #0
 8008278:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	0018      	movs	r0, r3
 800827e:	f7fc fd5d 	bl	8004d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	223d      	movs	r2, #61	; 0x3d
 8008286:	2102      	movs	r1, #2
 8008288:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3304      	adds	r3, #4
 8008292:	0019      	movs	r1, r3
 8008294:	0010      	movs	r0, r2
 8008296:	f000 fb57 	bl	8008948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2248      	movs	r2, #72	; 0x48
 800829e:	2101      	movs	r1, #1
 80082a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	223e      	movs	r2, #62	; 0x3e
 80082a6:	2101      	movs	r1, #1
 80082a8:	5499      	strb	r1, [r3, r2]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	223f      	movs	r2, #63	; 0x3f
 80082ae:	2101      	movs	r1, #1
 80082b0:	5499      	strb	r1, [r3, r2]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2240      	movs	r2, #64	; 0x40
 80082b6:	2101      	movs	r1, #1
 80082b8:	5499      	strb	r1, [r3, r2]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2241      	movs	r2, #65	; 0x41
 80082be:	2101      	movs	r1, #1
 80082c0:	5499      	strb	r1, [r3, r2]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2242      	movs	r2, #66	; 0x42
 80082c6:	2101      	movs	r1, #1
 80082c8:	5499      	strb	r1, [r3, r2]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2243      	movs	r2, #67	; 0x43
 80082ce:	2101      	movs	r1, #1
 80082d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2244      	movs	r2, #68	; 0x44
 80082d6:	2101      	movs	r1, #1
 80082d8:	5499      	strb	r1, [r3, r2]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2245      	movs	r2, #69	; 0x45
 80082de:	2101      	movs	r1, #1
 80082e0:	5499      	strb	r1, [r3, r2]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2246      	movs	r2, #70	; 0x46
 80082e6:	2101      	movs	r1, #1
 80082e8:	5499      	strb	r1, [r3, r2]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2247      	movs	r2, #71	; 0x47
 80082ee:	2101      	movs	r1, #1
 80082f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	223d      	movs	r2, #61	; 0x3d
 80082f6:	2101      	movs	r1, #1
 80082f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	0018      	movs	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	b002      	add	sp, #8
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	223d      	movs	r2, #61	; 0x3d
 8008310:	5c9b      	ldrb	r3, [r3, r2]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	d001      	beq.n	800831c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e03a      	b.n	8008392 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	223d      	movs	r2, #61	; 0x3d
 8008320:	2102      	movs	r1, #2
 8008322:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1c      	ldr	r2, [pc, #112]	; (800839c <HAL_TIM_Base_Start+0x98>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00f      	beq.n	800834e <HAL_TIM_Base_Start+0x4a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	05db      	lsls	r3, r3, #23
 8008336:	429a      	cmp	r2, r3
 8008338:	d009      	beq.n	800834e <HAL_TIM_Base_Start+0x4a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <HAL_TIM_Base_Start+0x9c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d004      	beq.n	800834e <HAL_TIM_Base_Start+0x4a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a16      	ldr	r2, [pc, #88]	; (80083a4 <HAL_TIM_Base_Start+0xa0>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d116      	bne.n	800837c <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <HAL_TIM_Base_Start+0xa4>)
 8008356:	4013      	ands	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b06      	cmp	r3, #6
 800835e:	d016      	beq.n	800838e <HAL_TIM_Base_Start+0x8a>
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	025b      	lsls	r3, r3, #9
 8008366:	429a      	cmp	r2, r3
 8008368:	d011      	beq.n	800838e <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2101      	movs	r1, #1
 8008376:	430a      	orrs	r2, r1
 8008378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837a:	e008      	b.n	800838e <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2101      	movs	r1, #1
 8008388:	430a      	orrs	r2, r1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e000      	b.n	8008390 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	0018      	movs	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	b004      	add	sp, #16
 8008398:	bd80      	pop	{r7, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	00010007 	.word	0x00010007

080083ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e04a      	b.n	8008454 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	223d      	movs	r2, #61	; 0x3d
 80083c2:	5c9b      	ldrb	r3, [r3, r2]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d107      	bne.n	80083da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	223c      	movs	r2, #60	; 0x3c
 80083ce:	2100      	movs	r1, #0
 80083d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7fc fc95 	bl	8004d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	223d      	movs	r2, #61	; 0x3d
 80083de:	2102      	movs	r1, #2
 80083e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3304      	adds	r3, #4
 80083ea:	0019      	movs	r1, r3
 80083ec:	0010      	movs	r0, r2
 80083ee:	f000 faab 	bl	8008948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2248      	movs	r2, #72	; 0x48
 80083f6:	2101      	movs	r1, #1
 80083f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	223e      	movs	r2, #62	; 0x3e
 80083fe:	2101      	movs	r1, #1
 8008400:	5499      	strb	r1, [r3, r2]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	223f      	movs	r2, #63	; 0x3f
 8008406:	2101      	movs	r1, #1
 8008408:	5499      	strb	r1, [r3, r2]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2240      	movs	r2, #64	; 0x40
 800840e:	2101      	movs	r1, #1
 8008410:	5499      	strb	r1, [r3, r2]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2241      	movs	r2, #65	; 0x41
 8008416:	2101      	movs	r1, #1
 8008418:	5499      	strb	r1, [r3, r2]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2242      	movs	r2, #66	; 0x42
 800841e:	2101      	movs	r1, #1
 8008420:	5499      	strb	r1, [r3, r2]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2243      	movs	r2, #67	; 0x43
 8008426:	2101      	movs	r1, #1
 8008428:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2244      	movs	r2, #68	; 0x44
 800842e:	2101      	movs	r1, #1
 8008430:	5499      	strb	r1, [r3, r2]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2245      	movs	r2, #69	; 0x45
 8008436:	2101      	movs	r1, #1
 8008438:	5499      	strb	r1, [r3, r2]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2246      	movs	r2, #70	; 0x46
 800843e:	2101      	movs	r1, #1
 8008440:	5499      	strb	r1, [r3, r2]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2247      	movs	r2, #71	; 0x47
 8008446:	2101      	movs	r1, #1
 8008448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	223d      	movs	r2, #61	; 0x3d
 800844e:	2101      	movs	r1, #1
 8008450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	0018      	movs	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	b002      	add	sp, #8
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <HAL_TIM_PWM_Start+0x22>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	223e      	movs	r2, #62	; 0x3e
 8008470:	5c9b      	ldrb	r3, [r3, r2]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	1e5a      	subs	r2, r3, #1
 8008478:	4193      	sbcs	r3, r2
 800847a:	b2db      	uxtb	r3, r3
 800847c:	e037      	b.n	80084ee <HAL_TIM_PWM_Start+0x92>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d108      	bne.n	8008496 <HAL_TIM_PWM_Start+0x3a>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	223f      	movs	r2, #63	; 0x3f
 8008488:	5c9b      	ldrb	r3, [r3, r2]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	1e5a      	subs	r2, r3, #1
 8008490:	4193      	sbcs	r3, r2
 8008492:	b2db      	uxtb	r3, r3
 8008494:	e02b      	b.n	80084ee <HAL_TIM_PWM_Start+0x92>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b08      	cmp	r3, #8
 800849a:	d108      	bne.n	80084ae <HAL_TIM_PWM_Start+0x52>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2240      	movs	r2, #64	; 0x40
 80084a0:	5c9b      	ldrb	r3, [r3, r2]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	3b01      	subs	r3, #1
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	4193      	sbcs	r3, r2
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	e01f      	b.n	80084ee <HAL_TIM_PWM_Start+0x92>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	d108      	bne.n	80084c6 <HAL_TIM_PWM_Start+0x6a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2241      	movs	r2, #65	; 0x41
 80084b8:	5c9b      	ldrb	r3, [r3, r2]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	1e5a      	subs	r2, r3, #1
 80084c0:	4193      	sbcs	r3, r2
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	e013      	b.n	80084ee <HAL_TIM_PWM_Start+0x92>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d108      	bne.n	80084de <HAL_TIM_PWM_Start+0x82>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2242      	movs	r2, #66	; 0x42
 80084d0:	5c9b      	ldrb	r3, [r3, r2]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	1e5a      	subs	r2, r3, #1
 80084d8:	4193      	sbcs	r3, r2
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	e007      	b.n	80084ee <HAL_TIM_PWM_Start+0x92>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2243      	movs	r2, #67	; 0x43
 80084e2:	5c9b      	ldrb	r3, [r3, r2]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	4193      	sbcs	r3, r2
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e08b      	b.n	800860e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <HAL_TIM_PWM_Start+0xaa>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	223e      	movs	r2, #62	; 0x3e
 8008500:	2102      	movs	r1, #2
 8008502:	5499      	strb	r1, [r3, r2]
 8008504:	e023      	b.n	800854e <HAL_TIM_PWM_Start+0xf2>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b04      	cmp	r3, #4
 800850a:	d104      	bne.n	8008516 <HAL_TIM_PWM_Start+0xba>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	223f      	movs	r2, #63	; 0x3f
 8008510:	2102      	movs	r1, #2
 8008512:	5499      	strb	r1, [r3, r2]
 8008514:	e01b      	b.n	800854e <HAL_TIM_PWM_Start+0xf2>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b08      	cmp	r3, #8
 800851a:	d104      	bne.n	8008526 <HAL_TIM_PWM_Start+0xca>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2240      	movs	r2, #64	; 0x40
 8008520:	2102      	movs	r1, #2
 8008522:	5499      	strb	r1, [r3, r2]
 8008524:	e013      	b.n	800854e <HAL_TIM_PWM_Start+0xf2>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b0c      	cmp	r3, #12
 800852a:	d104      	bne.n	8008536 <HAL_TIM_PWM_Start+0xda>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2241      	movs	r2, #65	; 0x41
 8008530:	2102      	movs	r1, #2
 8008532:	5499      	strb	r1, [r3, r2]
 8008534:	e00b      	b.n	800854e <HAL_TIM_PWM_Start+0xf2>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b10      	cmp	r3, #16
 800853a:	d104      	bne.n	8008546 <HAL_TIM_PWM_Start+0xea>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2242      	movs	r2, #66	; 0x42
 8008540:	2102      	movs	r1, #2
 8008542:	5499      	strb	r1, [r3, r2]
 8008544:	e003      	b.n	800854e <HAL_TIM_PWM_Start+0xf2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2243      	movs	r2, #67	; 0x43
 800854a:	2102      	movs	r1, #2
 800854c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	0018      	movs	r0, r3
 8008558:	f000 fd3a 	bl	8008fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <HAL_TIM_PWM_Start+0x1bc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <HAL_TIM_PWM_Start+0x128>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2c      	ldr	r2, [pc, #176]	; (800861c <HAL_TIM_PWM_Start+0x1c0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_TIM_PWM_Start+0x128>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <HAL_TIM_PWM_Start+0x1c4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_TIM_PWM_Start+0x128>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a29      	ldr	r2, [pc, #164]	; (8008624 <HAL_TIM_PWM_Start+0x1c8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d101      	bne.n	8008588 <HAL_TIM_PWM_Start+0x12c>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <HAL_TIM_PWM_Start+0x12e>
 8008588:	2300      	movs	r3, #0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d008      	beq.n	80085a0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2180      	movs	r1, #128	; 0x80
 800859a:	0209      	lsls	r1, r1, #8
 800859c:	430a      	orrs	r2, r1
 800859e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <HAL_TIM_PWM_Start+0x1bc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00f      	beq.n	80085ca <HAL_TIM_PWM_Start+0x16e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	2380      	movs	r3, #128	; 0x80
 80085b0:	05db      	lsls	r3, r3, #23
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d009      	beq.n	80085ca <HAL_TIM_PWM_Start+0x16e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1b      	ldr	r2, [pc, #108]	; (8008628 <HAL_TIM_PWM_Start+0x1cc>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <HAL_TIM_PWM_Start+0x16e>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a15      	ldr	r2, [pc, #84]	; (800861c <HAL_TIM_PWM_Start+0x1c0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d116      	bne.n	80085f8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4a16      	ldr	r2, [pc, #88]	; (800862c <HAL_TIM_PWM_Start+0x1d0>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b06      	cmp	r3, #6
 80085da:	d016      	beq.n	800860a <HAL_TIM_PWM_Start+0x1ae>
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	2380      	movs	r3, #128	; 0x80
 80085e0:	025b      	lsls	r3, r3, #9
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d011      	beq.n	800860a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2101      	movs	r1, #1
 80085f2:	430a      	orrs	r2, r1
 80085f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f6:	e008      	b.n	800860a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2101      	movs	r1, #1
 8008604:	430a      	orrs	r2, r1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e000      	b.n	800860c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	0018      	movs	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	b004      	add	sp, #16
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	40012c00 	.word	0x40012c00
 800861c:	40014000 	.word	0x40014000
 8008620:	40014400 	.word	0x40014400
 8008624:	40014800 	.word	0x40014800
 8008628:	40000400 	.word	0x40000400
 800862c:	00010007 	.word	0x00010007

08008630 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	2200      	movs	r2, #0
 8008642:	0018      	movs	r0, r3
 8008644:	f000 fcc4 	bl	8008fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a37      	ldr	r2, [pc, #220]	; (800872c <HAL_TIM_PWM_Stop+0xfc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00e      	beq.n	8008670 <HAL_TIM_PWM_Stop+0x40>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a36      	ldr	r2, [pc, #216]	; (8008730 <HAL_TIM_PWM_Stop+0x100>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d009      	beq.n	8008670 <HAL_TIM_PWM_Stop+0x40>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a34      	ldr	r2, [pc, #208]	; (8008734 <HAL_TIM_PWM_Stop+0x104>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <HAL_TIM_PWM_Stop+0x40>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a33      	ldr	r2, [pc, #204]	; (8008738 <HAL_TIM_PWM_Stop+0x108>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d101      	bne.n	8008674 <HAL_TIM_PWM_Stop+0x44>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <HAL_TIM_PWM_Stop+0x46>
 8008674:	2300      	movs	r3, #0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d013      	beq.n	80086a2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	4a2e      	ldr	r2, [pc, #184]	; (800873c <HAL_TIM_PWM_Stop+0x10c>)
 8008682:	4013      	ands	r3, r2
 8008684:	d10d      	bne.n	80086a2 <HAL_TIM_PWM_Stop+0x72>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	4a2c      	ldr	r2, [pc, #176]	; (8008740 <HAL_TIM_PWM_Stop+0x110>)
 800868e:	4013      	ands	r3, r2
 8008690:	d107      	bne.n	80086a2 <HAL_TIM_PWM_Stop+0x72>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4929      	ldr	r1, [pc, #164]	; (8008744 <HAL_TIM_PWM_Stop+0x114>)
 800869e:	400a      	ands	r2, r1
 80086a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	4a24      	ldr	r2, [pc, #144]	; (800873c <HAL_TIM_PWM_Stop+0x10c>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	d10d      	bne.n	80086ca <HAL_TIM_PWM_Stop+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	4a22      	ldr	r2, [pc, #136]	; (8008740 <HAL_TIM_PWM_Stop+0x110>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	d107      	bne.n	80086ca <HAL_TIM_PWM_Stop+0x9a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2101      	movs	r1, #1
 80086c6:	438a      	bics	r2, r1
 80086c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Stop+0xaa>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	223e      	movs	r2, #62	; 0x3e
 80086d4:	2101      	movs	r1, #1
 80086d6:	5499      	strb	r1, [r3, r2]
 80086d8:	e023      	b.n	8008722 <HAL_TIM_PWM_Stop+0xf2>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Stop+0xba>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	223f      	movs	r2, #63	; 0x3f
 80086e4:	2101      	movs	r1, #1
 80086e6:	5499      	strb	r1, [r3, r2]
 80086e8:	e01b      	b.n	8008722 <HAL_TIM_PWM_Stop+0xf2>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Stop+0xca>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2240      	movs	r2, #64	; 0x40
 80086f4:	2101      	movs	r1, #1
 80086f6:	5499      	strb	r1, [r3, r2]
 80086f8:	e013      	b.n	8008722 <HAL_TIM_PWM_Stop+0xf2>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b0c      	cmp	r3, #12
 80086fe:	d104      	bne.n	800870a <HAL_TIM_PWM_Stop+0xda>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2241      	movs	r2, #65	; 0x41
 8008704:	2101      	movs	r1, #1
 8008706:	5499      	strb	r1, [r3, r2]
 8008708:	e00b      	b.n	8008722 <HAL_TIM_PWM_Stop+0xf2>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b10      	cmp	r3, #16
 800870e:	d104      	bne.n	800871a <HAL_TIM_PWM_Stop+0xea>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2242      	movs	r2, #66	; 0x42
 8008714:	2101      	movs	r1, #1
 8008716:	5499      	strb	r1, [r3, r2]
 8008718:	e003      	b.n	8008722 <HAL_TIM_PWM_Stop+0xf2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2243      	movs	r2, #67	; 0x43
 800871e:	2101      	movs	r1, #1
 8008720:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b002      	add	sp, #8
 800872a:	bd80      	pop	{r7, pc}
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800
 800873c:	00001111 	.word	0x00001111
 8008740:	00000444 	.word	0x00000444
 8008744:	ffff7fff 	.word	0xffff7fff

08008748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008754:	2317      	movs	r3, #23
 8008756:	18fb      	adds	r3, r7, r3
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	223c      	movs	r2, #60	; 0x3c
 8008760:	5c9b      	ldrb	r3, [r3, r2]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_TIM_PWM_ConfigChannel+0x22>
 8008766:	2302      	movs	r3, #2
 8008768:	e0e5      	b.n	8008936 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	223c      	movs	r2, #60	; 0x3c
 800876e:	2101      	movs	r1, #1
 8008770:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b14      	cmp	r3, #20
 8008776:	d900      	bls.n	800877a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008778:	e0d1      	b.n	800891e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	009a      	lsls	r2, r3, #2
 800877e:	4b70      	ldr	r3, [pc, #448]	; (8008940 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008780:	18d3      	adds	r3, r2, r3
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f000 f95a 	bl	8008a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2108      	movs	r1, #8
 80087a0:	430a      	orrs	r2, r1
 80087a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2104      	movs	r1, #4
 80087b0:	438a      	bics	r2, r1
 80087b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6999      	ldr	r1, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	619a      	str	r2, [r3, #24]
      break;
 80087c6:	e0af      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	0011      	movs	r1, r2
 80087d0:	0018      	movs	r0, r3
 80087d2:	f000 f9c3 	bl	8008b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	0109      	lsls	r1, r1, #4
 80087e4:	430a      	orrs	r2, r1
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4954      	ldr	r1, [pc, #336]	; (8008944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80087f4:	400a      	ands	r2, r1
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]
      break;
 800880c:	e08c      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0011      	movs	r1, r2
 8008816:	0018      	movs	r0, r3
 8008818:	f000 fa24 	bl	8008c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2108      	movs	r1, #8
 8008828:	430a      	orrs	r2, r1
 800882a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69da      	ldr	r2, [r3, #28]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2104      	movs	r1, #4
 8008838:	438a      	bics	r2, r1
 800883a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69d9      	ldr	r1, [r3, #28]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	61da      	str	r2, [r3, #28]
      break;
 800884e:	e06b      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	0011      	movs	r1, r2
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fa8b 	bl	8008d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69da      	ldr	r2, [r3, #28]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2180      	movs	r1, #128	; 0x80
 800886a:	0109      	lsls	r1, r1, #4
 800886c:	430a      	orrs	r2, r1
 800886e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69da      	ldr	r2, [r3, #28]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4932      	ldr	r1, [pc, #200]	; (8008944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800887c:	400a      	ands	r2, r1
 800887e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69d9      	ldr	r1, [r3, #28]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	021a      	lsls	r2, r3, #8
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	61da      	str	r2, [r3, #28]
      break;
 8008894:	e048      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	0011      	movs	r1, r2
 800889e:	0018      	movs	r0, r3
 80088a0:	f000 fad2 	bl	8008e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2108      	movs	r1, #8
 80088b0:	430a      	orrs	r2, r1
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2104      	movs	r1, #4
 80088c0:	438a      	bics	r2, r1
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088d6:	e027      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	0011      	movs	r1, r2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f000 fb11 	bl	8008f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2180      	movs	r1, #128	; 0x80
 80088f2:	0109      	lsls	r1, r1, #4
 80088f4:	430a      	orrs	r2, r1
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4910      	ldr	r1, [pc, #64]	; (8008944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008904:	400a      	ands	r2, r1
 8008906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800891c:	e004      	b.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800891e:	2317      	movs	r3, #23
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	2201      	movs	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
      break;
 8008926:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	223c      	movs	r2, #60	; 0x3c
 800892c:	2100      	movs	r1, #0
 800892e:	5499      	strb	r1, [r3, r2]

  return status;
 8008930:	2317      	movs	r3, #23
 8008932:	18fb      	adds	r3, r7, r3
 8008934:	781b      	ldrb	r3, [r3, #0]
}
 8008936:	0018      	movs	r0, r3
 8008938:	46bd      	mov	sp, r7
 800893a:	b006      	add	sp, #24
 800893c:	bd80      	pop	{r7, pc}
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	0800fb0c 	.word	0x0800fb0c
 8008944:	fffffbff 	.word	0xfffffbff

08008948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a34      	ldr	r2, [pc, #208]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d008      	beq.n	8008972 <TIM_Base_SetConfig+0x2a>
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	2380      	movs	r3, #128	; 0x80
 8008964:	05db      	lsls	r3, r3, #23
 8008966:	429a      	cmp	r2, r3
 8008968:	d003      	beq.n	8008972 <TIM_Base_SetConfig+0x2a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a30      	ldr	r2, [pc, #192]	; (8008a30 <TIM_Base_SetConfig+0xe8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2270      	movs	r2, #112	; 0x70
 8008976:	4393      	bics	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d018      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	2380      	movs	r3, #128	; 0x80
 8008990:	05db      	lsls	r3, r3, #23
 8008992:	429a      	cmp	r2, r3
 8008994:	d013      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a25      	ldr	r2, [pc, #148]	; (8008a30 <TIM_Base_SetConfig+0xe8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00f      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a24      	ldr	r2, [pc, #144]	; (8008a34 <TIM_Base_SetConfig+0xec>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00b      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a23      	ldr	r2, [pc, #140]	; (8008a38 <TIM_Base_SetConfig+0xf0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d007      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a22      	ldr	r2, [pc, #136]	; (8008a3c <TIM_Base_SetConfig+0xf4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_Base_SetConfig+0x76>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a21      	ldr	r2, [pc, #132]	; (8008a40 <TIM_Base_SetConfig+0xf8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d108      	bne.n	80089d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4a20      	ldr	r2, [pc, #128]	; (8008a44 <TIM_Base_SetConfig+0xfc>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2280      	movs	r2, #128	; 0x80
 80089d4:	4393      	bics	r3, r2
 80089d6:	001a      	movs	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00b      	beq.n	8008a16 <TIM_Base_SetConfig+0xce>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a0d      	ldr	r2, [pc, #52]	; (8008a38 <TIM_Base_SetConfig+0xf0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <TIM_Base_SetConfig+0xce>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <TIM_Base_SetConfig+0xf4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_Base_SetConfig+0xce>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a0b      	ldr	r2, [pc, #44]	; (8008a40 <TIM_Base_SetConfig+0xf8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d103      	bne.n	8008a1e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	615a      	str	r2, [r3, #20]
}
 8008a24:	46c0      	nop			; (mov r8, r8)
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b004      	add	sp, #16
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40012c00 	.word	0x40012c00
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40002000 	.word	0x40002000
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40014400 	.word	0x40014400
 8008a40:	40014800 	.word	0x40014800
 8008a44:	fffffcff 	.word	0xfffffcff

08008a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	2201      	movs	r2, #1
 8008a58:	4393      	bics	r3, r2
 8008a5a:	001a      	movs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4a32      	ldr	r2, [pc, #200]	; (8008b40 <TIM_OC1_SetConfig+0xf8>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	4393      	bics	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	4393      	bics	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a28      	ldr	r2, [pc, #160]	; (8008b44 <TIM_OC1_SetConfig+0xfc>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_OC1_SetConfig+0x76>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <TIM_OC1_SetConfig+0x100>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_OC1_SetConfig+0x76>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <TIM_OC1_SetConfig+0x104>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_OC1_SetConfig+0x76>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a25      	ldr	r2, [pc, #148]	; (8008b50 <TIM_OC1_SetConfig+0x108>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d10c      	bne.n	8008ad8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	4393      	bics	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	4393      	bics	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1a      	ldr	r2, [pc, #104]	; (8008b44 <TIM_OC1_SetConfig+0xfc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <TIM_OC1_SetConfig+0xb0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <TIM_OC1_SetConfig+0x100>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d007      	beq.n	8008af8 <TIM_OC1_SetConfig+0xb0>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <TIM_OC1_SetConfig+0x104>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d003      	beq.n	8008af8 <TIM_OC1_SetConfig+0xb0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <TIM_OC1_SetConfig+0x108>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d111      	bne.n	8008b1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4a16      	ldr	r2, [pc, #88]	; (8008b54 <TIM_OC1_SetConfig+0x10c>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <TIM_OC1_SetConfig+0x110>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	b006      	add	sp, #24
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	fffeff8f 	.word	0xfffeff8f
 8008b44:	40012c00 	.word	0x40012c00
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40014400 	.word	0x40014400
 8008b50:	40014800 	.word	0x40014800
 8008b54:	fffffeff 	.word	0xfffffeff
 8008b58:	fffffdff 	.word	0xfffffdff

08008b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	4393      	bics	r3, r2
 8008b6e:	001a      	movs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a2e      	ldr	r2, [pc, #184]	; (8008c44 <TIM_OC2_SetConfig+0xe8>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4a2d      	ldr	r2, [pc, #180]	; (8008c48 <TIM_OC2_SetConfig+0xec>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	4393      	bics	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a24      	ldr	r2, [pc, #144]	; (8008c4c <TIM_OC2_SetConfig+0xf0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d10d      	bne.n	8008bda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2280      	movs	r2, #128	; 0x80
 8008bc2:	4393      	bics	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2240      	movs	r2, #64	; 0x40
 8008bd6:	4393      	bics	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1b      	ldr	r2, [pc, #108]	; (8008c4c <TIM_OC2_SetConfig+0xf0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <TIM_OC2_SetConfig+0x9e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1a      	ldr	r2, [pc, #104]	; (8008c50 <TIM_OC2_SetConfig+0xf4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_OC2_SetConfig+0x9e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <TIM_OC2_SetConfig+0xf8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_OC2_SetConfig+0x9e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <TIM_OC2_SetConfig+0xfc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d113      	bne.n	8008c22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <TIM_OC2_SetConfig+0x100>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	4a16      	ldr	r2, [pc, #88]	; (8008c60 <TIM_OC2_SetConfig+0x104>)
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	621a      	str	r2, [r3, #32]
}
 8008c3c:	46c0      	nop			; (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b006      	add	sp, #24
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	feff8fff 	.word	0xfeff8fff
 8008c48:	fffffcff 	.word	0xfffffcff
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40014400 	.word	0x40014400
 8008c58:	40014800 	.word	0x40014800
 8008c5c:	fffffbff 	.word	0xfffffbff
 8008c60:	fffff7ff 	.word	0xfffff7ff

08008c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	4a35      	ldr	r2, [pc, #212]	; (8008d48 <TIM_OC3_SetConfig+0xe4>)
 8008c74:	401a      	ands	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a2f      	ldr	r2, [pc, #188]	; (8008d4c <TIM_OC3_SetConfig+0xe8>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2203      	movs	r2, #3
 8008c98:	4393      	bics	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	4a29      	ldr	r2, [pc, #164]	; (8008d50 <TIM_OC3_SetConfig+0xec>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <TIM_OC3_SetConfig+0xf0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d10d      	bne.n	8008cde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <TIM_OC3_SetConfig+0xf4>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <TIM_OC3_SetConfig+0xf8>)
 8008cda:	4013      	ands	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a1c      	ldr	r2, [pc, #112]	; (8008d54 <TIM_OC3_SetConfig+0xf0>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00b      	beq.n	8008cfe <TIM_OC3_SetConfig+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <TIM_OC3_SetConfig+0xfc>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d007      	beq.n	8008cfe <TIM_OC3_SetConfig+0x9a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a1c      	ldr	r2, [pc, #112]	; (8008d64 <TIM_OC3_SetConfig+0x100>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_OC3_SetConfig+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <TIM_OC3_SetConfig+0x104>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d113      	bne.n	8008d26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4a1a      	ldr	r2, [pc, #104]	; (8008d6c <TIM_OC3_SetConfig+0x108>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4a19      	ldr	r2, [pc, #100]	; (8008d70 <TIM_OC3_SetConfig+0x10c>)
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	621a      	str	r2, [r3, #32]
}
 8008d40:	46c0      	nop			; (mov r8, r8)
 8008d42:	46bd      	mov	sp, r7
 8008d44:	b006      	add	sp, #24
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	fffffeff 	.word	0xfffffeff
 8008d4c:	fffeff8f 	.word	0xfffeff8f
 8008d50:	fffffdff 	.word	0xfffffdff
 8008d54:	40012c00 	.word	0x40012c00
 8008d58:	fffff7ff 	.word	0xfffff7ff
 8008d5c:	fffffbff 	.word	0xfffffbff
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40014400 	.word	0x40014400
 8008d68:	40014800 	.word	0x40014800
 8008d6c:	ffffefff 	.word	0xffffefff
 8008d70:	ffffdfff 	.word	0xffffdfff

08008d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	4a28      	ldr	r2, [pc, #160]	; (8008e24 <TIM_OC4_SetConfig+0xb0>)
 8008d84:	401a      	ands	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a22      	ldr	r2, [pc, #136]	; (8008e28 <TIM_OC4_SetConfig+0xb4>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <TIM_OC4_SetConfig+0xb8>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <TIM_OC4_SetConfig+0xbc>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	031b      	lsls	r3, r3, #12
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a19      	ldr	r2, [pc, #100]	; (8008e34 <TIM_OC4_SetConfig+0xc0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00b      	beq.n	8008dec <TIM_OC4_SetConfig+0x78>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a18      	ldr	r2, [pc, #96]	; (8008e38 <TIM_OC4_SetConfig+0xc4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d007      	beq.n	8008dec <TIM_OC4_SetConfig+0x78>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a17      	ldr	r2, [pc, #92]	; (8008e3c <TIM_OC4_SetConfig+0xc8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d003      	beq.n	8008dec <TIM_OC4_SetConfig+0x78>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <TIM_OC4_SetConfig+0xcc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d109      	bne.n	8008e00 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <TIM_OC4_SetConfig+0xd0>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	019b      	lsls	r3, r3, #6
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b006      	add	sp, #24
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	ffffefff 	.word	0xffffefff
 8008e28:	feff8fff 	.word	0xfeff8fff
 8008e2c:	fffffcff 	.word	0xfffffcff
 8008e30:	ffffdfff 	.word	0xffffdfff
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	40014800 	.word	0x40014800
 8008e44:	ffffbfff 	.word	0xffffbfff

08008e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	4a25      	ldr	r2, [pc, #148]	; (8008eec <TIM_OC5_SetConfig+0xa4>)
 8008e58:	401a      	ands	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <TIM_OC5_SetConfig+0xa8>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <TIM_OC5_SetConfig+0xac>)
 8008e86:	4013      	ands	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	041b      	lsls	r3, r3, #16
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <TIM_OC5_SetConfig+0xb0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00b      	beq.n	8008eb6 <TIM_OC5_SetConfig+0x6e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a16      	ldr	r2, [pc, #88]	; (8008efc <TIM_OC5_SetConfig+0xb4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d007      	beq.n	8008eb6 <TIM_OC5_SetConfig+0x6e>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <TIM_OC5_SetConfig+0xb8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d003      	beq.n	8008eb6 <TIM_OC5_SetConfig+0x6e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <TIM_OC5_SetConfig+0xbc>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d109      	bne.n	8008eca <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <TIM_OC5_SetConfig+0xa4>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	621a      	str	r2, [r3, #32]
}
 8008ee4:	46c0      	nop			; (mov r8, r8)
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b006      	add	sp, #24
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	fffeffff 	.word	0xfffeffff
 8008ef0:	fffeff8f 	.word	0xfffeff8f
 8008ef4:	fffdffff 	.word	0xfffdffff
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40014400 	.word	0x40014400
 8008f04:	40014800 	.word	0x40014800

08008f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <TIM_OC6_SetConfig+0xa8>)
 8008f18:	401a      	ands	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4a20      	ldr	r2, [pc, #128]	; (8008fb4 <TIM_OC6_SetConfig+0xac>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	4a1c      	ldr	r2, [pc, #112]	; (8008fb8 <TIM_OC6_SetConfig+0xb0>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	051b      	lsls	r3, r3, #20
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <TIM_OC6_SetConfig+0xb4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00b      	beq.n	8008f78 <TIM_OC6_SetConfig+0x70>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a17      	ldr	r2, [pc, #92]	; (8008fc0 <TIM_OC6_SetConfig+0xb8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <TIM_OC6_SetConfig+0x70>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a16      	ldr	r2, [pc, #88]	; (8008fc4 <TIM_OC6_SetConfig+0xbc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_OC6_SetConfig+0x70>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <TIM_OC6_SetConfig+0xc0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d109      	bne.n	8008f8c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <TIM_OC6_SetConfig+0xc4>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	029b      	lsls	r3, r3, #10
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b006      	add	sp, #24
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	ffefffff 	.word	0xffefffff
 8008fb4:	feff8fff 	.word	0xfeff8fff
 8008fb8:	ffdfffff 	.word	0xffdfffff
 8008fbc:	40012c00 	.word	0x40012c00
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	40014400 	.word	0x40014400
 8008fc8:	40014800 	.word	0x40014800
 8008fcc:	fffbffff 	.word	0xfffbffff

08008fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	221f      	movs	r2, #31
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	0013      	movs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	43d2      	mvns	r2, r2
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	211f      	movs	r1, #31
 8009000:	400b      	ands	r3, r1
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4099      	lsls	r1, r3
 8009006:	000b      	movs	r3, r1
 8009008:	431a      	orrs	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	46bd      	mov	sp, r7
 8009012:	b006      	add	sp, #24
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	223c      	movs	r2, #60	; 0x3c
 8009026:	5c9b      	ldrb	r3, [r3, r2]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800902c:	2302      	movs	r3, #2
 800902e:	e055      	b.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	223c      	movs	r2, #60	; 0x3c
 8009034:	2101      	movs	r1, #1
 8009036:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	223d      	movs	r2, #61	; 0x3d
 800903c:	2102      	movs	r1, #2
 800903e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a23      	ldr	r2, [pc, #140]	; (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d108      	bne.n	800906c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a22      	ldr	r2, [pc, #136]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800905e:	4013      	ands	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2270      	movs	r2, #112	; 0x70
 8009070:	4393      	bics	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00f      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	2380      	movs	r3, #128	; 0x80
 8009096:	05db      	lsls	r3, r3, #23
 8009098:	429a      	cmp	r2, r3
 800909a:	d009      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a12      	ldr	r2, [pc, #72]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a11      	ldr	r2, [pc, #68]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10c      	bne.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2280      	movs	r2, #128	; 0x80
 80090b4:	4393      	bics	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	223d      	movs	r2, #61	; 0x3d
 80090ce:	2101      	movs	r1, #1
 80090d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	223c      	movs	r2, #60	; 0x3c
 80090d6:	2100      	movs	r1, #0
 80090d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	0018      	movs	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	b004      	add	sp, #16
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	ff0fffff 	.word	0xff0fffff
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40014000 	.word	0x40014000

080090f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e046      	b.n	8009194 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2288      	movs	r2, #136	; 0x88
 800910a:	589b      	ldr	r3, [r3, r2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d107      	bne.n	8009120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2284      	movs	r2, #132	; 0x84
 8009114:	2100      	movs	r1, #0
 8009116:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	0018      	movs	r0, r3
 800911c:	f7fb feb6 	bl	8004e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2288      	movs	r2, #136	; 0x88
 8009124:	2124      	movs	r1, #36	; 0x24
 8009126:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2101      	movs	r1, #1
 8009134:	438a      	bics	r2, r1
 8009136:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	0018      	movs	r0, r3
 800913c:	f000 f830 	bl	80091a0 <UART_SetConfig>
 8009140:	0003      	movs	r3, r0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e024      	b.n	8009194 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	0018      	movs	r0, r3
 8009156:	f000 fae1 	bl	800971c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	490d      	ldr	r1, [pc, #52]	; (800919c <HAL_UART_Init+0xa8>)
 8009166:	400a      	ands	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	212a      	movs	r1, #42	; 0x2a
 8009176:	438a      	bics	r2, r1
 8009178:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2101      	movs	r1, #1
 8009186:	430a      	orrs	r2, r1
 8009188:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	0018      	movs	r0, r3
 800918e:	f000 fb79 	bl	8009884 <UART_CheckIdleState>
 8009192:	0003      	movs	r3, r0
}
 8009194:	0018      	movs	r0, r3
 8009196:	46bd      	mov	sp, r7
 8009198:	b002      	add	sp, #8
 800919a:	bd80      	pop	{r7, pc}
 800919c:	ffffb7ff 	.word	0xffffb7ff

080091a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a0:	b5b0      	push	{r4, r5, r7, lr}
 80091a2:	b090      	sub	sp, #64	; 0x40
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091a8:	231a      	movs	r3, #26
 80091aa:	2220      	movs	r2, #32
 80091ac:	189b      	adds	r3, r3, r2
 80091ae:	19db      	adds	r3, r3, r7
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	431a      	orrs	r2, r3
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4aaf      	ldr	r2, [pc, #700]	; (8009490 <UART_SetConfig+0x2f0>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	0019      	movs	r1, r3
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	430b      	orrs	r3, r1
 80091e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	4aaa      	ldr	r2, [pc, #680]	; (8009494 <UART_SetConfig+0x2f4>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	68d9      	ldr	r1, [r3, #12]
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	0003      	movs	r3, r0
 80091f8:	430b      	orrs	r3, r1
 80091fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4aa4      	ldr	r2, [pc, #656]	; (8009498 <UART_SetConfig+0x2f8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009212:	4313      	orrs	r3, r2
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4a9f      	ldr	r2, [pc, #636]	; (800949c <UART_SetConfig+0x2fc>)
 800921e:	4013      	ands	r3, r2
 8009220:	0019      	movs	r1, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	430b      	orrs	r3, r1
 800922a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	220f      	movs	r2, #15
 8009234:	4393      	bics	r3, r2
 8009236:	0018      	movs	r0, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	0003      	movs	r3, r0
 8009242:	430b      	orrs	r3, r1
 8009244:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a95      	ldr	r2, [pc, #596]	; (80094a0 <UART_SetConfig+0x300>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d131      	bne.n	80092b4 <UART_SetConfig+0x114>
 8009250:	4b94      	ldr	r3, [pc, #592]	; (80094a4 <UART_SetConfig+0x304>)
 8009252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009254:	2203      	movs	r2, #3
 8009256:	4013      	ands	r3, r2
 8009258:	2b03      	cmp	r3, #3
 800925a:	d01d      	beq.n	8009298 <UART_SetConfig+0xf8>
 800925c:	d823      	bhi.n	80092a6 <UART_SetConfig+0x106>
 800925e:	2b02      	cmp	r3, #2
 8009260:	d00c      	beq.n	800927c <UART_SetConfig+0xdc>
 8009262:	d820      	bhi.n	80092a6 <UART_SetConfig+0x106>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <UART_SetConfig+0xce>
 8009268:	2b01      	cmp	r3, #1
 800926a:	d00e      	beq.n	800928a <UART_SetConfig+0xea>
 800926c:	e01b      	b.n	80092a6 <UART_SetConfig+0x106>
 800926e:	231b      	movs	r3, #27
 8009270:	2220      	movs	r2, #32
 8009272:	189b      	adds	r3, r3, r2
 8009274:	19db      	adds	r3, r3, r7
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e0b4      	b.n	80093e6 <UART_SetConfig+0x246>
 800927c:	231b      	movs	r3, #27
 800927e:	2220      	movs	r2, #32
 8009280:	189b      	adds	r3, r3, r2
 8009282:	19db      	adds	r3, r3, r7
 8009284:	2202      	movs	r2, #2
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e0ad      	b.n	80093e6 <UART_SetConfig+0x246>
 800928a:	231b      	movs	r3, #27
 800928c:	2220      	movs	r2, #32
 800928e:	189b      	adds	r3, r3, r2
 8009290:	19db      	adds	r3, r3, r7
 8009292:	2204      	movs	r2, #4
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e0a6      	b.n	80093e6 <UART_SetConfig+0x246>
 8009298:	231b      	movs	r3, #27
 800929a:	2220      	movs	r2, #32
 800929c:	189b      	adds	r3, r3, r2
 800929e:	19db      	adds	r3, r3, r7
 80092a0:	2208      	movs	r2, #8
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e09f      	b.n	80093e6 <UART_SetConfig+0x246>
 80092a6:	231b      	movs	r3, #27
 80092a8:	2220      	movs	r2, #32
 80092aa:	189b      	adds	r3, r3, r2
 80092ac:	19db      	adds	r3, r3, r7
 80092ae:	2210      	movs	r2, #16
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e098      	b.n	80093e6 <UART_SetConfig+0x246>
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a7b      	ldr	r2, [pc, #492]	; (80094a8 <UART_SetConfig+0x308>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d131      	bne.n	8009322 <UART_SetConfig+0x182>
 80092be:	4b79      	ldr	r3, [pc, #484]	; (80094a4 <UART_SetConfig+0x304>)
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	220c      	movs	r2, #12
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b0c      	cmp	r3, #12
 80092c8:	d01d      	beq.n	8009306 <UART_SetConfig+0x166>
 80092ca:	d823      	bhi.n	8009314 <UART_SetConfig+0x174>
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d00c      	beq.n	80092ea <UART_SetConfig+0x14a>
 80092d0:	d820      	bhi.n	8009314 <UART_SetConfig+0x174>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <UART_SetConfig+0x13c>
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d00e      	beq.n	80092f8 <UART_SetConfig+0x158>
 80092da:	e01b      	b.n	8009314 <UART_SetConfig+0x174>
 80092dc:	231b      	movs	r3, #27
 80092de:	2220      	movs	r2, #32
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	19db      	adds	r3, r3, r7
 80092e4:	2200      	movs	r2, #0
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	e07d      	b.n	80093e6 <UART_SetConfig+0x246>
 80092ea:	231b      	movs	r3, #27
 80092ec:	2220      	movs	r2, #32
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	19db      	adds	r3, r3, r7
 80092f2:	2202      	movs	r2, #2
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e076      	b.n	80093e6 <UART_SetConfig+0x246>
 80092f8:	231b      	movs	r3, #27
 80092fa:	2220      	movs	r2, #32
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	19db      	adds	r3, r3, r7
 8009300:	2204      	movs	r2, #4
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e06f      	b.n	80093e6 <UART_SetConfig+0x246>
 8009306:	231b      	movs	r3, #27
 8009308:	2220      	movs	r2, #32
 800930a:	189b      	adds	r3, r3, r2
 800930c:	19db      	adds	r3, r3, r7
 800930e:	2208      	movs	r2, #8
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e068      	b.n	80093e6 <UART_SetConfig+0x246>
 8009314:	231b      	movs	r3, #27
 8009316:	2220      	movs	r2, #32
 8009318:	189b      	adds	r3, r3, r2
 800931a:	19db      	adds	r3, r3, r7
 800931c:	2210      	movs	r2, #16
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e061      	b.n	80093e6 <UART_SetConfig+0x246>
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a61      	ldr	r2, [pc, #388]	; (80094ac <UART_SetConfig+0x30c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d106      	bne.n	800933a <UART_SetConfig+0x19a>
 800932c:	231b      	movs	r3, #27
 800932e:	2220      	movs	r2, #32
 8009330:	189b      	adds	r3, r3, r2
 8009332:	19db      	adds	r3, r3, r7
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e055      	b.n	80093e6 <UART_SetConfig+0x246>
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a5c      	ldr	r2, [pc, #368]	; (80094b0 <UART_SetConfig+0x310>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d106      	bne.n	8009352 <UART_SetConfig+0x1b2>
 8009344:	231b      	movs	r3, #27
 8009346:	2220      	movs	r2, #32
 8009348:	189b      	adds	r3, r3, r2
 800934a:	19db      	adds	r3, r3, r7
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
 8009350:	e049      	b.n	80093e6 <UART_SetConfig+0x246>
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a50      	ldr	r2, [pc, #320]	; (8009498 <UART_SetConfig+0x2f8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d13e      	bne.n	80093da <UART_SetConfig+0x23a>
 800935c:	4b51      	ldr	r3, [pc, #324]	; (80094a4 <UART_SetConfig+0x304>)
 800935e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009360:	23c0      	movs	r3, #192	; 0xc0
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	4013      	ands	r3, r2
 8009366:	22c0      	movs	r2, #192	; 0xc0
 8009368:	0112      	lsls	r2, r2, #4
 800936a:	4293      	cmp	r3, r2
 800936c:	d027      	beq.n	80093be <UART_SetConfig+0x21e>
 800936e:	22c0      	movs	r2, #192	; 0xc0
 8009370:	0112      	lsls	r2, r2, #4
 8009372:	4293      	cmp	r3, r2
 8009374:	d82a      	bhi.n	80093cc <UART_SetConfig+0x22c>
 8009376:	2280      	movs	r2, #128	; 0x80
 8009378:	0112      	lsls	r2, r2, #4
 800937a:	4293      	cmp	r3, r2
 800937c:	d011      	beq.n	80093a2 <UART_SetConfig+0x202>
 800937e:	2280      	movs	r2, #128	; 0x80
 8009380:	0112      	lsls	r2, r2, #4
 8009382:	4293      	cmp	r3, r2
 8009384:	d822      	bhi.n	80093cc <UART_SetConfig+0x22c>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <UART_SetConfig+0x1f4>
 800938a:	2280      	movs	r2, #128	; 0x80
 800938c:	00d2      	lsls	r2, r2, #3
 800938e:	4293      	cmp	r3, r2
 8009390:	d00e      	beq.n	80093b0 <UART_SetConfig+0x210>
 8009392:	e01b      	b.n	80093cc <UART_SetConfig+0x22c>
 8009394:	231b      	movs	r3, #27
 8009396:	2220      	movs	r2, #32
 8009398:	189b      	adds	r3, r3, r2
 800939a:	19db      	adds	r3, r3, r7
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e021      	b.n	80093e6 <UART_SetConfig+0x246>
 80093a2:	231b      	movs	r3, #27
 80093a4:	2220      	movs	r2, #32
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	19db      	adds	r3, r3, r7
 80093aa:	2202      	movs	r2, #2
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e01a      	b.n	80093e6 <UART_SetConfig+0x246>
 80093b0:	231b      	movs	r3, #27
 80093b2:	2220      	movs	r2, #32
 80093b4:	189b      	adds	r3, r3, r2
 80093b6:	19db      	adds	r3, r3, r7
 80093b8:	2204      	movs	r2, #4
 80093ba:	701a      	strb	r2, [r3, #0]
 80093bc:	e013      	b.n	80093e6 <UART_SetConfig+0x246>
 80093be:	231b      	movs	r3, #27
 80093c0:	2220      	movs	r2, #32
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	19db      	adds	r3, r3, r7
 80093c6:	2208      	movs	r2, #8
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e00c      	b.n	80093e6 <UART_SetConfig+0x246>
 80093cc:	231b      	movs	r3, #27
 80093ce:	2220      	movs	r2, #32
 80093d0:	189b      	adds	r3, r3, r2
 80093d2:	19db      	adds	r3, r3, r7
 80093d4:	2210      	movs	r2, #16
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e005      	b.n	80093e6 <UART_SetConfig+0x246>
 80093da:	231b      	movs	r3, #27
 80093dc:	2220      	movs	r2, #32
 80093de:	189b      	adds	r3, r3, r2
 80093e0:	19db      	adds	r3, r3, r7
 80093e2:	2210      	movs	r2, #16
 80093e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a2b      	ldr	r2, [pc, #172]	; (8009498 <UART_SetConfig+0x2f8>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d000      	beq.n	80093f2 <UART_SetConfig+0x252>
 80093f0:	e0a9      	b.n	8009546 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093f2:	231b      	movs	r3, #27
 80093f4:	2220      	movs	r2, #32
 80093f6:	189b      	adds	r3, r3, r2
 80093f8:	19db      	adds	r3, r3, r7
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d015      	beq.n	800942c <UART_SetConfig+0x28c>
 8009400:	dc18      	bgt.n	8009434 <UART_SetConfig+0x294>
 8009402:	2b04      	cmp	r3, #4
 8009404:	d00d      	beq.n	8009422 <UART_SetConfig+0x282>
 8009406:	dc15      	bgt.n	8009434 <UART_SetConfig+0x294>
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <UART_SetConfig+0x272>
 800940c:	2b02      	cmp	r3, #2
 800940e:	d005      	beq.n	800941c <UART_SetConfig+0x27c>
 8009410:	e010      	b.n	8009434 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009412:	f7fe f919 	bl	8007648 <HAL_RCC_GetPCLK1Freq>
 8009416:	0003      	movs	r3, r0
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800941a:	e014      	b.n	8009446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800941c:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <UART_SetConfig+0x314>)
 800941e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009420:	e011      	b.n	8009446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009422:	f7fe f885 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 8009426:	0003      	movs	r3, r0
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800942a:	e00c      	b.n	8009446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800942c:	2380      	movs	r3, #128	; 0x80
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009432:	e008      	b.n	8009446 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009438:	231a      	movs	r3, #26
 800943a:	2220      	movs	r2, #32
 800943c:	189b      	adds	r3, r3, r2
 800943e:	19db      	adds	r3, r3, r7
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
        break;
 8009444:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	2b00      	cmp	r3, #0
 800944a:	d100      	bne.n	800944e <UART_SetConfig+0x2ae>
 800944c:	e14b      	b.n	80096e6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <UART_SetConfig+0x318>)
 8009454:	0052      	lsls	r2, r2, #1
 8009456:	5ad3      	ldrh	r3, [r2, r3]
 8009458:	0019      	movs	r1, r3
 800945a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800945c:	f7f6 fe6e 	bl	800013c <__udivsi3>
 8009460:	0003      	movs	r3, r0
 8009462:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	0013      	movs	r3, r2
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	189b      	adds	r3, r3, r2
 800946e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009470:	429a      	cmp	r2, r3
 8009472:	d305      	bcc.n	8009480 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800947a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947c:	429a      	cmp	r2, r3
 800947e:	d91d      	bls.n	80094bc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009480:	231a      	movs	r3, #26
 8009482:	2220      	movs	r2, #32
 8009484:	189b      	adds	r3, r3, r2
 8009486:	19db      	adds	r3, r3, r7
 8009488:	2201      	movs	r2, #1
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	e12b      	b.n	80096e6 <UART_SetConfig+0x546>
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	cfff69f3 	.word	0xcfff69f3
 8009494:	ffffcfff 	.word	0xffffcfff
 8009498:	40008000 	.word	0x40008000
 800949c:	11fff4ff 	.word	0x11fff4ff
 80094a0:	40013800 	.word	0x40013800
 80094a4:	40021000 	.word	0x40021000
 80094a8:	40004400 	.word	0x40004400
 80094ac:	40004800 	.word	0x40004800
 80094b0:	40004c00 	.word	0x40004c00
 80094b4:	00f42400 	.word	0x00f42400
 80094b8:	0800fb60 	.word	0x0800fb60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094c8:	4b92      	ldr	r3, [pc, #584]	; (8009714 <UART_SetConfig+0x574>)
 80094ca:	0052      	lsls	r2, r2, #1
 80094cc:	5ad3      	ldrh	r3, [r2, r3]
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	69b8      	ldr	r0, [r7, #24]
 80094da:	69f9      	ldr	r1, [r7, #28]
 80094dc:	f7f7 f81c 	bl	8000518 <__aeabi_uldivmod>
 80094e0:	0002      	movs	r2, r0
 80094e2:	000b      	movs	r3, r1
 80094e4:	0e11      	lsrs	r1, r2, #24
 80094e6:	021d      	lsls	r5, r3, #8
 80094e8:	430d      	orrs	r5, r1
 80094ea:	0214      	lsls	r4, r2, #8
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	60bb      	str	r3, [r7, #8]
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68b8      	ldr	r0, [r7, #8]
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	1900      	adds	r0, r0, r4
 80094fe:	4169      	adcs	r1, r5
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f7f7 f803 	bl	8000518 <__aeabi_uldivmod>
 8009512:	0002      	movs	r2, r0
 8009514:	000b      	movs	r3, r1
 8009516:	0013      	movs	r3, r2
 8009518:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800951a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951c:	23c0      	movs	r3, #192	; 0xc0
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	429a      	cmp	r2, r3
 8009522:	d309      	bcc.n	8009538 <UART_SetConfig+0x398>
 8009524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009526:	2380      	movs	r3, #128	; 0x80
 8009528:	035b      	lsls	r3, r3, #13
 800952a:	429a      	cmp	r2, r3
 800952c:	d204      	bcs.n	8009538 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009534:	60da      	str	r2, [r3, #12]
 8009536:	e0d6      	b.n	80096e6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8009538:	231a      	movs	r3, #26
 800953a:	2220      	movs	r2, #32
 800953c:	189b      	adds	r3, r3, r2
 800953e:	19db      	adds	r3, r3, r7
 8009540:	2201      	movs	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e0cf      	b.n	80096e6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	69da      	ldr	r2, [r3, #28]
 800954a:	2380      	movs	r3, #128	; 0x80
 800954c:	021b      	lsls	r3, r3, #8
 800954e:	429a      	cmp	r2, r3
 8009550:	d000      	beq.n	8009554 <UART_SetConfig+0x3b4>
 8009552:	e070      	b.n	8009636 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8009554:	231b      	movs	r3, #27
 8009556:	2220      	movs	r2, #32
 8009558:	189b      	adds	r3, r3, r2
 800955a:	19db      	adds	r3, r3, r7
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b08      	cmp	r3, #8
 8009560:	d015      	beq.n	800958e <UART_SetConfig+0x3ee>
 8009562:	dc18      	bgt.n	8009596 <UART_SetConfig+0x3f6>
 8009564:	2b04      	cmp	r3, #4
 8009566:	d00d      	beq.n	8009584 <UART_SetConfig+0x3e4>
 8009568:	dc15      	bgt.n	8009596 <UART_SetConfig+0x3f6>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <UART_SetConfig+0x3d4>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d005      	beq.n	800957e <UART_SetConfig+0x3de>
 8009572:	e010      	b.n	8009596 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009574:	f7fe f868 	bl	8007648 <HAL_RCC_GetPCLK1Freq>
 8009578:	0003      	movs	r3, r0
 800957a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800957c:	e014      	b.n	80095a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800957e:	4b66      	ldr	r3, [pc, #408]	; (8009718 <UART_SetConfig+0x578>)
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009582:	e011      	b.n	80095a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009584:	f7fd ffd4 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 8009588:	0003      	movs	r3, r0
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800958c:	e00c      	b.n	80095a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800958e:	2380      	movs	r3, #128	; 0x80
 8009590:	021b      	lsls	r3, r3, #8
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009594:	e008      	b.n	80095a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800959a:	231a      	movs	r3, #26
 800959c:	2220      	movs	r2, #32
 800959e:	189b      	adds	r3, r3, r2
 80095a0:	19db      	adds	r3, r3, r7
 80095a2:	2201      	movs	r2, #1
 80095a4:	701a      	strb	r2, [r3, #0]
        break;
 80095a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d100      	bne.n	80095b0 <UART_SetConfig+0x410>
 80095ae:	e09a      	b.n	80096e6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b4:	4b57      	ldr	r3, [pc, #348]	; (8009714 <UART_SetConfig+0x574>)
 80095b6:	0052      	lsls	r2, r2, #1
 80095b8:	5ad3      	ldrh	r3, [r2, r3]
 80095ba:	0019      	movs	r1, r3
 80095bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095be:	f7f6 fdbd 	bl	800013c <__udivsi3>
 80095c2:	0003      	movs	r3, r0
 80095c4:	005a      	lsls	r2, r3, #1
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	18d2      	adds	r2, r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	0019      	movs	r1, r3
 80095d4:	0010      	movs	r0, r2
 80095d6:	f7f6 fdb1 	bl	800013c <__udivsi3>
 80095da:	0003      	movs	r3, r0
 80095dc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	2b0f      	cmp	r3, #15
 80095e2:	d921      	bls.n	8009628 <UART_SetConfig+0x488>
 80095e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e6:	2380      	movs	r3, #128	; 0x80
 80095e8:	025b      	lsls	r3, r3, #9
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d21c      	bcs.n	8009628 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	200e      	movs	r0, #14
 80095f4:	2420      	movs	r4, #32
 80095f6:	1903      	adds	r3, r0, r4
 80095f8:	19db      	adds	r3, r3, r7
 80095fa:	210f      	movs	r1, #15
 80095fc:	438a      	bics	r2, r1
 80095fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	2207      	movs	r2, #7
 8009608:	4013      	ands	r3, r2
 800960a:	b299      	uxth	r1, r3
 800960c:	1903      	adds	r3, r0, r4
 800960e:	19db      	adds	r3, r3, r7
 8009610:	1902      	adds	r2, r0, r4
 8009612:	19d2      	adds	r2, r2, r7
 8009614:	8812      	ldrh	r2, [r2, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1902      	adds	r2, r0, r4
 8009620:	19d2      	adds	r2, r2, r7
 8009622:	8812      	ldrh	r2, [r2, #0]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	e05e      	b.n	80096e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8009628:	231a      	movs	r3, #26
 800962a:	2220      	movs	r2, #32
 800962c:	189b      	adds	r3, r3, r2
 800962e:	19db      	adds	r3, r3, r7
 8009630:	2201      	movs	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
 8009634:	e057      	b.n	80096e6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009636:	231b      	movs	r3, #27
 8009638:	2220      	movs	r2, #32
 800963a:	189b      	adds	r3, r3, r2
 800963c:	19db      	adds	r3, r3, r7
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b08      	cmp	r3, #8
 8009642:	d015      	beq.n	8009670 <UART_SetConfig+0x4d0>
 8009644:	dc18      	bgt.n	8009678 <UART_SetConfig+0x4d8>
 8009646:	2b04      	cmp	r3, #4
 8009648:	d00d      	beq.n	8009666 <UART_SetConfig+0x4c6>
 800964a:	dc15      	bgt.n	8009678 <UART_SetConfig+0x4d8>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <UART_SetConfig+0x4b6>
 8009650:	2b02      	cmp	r3, #2
 8009652:	d005      	beq.n	8009660 <UART_SetConfig+0x4c0>
 8009654:	e010      	b.n	8009678 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009656:	f7fd fff7 	bl	8007648 <HAL_RCC_GetPCLK1Freq>
 800965a:	0003      	movs	r3, r0
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800965e:	e014      	b.n	800968a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009660:	4b2d      	ldr	r3, [pc, #180]	; (8009718 <UART_SetConfig+0x578>)
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009664:	e011      	b.n	800968a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009666:	f7fd ff63 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 800966a:	0003      	movs	r3, r0
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800966e:	e00c      	b.n	800968a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009670:	2380      	movs	r3, #128	; 0x80
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009676:	e008      	b.n	800968a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800967c:	231a      	movs	r3, #26
 800967e:	2220      	movs	r2, #32
 8009680:	189b      	adds	r3, r3, r2
 8009682:	19db      	adds	r3, r3, r7
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
        break;
 8009688:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800968a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968c:	2b00      	cmp	r3, #0
 800968e:	d02a      	beq.n	80096e6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009694:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <UART_SetConfig+0x574>)
 8009696:	0052      	lsls	r2, r2, #1
 8009698:	5ad3      	ldrh	r3, [r2, r3]
 800969a:	0019      	movs	r1, r3
 800969c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800969e:	f7f6 fd4d 	bl	800013c <__udivsi3>
 80096a2:	0003      	movs	r3, r0
 80096a4:	001a      	movs	r2, r3
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	18d2      	adds	r2, r2, r3
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	0019      	movs	r1, r3
 80096b4:	0010      	movs	r0, r2
 80096b6:	f7f6 fd41 	bl	800013c <__udivsi3>
 80096ba:	0003      	movs	r3, r0
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2b0f      	cmp	r3, #15
 80096c2:	d90a      	bls.n	80096da <UART_SetConfig+0x53a>
 80096c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c6:	2380      	movs	r3, #128	; 0x80
 80096c8:	025b      	lsls	r3, r3, #9
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d205      	bcs.n	80096da <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60da      	str	r2, [r3, #12]
 80096d8:	e005      	b.n	80096e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80096da:	231a      	movs	r3, #26
 80096dc:	2220      	movs	r2, #32
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	19db      	adds	r3, r3, r7
 80096e2:	2201      	movs	r2, #1
 80096e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	226a      	movs	r2, #106	; 0x6a
 80096ea:	2101      	movs	r1, #1
 80096ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	2268      	movs	r2, #104	; 0x68
 80096f2:	2101      	movs	r1, #1
 80096f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	2200      	movs	r2, #0
 80096fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	2200      	movs	r2, #0
 8009700:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009702:	231a      	movs	r3, #26
 8009704:	2220      	movs	r2, #32
 8009706:	189b      	adds	r3, r3, r2
 8009708:	19db      	adds	r3, r3, r7
 800970a:	781b      	ldrb	r3, [r3, #0]
}
 800970c:	0018      	movs	r0, r3
 800970e:	46bd      	mov	sp, r7
 8009710:	b010      	add	sp, #64	; 0x40
 8009712:	bdb0      	pop	{r4, r5, r7, pc}
 8009714:	0800fb60 	.word	0x0800fb60
 8009718:	00f42400 	.word	0x00f42400

0800971c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	2201      	movs	r2, #1
 800972a:	4013      	ands	r3, r2
 800972c:	d00b      	beq.n	8009746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4a4a      	ldr	r2, [pc, #296]	; (8009860 <UART_AdvFeatureConfig+0x144>)
 8009736:	4013      	ands	r3, r2
 8009738:	0019      	movs	r1, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	2202      	movs	r2, #2
 800974c:	4013      	ands	r3, r2
 800974e:	d00b      	beq.n	8009768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4a43      	ldr	r2, [pc, #268]	; (8009864 <UART_AdvFeatureConfig+0x148>)
 8009758:	4013      	ands	r3, r2
 800975a:	0019      	movs	r1, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	2204      	movs	r2, #4
 800976e:	4013      	ands	r3, r2
 8009770:	d00b      	beq.n	800978a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4a3b      	ldr	r2, [pc, #236]	; (8009868 <UART_AdvFeatureConfig+0x14c>)
 800977a:	4013      	ands	r3, r2
 800977c:	0019      	movs	r1, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	2208      	movs	r2, #8
 8009790:	4013      	ands	r3, r2
 8009792:	d00b      	beq.n	80097ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4a34      	ldr	r2, [pc, #208]	; (800986c <UART_AdvFeatureConfig+0x150>)
 800979c:	4013      	ands	r3, r2
 800979e:	0019      	movs	r1, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b0:	2210      	movs	r2, #16
 80097b2:	4013      	ands	r3, r2
 80097b4:	d00b      	beq.n	80097ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	4a2c      	ldr	r2, [pc, #176]	; (8009870 <UART_AdvFeatureConfig+0x154>)
 80097be:	4013      	ands	r3, r2
 80097c0:	0019      	movs	r1, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	2220      	movs	r2, #32
 80097d4:	4013      	ands	r3, r2
 80097d6:	d00b      	beq.n	80097f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	4a25      	ldr	r2, [pc, #148]	; (8009874 <UART_AdvFeatureConfig+0x158>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	0019      	movs	r1, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f4:	2240      	movs	r2, #64	; 0x40
 80097f6:	4013      	ands	r3, r2
 80097f8:	d01d      	beq.n	8009836 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4a1d      	ldr	r2, [pc, #116]	; (8009878 <UART_AdvFeatureConfig+0x15c>)
 8009802:	4013      	ands	r3, r2
 8009804:	0019      	movs	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009816:	2380      	movs	r3, #128	; 0x80
 8009818:	035b      	lsls	r3, r3, #13
 800981a:	429a      	cmp	r2, r3
 800981c:	d10b      	bne.n	8009836 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4a15      	ldr	r2, [pc, #84]	; (800987c <UART_AdvFeatureConfig+0x160>)
 8009826:	4013      	ands	r3, r2
 8009828:	0019      	movs	r1, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	2280      	movs	r2, #128	; 0x80
 800983c:	4013      	ands	r3, r2
 800983e:	d00b      	beq.n	8009858 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <UART_AdvFeatureConfig+0x164>)
 8009848:	4013      	ands	r3, r2
 800984a:	0019      	movs	r1, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }
}
 8009858:	46c0      	nop			; (mov r8, r8)
 800985a:	46bd      	mov	sp, r7
 800985c:	b002      	add	sp, #8
 800985e:	bd80      	pop	{r7, pc}
 8009860:	fffdffff 	.word	0xfffdffff
 8009864:	fffeffff 	.word	0xfffeffff
 8009868:	fffbffff 	.word	0xfffbffff
 800986c:	ffff7fff 	.word	0xffff7fff
 8009870:	ffffefff 	.word	0xffffefff
 8009874:	ffffdfff 	.word	0xffffdfff
 8009878:	ffefffff 	.word	0xffefffff
 800987c:	ff9fffff 	.word	0xff9fffff
 8009880:	fff7ffff 	.word	0xfff7ffff

08009884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af02      	add	r7, sp, #8
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2290      	movs	r2, #144	; 0x90
 8009890:	2100      	movs	r1, #0
 8009892:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009894:	f7fb fc00 	bl	8005098 <HAL_GetTick>
 8009898:	0003      	movs	r3, r0
 800989a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2208      	movs	r2, #8
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d10c      	bne.n	80098c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2280      	movs	r2, #128	; 0x80
 80098ae:	0391      	lsls	r1, r2, #14
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4a1a      	ldr	r2, [pc, #104]	; (800991c <UART_CheckIdleState+0x98>)
 80098b4:	9200      	str	r2, [sp, #0]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 f832 	bl	8009920 <UART_WaitOnFlagUntilTimeout>
 80098bc:	1e03      	subs	r3, r0, #0
 80098be:	d001      	beq.n	80098c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e026      	b.n	8009912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2204      	movs	r2, #4
 80098cc:	4013      	ands	r3, r2
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d10c      	bne.n	80098ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2280      	movs	r2, #128	; 0x80
 80098d6:	03d1      	lsls	r1, r2, #15
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <UART_CheckIdleState+0x98>)
 80098dc:	9200      	str	r2, [sp, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	f000 f81e 	bl	8009920 <UART_WaitOnFlagUntilTimeout>
 80098e4:	1e03      	subs	r3, r0, #0
 80098e6:	d001      	beq.n	80098ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e012      	b.n	8009912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2288      	movs	r2, #136	; 0x88
 80098f0:	2120      	movs	r1, #32
 80098f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	228c      	movs	r2, #140	; 0x8c
 80098f8:	2120      	movs	r1, #32
 80098fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2284      	movs	r2, #132	; 0x84
 800990c:	2100      	movs	r1, #0
 800990e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	0018      	movs	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	b004      	add	sp, #16
 8009918:	bd80      	pop	{r7, pc}
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	01ffffff 	.word	0x01ffffff

08009920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b094      	sub	sp, #80	; 0x50
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	1dfb      	adds	r3, r7, #7
 800992e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009930:	e0a7      	b.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009934:	3301      	adds	r3, #1
 8009936:	d100      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009938:	e0a3      	b.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800993a:	f7fb fbad 	bl	8005098 <HAL_GetTick>
 800993e:	0002      	movs	r2, r0
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009946:	429a      	cmp	r2, r3
 8009948:	d302      	bcc.n	8009950 <UART_WaitOnFlagUntilTimeout+0x30>
 800994a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800994c:	2b00      	cmp	r3, #0
 800994e:	d13f      	bne.n	80099d0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009950:	f3ef 8310 	mrs	r3, PRIMASK
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009958:	647b      	str	r3, [r7, #68]	; 0x44
 800995a:	2301      	movs	r3, #1
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	f383 8810 	msr	PRIMASK, r3
}
 8009964:	46c0      	nop			; (mov r8, r8)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	494e      	ldr	r1, [pc, #312]	; (8009aac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009972:	400a      	ands	r2, r1
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009978:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	f383 8810 	msr	PRIMASK, r3
}
 8009980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009982:	f3ef 8310 	mrs	r3, PRIMASK
 8009986:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998a:	643b      	str	r3, [r7, #64]	; 0x40
 800998c:	2301      	movs	r3, #1
 800998e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	f383 8810 	msr	PRIMASK, r3
}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2101      	movs	r1, #1
 80099a4:	438a      	bics	r2, r1
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ae:	f383 8810 	msr	PRIMASK, r3
}
 80099b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2288      	movs	r2, #136	; 0x88
 80099b8:	2120      	movs	r1, #32
 80099ba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	228c      	movs	r2, #140	; 0x8c
 80099c0:	2120      	movs	r1, #32
 80099c2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2284      	movs	r2, #132	; 0x84
 80099c8:	2100      	movs	r1, #0
 80099ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e069      	b.n	8009aa4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2204      	movs	r2, #4
 80099d8:	4013      	ands	r3, r2
 80099da:	d052      	beq.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69da      	ldr	r2, [r3, #28]
 80099e2:	2380      	movs	r3, #128	; 0x80
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	401a      	ands	r2, r3
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d148      	bne.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2280      	movs	r2, #128	; 0x80
 80099f6:	0112      	lsls	r2, r2, #4
 80099f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099fa:	f3ef 8310 	mrs	r3, PRIMASK
 80099fe:	613b      	str	r3, [r7, #16]
  return(result);
 8009a00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a04:	2301      	movs	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f383 8810 	msr	PRIMASK, r3
}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4924      	ldr	r1, [pc, #144]	; (8009aac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009a1c:	400a      	ands	r2, r1
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f383 8810 	msr	PRIMASK, r3
}
 8009a2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8009a32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a36:	2301      	movs	r3, #1
 8009a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	f383 8810 	msr	PRIMASK, r3
}
 8009a40:	46c0      	nop			; (mov r8, r8)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	438a      	bics	r2, r1
 8009a50:	609a      	str	r2, [r3, #8]
 8009a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	f383 8810 	msr	PRIMASK, r3
}
 8009a5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2288      	movs	r2, #136	; 0x88
 8009a62:	2120      	movs	r1, #32
 8009a64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	228c      	movs	r2, #140	; 0x8c
 8009a6a:	2120      	movs	r1, #32
 8009a6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2290      	movs	r2, #144	; 0x90
 8009a72:	2120      	movs	r1, #32
 8009a74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2284      	movs	r2, #132	; 0x84
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e010      	b.n	8009aa4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	425a      	negs	r2, r3
 8009a92:	4153      	adcs	r3, r2
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	001a      	movs	r2, r3
 8009a98:	1dfb      	adds	r3, r7, #7
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d100      	bne.n	8009aa2 <UART_WaitOnFlagUntilTimeout+0x182>
 8009aa0:	e747      	b.n	8009932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b014      	add	sp, #80	; 0x50
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	fffffe5f 	.word	0xfffffe5f

08009ab0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2284      	movs	r2, #132	; 0x84
 8009abc:	5c9b      	ldrb	r3, [r3, r2]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d101      	bne.n	8009ac6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e027      	b.n	8009b16 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2284      	movs	r2, #132	; 0x84
 8009aca:	2101      	movs	r1, #1
 8009acc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2288      	movs	r2, #136	; 0x88
 8009ad2:	2124      	movs	r1, #36	; 0x24
 8009ad4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2101      	movs	r1, #1
 8009aea:	438a      	bics	r2, r1
 8009aec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4a0b      	ldr	r2, [pc, #44]	; (8009b20 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009af2:	4013      	ands	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2288      	movs	r2, #136	; 0x88
 8009b08:	2120      	movs	r1, #32
 8009b0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2284      	movs	r2, #132	; 0x84
 8009b10:	2100      	movs	r1, #0
 8009b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	0018      	movs	r0, r3
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	b004      	add	sp, #16
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	dfffffff 	.word	0xdfffffff

08009b24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2284      	movs	r2, #132	; 0x84
 8009b32:	5c9b      	ldrb	r3, [r3, r2]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d101      	bne.n	8009b3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e02e      	b.n	8009b9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2284      	movs	r2, #132	; 0x84
 8009b40:	2101      	movs	r1, #1
 8009b42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2288      	movs	r2, #136	; 0x88
 8009b48:	2124      	movs	r1, #36	; 0x24
 8009b4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2101      	movs	r1, #1
 8009b60:	438a      	bics	r2, r1
 8009b62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	08d9      	lsrs	r1, r3, #3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	f000 f854 	bl	8009c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2288      	movs	r2, #136	; 0x88
 8009b8c:	2120      	movs	r1, #32
 8009b8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2284      	movs	r2, #132	; 0x84
 8009b94:	2100      	movs	r1, #0
 8009b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	b004      	add	sp, #16
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2284      	movs	r2, #132	; 0x84
 8009bb2:	5c9b      	ldrb	r3, [r3, r2]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d101      	bne.n	8009bbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e02f      	b.n	8009c1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2284      	movs	r2, #132	; 0x84
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2288      	movs	r2, #136	; 0x88
 8009bc8:	2124      	movs	r1, #36	; 0x24
 8009bca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2101      	movs	r1, #1
 8009be0:	438a      	bics	r2, r1
 8009be2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4a0e      	ldr	r2, [pc, #56]	; (8009c24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	0019      	movs	r1, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f000 f813 	bl	8009c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2288      	movs	r2, #136	; 0x88
 8009c0e:	2120      	movs	r1, #32
 8009c10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2284      	movs	r2, #132	; 0x84
 8009c16:	2100      	movs	r1, #0
 8009c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b004      	add	sp, #16
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	f1ffffff 	.word	0xf1ffffff

08009c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	226a      	movs	r2, #106	; 0x6a
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2268      	movs	r2, #104	; 0x68
 8009c44:	2101      	movs	r1, #1
 8009c46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c48:	e043      	b.n	8009cd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c4a:	260f      	movs	r6, #15
 8009c4c:	19bb      	adds	r3, r7, r6
 8009c4e:	2208      	movs	r2, #8
 8009c50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c52:	200e      	movs	r0, #14
 8009c54:	183b      	adds	r3, r7, r0
 8009c56:	2208      	movs	r2, #8
 8009c58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	0e5b      	lsrs	r3, r3, #25
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	240d      	movs	r4, #13
 8009c66:	193b      	adds	r3, r7, r4
 8009c68:	2107      	movs	r1, #7
 8009c6a:	400a      	ands	r2, r1
 8009c6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	0f5b      	lsrs	r3, r3, #29
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	250c      	movs	r5, #12
 8009c7a:	197b      	adds	r3, r7, r5
 8009c7c:	2107      	movs	r1, #7
 8009c7e:	400a      	ands	r2, r1
 8009c80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c82:	183b      	adds	r3, r7, r0
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	197a      	adds	r2, r7, r5
 8009c88:	7812      	ldrb	r2, [r2, #0]
 8009c8a:	4914      	ldr	r1, [pc, #80]	; (8009cdc <UARTEx_SetNbDataToProcess+0xb4>)
 8009c8c:	5c8a      	ldrb	r2, [r1, r2]
 8009c8e:	435a      	muls	r2, r3
 8009c90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c92:	197b      	adds	r3, r7, r5
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	4a12      	ldr	r2, [pc, #72]	; (8009ce0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c9a:	0019      	movs	r1, r3
 8009c9c:	f7f6 fad8 	bl	8000250 <__divsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	226a      	movs	r2, #106	; 0x6a
 8009ca8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009caa:	19bb      	adds	r3, r7, r6
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	193a      	adds	r2, r7, r4
 8009cb0:	7812      	ldrb	r2, [r2, #0]
 8009cb2:	490a      	ldr	r1, [pc, #40]	; (8009cdc <UARTEx_SetNbDataToProcess+0xb4>)
 8009cb4:	5c8a      	ldrb	r2, [r1, r2]
 8009cb6:	435a      	muls	r2, r3
 8009cb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cba:	193b      	adds	r3, r7, r4
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	4a08      	ldr	r2, [pc, #32]	; (8009ce0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009cc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cc2:	0019      	movs	r1, r3
 8009cc4:	f7f6 fac4 	bl	8000250 <__divsi3>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	b299      	uxth	r1, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2268      	movs	r2, #104	; 0x68
 8009cd0:	5299      	strh	r1, [r3, r2]
}
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b005      	add	sp, #20
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	0800fb78 	.word	0x0800fb78
 8009ce0:	0800fb80 	.word	0x0800fb80

08009ce4 <__cvt>:
 8009ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce6:	001e      	movs	r6, r3
 8009ce8:	2300      	movs	r3, #0
 8009cea:	0014      	movs	r4, r2
 8009cec:	b08b      	sub	sp, #44	; 0x2c
 8009cee:	429e      	cmp	r6, r3
 8009cf0:	da04      	bge.n	8009cfc <__cvt+0x18>
 8009cf2:	2180      	movs	r1, #128	; 0x80
 8009cf4:	0609      	lsls	r1, r1, #24
 8009cf6:	1873      	adds	r3, r6, r1
 8009cf8:	001e      	movs	r6, r3
 8009cfa:	232d      	movs	r3, #45	; 0x2d
 8009cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cfe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d00:	7013      	strb	r3, [r2, #0]
 8009d02:	2320      	movs	r3, #32
 8009d04:	2203      	movs	r2, #3
 8009d06:	439f      	bics	r7, r3
 8009d08:	2f46      	cmp	r7, #70	; 0x46
 8009d0a:	d007      	beq.n	8009d1c <__cvt+0x38>
 8009d0c:	003b      	movs	r3, r7
 8009d0e:	3b45      	subs	r3, #69	; 0x45
 8009d10:	4259      	negs	r1, r3
 8009d12:	414b      	adcs	r3, r1
 8009d14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d16:	3a01      	subs	r2, #1
 8009d18:	18cb      	adds	r3, r1, r3
 8009d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8009d1c:	ab09      	add	r3, sp, #36	; 0x24
 8009d1e:	9304      	str	r3, [sp, #16]
 8009d20:	ab08      	add	r3, sp, #32
 8009d22:	9303      	str	r3, [sp, #12]
 8009d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d26:	9200      	str	r2, [sp, #0]
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d2c:	0022      	movs	r2, r4
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	0033      	movs	r3, r6
 8009d32:	f000 fec3 	bl	800aabc <_dtoa_r>
 8009d36:	0005      	movs	r5, r0
 8009d38:	2f47      	cmp	r7, #71	; 0x47
 8009d3a:	d102      	bne.n	8009d42 <__cvt+0x5e>
 8009d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d3e:	07db      	lsls	r3, r3, #31
 8009d40:	d528      	bpl.n	8009d94 <__cvt+0xb0>
 8009d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d44:	18eb      	adds	r3, r5, r3
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	2f46      	cmp	r7, #70	; 0x46
 8009d4a:	d114      	bne.n	8009d76 <__cvt+0x92>
 8009d4c:	782b      	ldrb	r3, [r5, #0]
 8009d4e:	2b30      	cmp	r3, #48	; 0x30
 8009d50:	d10c      	bne.n	8009d6c <__cvt+0x88>
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	0020      	movs	r0, r4
 8009d58:	0031      	movs	r1, r6
 8009d5a:	f7f6 fb75 	bl	8000448 <__aeabi_dcmpeq>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d104      	bne.n	8009d6c <__cvt+0x88>
 8009d62:	2301      	movs	r3, #1
 8009d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d6e:	9a07      	ldr	r2, [sp, #28]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	18d3      	adds	r3, r2, r3
 8009d74:	9307      	str	r3, [sp, #28]
 8009d76:	2200      	movs	r2, #0
 8009d78:	2300      	movs	r3, #0
 8009d7a:	0020      	movs	r0, r4
 8009d7c:	0031      	movs	r1, r6
 8009d7e:	f7f6 fb63 	bl	8000448 <__aeabi_dcmpeq>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d001      	beq.n	8009d8a <__cvt+0xa6>
 8009d86:	9b07      	ldr	r3, [sp, #28]
 8009d88:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8a:	2230      	movs	r2, #48	; 0x30
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	9907      	ldr	r1, [sp, #28]
 8009d90:	428b      	cmp	r3, r1
 8009d92:	d306      	bcc.n	8009da2 <__cvt+0xbe>
 8009d94:	0028      	movs	r0, r5
 8009d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d9a:	1b5b      	subs	r3, r3, r5
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	b00b      	add	sp, #44	; 0x2c
 8009da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da2:	1c59      	adds	r1, r3, #1
 8009da4:	9109      	str	r1, [sp, #36]	; 0x24
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e7f0      	b.n	8009d8c <__cvt+0xa8>

08009daa <__exponent>:
 8009daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dac:	1c83      	adds	r3, r0, #2
 8009dae:	b087      	sub	sp, #28
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	0005      	movs	r5, r0
 8009db4:	000c      	movs	r4, r1
 8009db6:	232b      	movs	r3, #43	; 0x2b
 8009db8:	7002      	strb	r2, [r0, #0]
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	da01      	bge.n	8009dc2 <__exponent+0x18>
 8009dbe:	424c      	negs	r4, r1
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	706b      	strb	r3, [r5, #1]
 8009dc4:	2c09      	cmp	r4, #9
 8009dc6:	dd2f      	ble.n	8009e28 <__exponent+0x7e>
 8009dc8:	270a      	movs	r7, #10
 8009dca:	ab04      	add	r3, sp, #16
 8009dcc:	1dde      	adds	r6, r3, #7
 8009dce:	0020      	movs	r0, r4
 8009dd0:	0039      	movs	r1, r7
 8009dd2:	9601      	str	r6, [sp, #4]
 8009dd4:	f7f6 fb22 	bl	800041c <__aeabi_idivmod>
 8009dd8:	3e01      	subs	r6, #1
 8009dda:	3130      	adds	r1, #48	; 0x30
 8009ddc:	0020      	movs	r0, r4
 8009dde:	7031      	strb	r1, [r6, #0]
 8009de0:	0039      	movs	r1, r7
 8009de2:	9402      	str	r4, [sp, #8]
 8009de4:	f7f6 fa34 	bl	8000250 <__divsi3>
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	0004      	movs	r4, r0
 8009dec:	2b63      	cmp	r3, #99	; 0x63
 8009dee:	dcee      	bgt.n	8009dce <__exponent+0x24>
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	3430      	adds	r4, #48	; 0x30
 8009df4:	1e9a      	subs	r2, r3, #2
 8009df6:	0013      	movs	r3, r2
 8009df8:	9903      	ldr	r1, [sp, #12]
 8009dfa:	7014      	strb	r4, [r2, #0]
 8009dfc:	a804      	add	r0, sp, #16
 8009dfe:	3007      	adds	r0, #7
 8009e00:	4298      	cmp	r0, r3
 8009e02:	d80c      	bhi.n	8009e1e <__exponent+0x74>
 8009e04:	2300      	movs	r3, #0
 8009e06:	4282      	cmp	r2, r0
 8009e08:	d804      	bhi.n	8009e14 <__exponent+0x6a>
 8009e0a:	aa04      	add	r2, sp, #16
 8009e0c:	3309      	adds	r3, #9
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	9a01      	ldr	r2, [sp, #4]
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	9a03      	ldr	r2, [sp, #12]
 8009e16:	18d3      	adds	r3, r2, r3
 8009e18:	1b58      	subs	r0, r3, r5
 8009e1a:	b007      	add	sp, #28
 8009e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1e:	7818      	ldrb	r0, [r3, #0]
 8009e20:	3301      	adds	r3, #1
 8009e22:	7008      	strb	r0, [r1, #0]
 8009e24:	3101      	adds	r1, #1
 8009e26:	e7e9      	b.n	8009dfc <__exponent+0x52>
 8009e28:	2330      	movs	r3, #48	; 0x30
 8009e2a:	3430      	adds	r4, #48	; 0x30
 8009e2c:	70ab      	strb	r3, [r5, #2]
 8009e2e:	70ec      	strb	r4, [r5, #3]
 8009e30:	1d2b      	adds	r3, r5, #4
 8009e32:	e7f1      	b.n	8009e18 <__exponent+0x6e>

08009e34 <_printf_float>:
 8009e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e36:	b095      	sub	sp, #84	; 0x54
 8009e38:	000c      	movs	r4, r1
 8009e3a:	9208      	str	r2, [sp, #32]
 8009e3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e40:	0007      	movs	r7, r0
 8009e42:	f000 fd19 	bl	800a878 <_localeconv_r>
 8009e46:	6803      	ldr	r3, [r0, #0]
 8009e48:	0018      	movs	r0, r3
 8009e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4c:	f7f6 f95a 	bl	8000104 <strlen>
 8009e50:	2300      	movs	r3, #0
 8009e52:	9312      	str	r3, [sp, #72]	; 0x48
 8009e54:	7e23      	ldrb	r3, [r4, #24]
 8009e56:	2207      	movs	r2, #7
 8009e58:	930a      	str	r3, [sp, #40]	; 0x28
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	900d      	str	r0, [sp, #52]	; 0x34
 8009e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e62:	682b      	ldr	r3, [r5, #0]
 8009e64:	05c9      	lsls	r1, r1, #23
 8009e66:	d547      	bpl.n	8009ef8 <_printf_float+0xc4>
 8009e68:	189b      	adds	r3, r3, r2
 8009e6a:	4393      	bics	r3, r2
 8009e6c:	001a      	movs	r2, r3
 8009e6e:	3208      	adds	r2, #8
 8009e70:	602a      	str	r2, [r5, #0]
 8009e72:	681e      	ldr	r6, [r3, #0]
 8009e74:	685d      	ldr	r5, [r3, #4]
 8009e76:	0032      	movs	r2, r6
 8009e78:	002b      	movs	r3, r5
 8009e7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8009e7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009e7e:	2201      	movs	r2, #1
 8009e80:	006b      	lsls	r3, r5, #1
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	930e      	str	r3, [sp, #56]	; 0x38
 8009e86:	0030      	movs	r0, r6
 8009e88:	4bab      	ldr	r3, [pc, #684]	; (800a138 <_printf_float+0x304>)
 8009e8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e8c:	4252      	negs	r2, r2
 8009e8e:	f7f8 ff1f 	bl	8002cd0 <__aeabi_dcmpun>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d132      	bne.n	8009efc <_printf_float+0xc8>
 8009e96:	2201      	movs	r2, #1
 8009e98:	0030      	movs	r0, r6
 8009e9a:	4ba7      	ldr	r3, [pc, #668]	; (800a138 <_printf_float+0x304>)
 8009e9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e9e:	4252      	negs	r2, r2
 8009ea0:	f7f6 fae2 	bl	8000468 <__aeabi_dcmple>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d129      	bne.n	8009efc <_printf_float+0xc8>
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2300      	movs	r3, #0
 8009eac:	0030      	movs	r0, r6
 8009eae:	0029      	movs	r1, r5
 8009eb0:	f7f6 fad0 	bl	8000454 <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d003      	beq.n	8009ec0 <_printf_float+0x8c>
 8009eb8:	0023      	movs	r3, r4
 8009eba:	222d      	movs	r2, #45	; 0x2d
 8009ebc:	3343      	adds	r3, #67	; 0x43
 8009ebe:	701a      	strb	r2, [r3, #0]
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec2:	4d9e      	ldr	r5, [pc, #632]	; (800a13c <_printf_float+0x308>)
 8009ec4:	2b47      	cmp	r3, #71	; 0x47
 8009ec6:	d900      	bls.n	8009eca <_printf_float+0x96>
 8009ec8:	4d9d      	ldr	r5, [pc, #628]	; (800a140 <_printf_float+0x30c>)
 8009eca:	2303      	movs	r3, #3
 8009ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ece:	6123      	str	r3, [r4, #16]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	439a      	bics	r2, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009edc:	0021      	movs	r1, r4
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	0038      	movs	r0, r7
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	aa13      	add	r2, sp, #76	; 0x4c
 8009ee6:	f000 f9fb 	bl	800a2e0 <_printf_common>
 8009eea:	3001      	adds	r0, #1
 8009eec:	d000      	beq.n	8009ef0 <_printf_float+0xbc>
 8009eee:	e0a3      	b.n	800a038 <_printf_float+0x204>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	4240      	negs	r0, r0
 8009ef4:	b015      	add	sp, #84	; 0x54
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef8:	3307      	adds	r3, #7
 8009efa:	e7b6      	b.n	8009e6a <_printf_float+0x36>
 8009efc:	0032      	movs	r2, r6
 8009efe:	002b      	movs	r3, r5
 8009f00:	0030      	movs	r0, r6
 8009f02:	0029      	movs	r1, r5
 8009f04:	f7f8 fee4 	bl	8002cd0 <__aeabi_dcmpun>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d00b      	beq.n	8009f24 <_printf_float+0xf0>
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	da03      	bge.n	8009f18 <_printf_float+0xe4>
 8009f10:	0023      	movs	r3, r4
 8009f12:	222d      	movs	r2, #45	; 0x2d
 8009f14:	3343      	adds	r3, #67	; 0x43
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1a:	4d8a      	ldr	r5, [pc, #552]	; (800a144 <_printf_float+0x310>)
 8009f1c:	2b47      	cmp	r3, #71	; 0x47
 8009f1e:	d9d4      	bls.n	8009eca <_printf_float+0x96>
 8009f20:	4d89      	ldr	r5, [pc, #548]	; (800a148 <_printf_float+0x314>)
 8009f22:	e7d2      	b.n	8009eca <_printf_float+0x96>
 8009f24:	2220      	movs	r2, #32
 8009f26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f28:	6863      	ldr	r3, [r4, #4]
 8009f2a:	4391      	bics	r1, r2
 8009f2c:	910e      	str	r1, [sp, #56]	; 0x38
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	d14a      	bne.n	8009fc8 <_printf_float+0x194>
 8009f32:	3307      	adds	r3, #7
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	2380      	movs	r3, #128	; 0x80
 8009f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	9206      	str	r2, [sp, #24]
 8009f42:	aa12      	add	r2, sp, #72	; 0x48
 8009f44:	9205      	str	r2, [sp, #20]
 8009f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	9204      	str	r2, [sp, #16]
 8009f4c:	aa11      	add	r2, sp, #68	; 0x44
 8009f4e:	9203      	str	r2, [sp, #12]
 8009f50:	2223      	movs	r2, #35	; 0x23
 8009f52:	a908      	add	r1, sp, #32
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	6863      	ldr	r3, [r4, #4]
 8009f58:	1852      	adds	r2, r2, r1
 8009f5a:	9202      	str	r2, [sp, #8]
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	0032      	movs	r2, r6
 8009f60:	002b      	movs	r3, r5
 8009f62:	0038      	movs	r0, r7
 8009f64:	f7ff febe 	bl	8009ce4 <__cvt>
 8009f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6a:	0005      	movs	r5, r0
 8009f6c:	2b47      	cmp	r3, #71	; 0x47
 8009f6e:	d109      	bne.n	8009f84 <_printf_float+0x150>
 8009f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f72:	1cda      	adds	r2, r3, #3
 8009f74:	db02      	blt.n	8009f7c <_printf_float+0x148>
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	dd49      	ble.n	800a010 <_printf_float+0x1dc>
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	3b02      	subs	r3, #2
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	930a      	str	r3, [sp, #40]	; 0x28
 8009f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f88:	2b65      	cmp	r3, #101	; 0x65
 8009f8a:	d824      	bhi.n	8009fd6 <_printf_float+0x1a2>
 8009f8c:	0020      	movs	r0, r4
 8009f8e:	001a      	movs	r2, r3
 8009f90:	3901      	subs	r1, #1
 8009f92:	3050      	adds	r0, #80	; 0x50
 8009f94:	9111      	str	r1, [sp, #68]	; 0x44
 8009f96:	f7ff ff08 	bl	8009daa <__exponent>
 8009f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f9e:	1813      	adds	r3, r2, r0
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	2a01      	cmp	r2, #1
 8009fa4:	dc02      	bgt.n	8009fac <_printf_float+0x178>
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	07d2      	lsls	r2, r2, #31
 8009faa:	d501      	bpl.n	8009fb0 <_printf_float+0x17c>
 8009fac:	3301      	adds	r3, #1
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2323      	movs	r3, #35	; 0x23
 8009fb2:	aa08      	add	r2, sp, #32
 8009fb4:	189b      	adds	r3, r3, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d100      	bne.n	8009fbe <_printf_float+0x18a>
 8009fbc:	e78d      	b.n	8009eda <_printf_float+0xa6>
 8009fbe:	0023      	movs	r3, r4
 8009fc0:	222d      	movs	r2, #45	; 0x2d
 8009fc2:	3343      	adds	r3, #67	; 0x43
 8009fc4:	701a      	strb	r2, [r3, #0]
 8009fc6:	e788      	b.n	8009eda <_printf_float+0xa6>
 8009fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fca:	2a47      	cmp	r2, #71	; 0x47
 8009fcc:	d1b3      	bne.n	8009f36 <_printf_float+0x102>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1b1      	bne.n	8009f36 <_printf_float+0x102>
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	e7ae      	b.n	8009f34 <_printf_float+0x100>
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	2b66      	cmp	r3, #102	; 0x66
 8009fda:	d11b      	bne.n	800a014 <_printf_float+0x1e0>
 8009fdc:	6863      	ldr	r3, [r4, #4]
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	dd09      	ble.n	8009ff6 <_printf_float+0x1c2>
 8009fe2:	6121      	str	r1, [r4, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <_printf_float+0x1ba>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	07d2      	lsls	r2, r2, #31
 8009fec:	d50b      	bpl.n	800a006 <_printf_float+0x1d2>
 8009fee:	3301      	adds	r3, #1
 8009ff0:	185b      	adds	r3, r3, r1
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	e007      	b.n	800a006 <_printf_float+0x1d2>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <_printf_float+0x1ce>
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	6821      	ldr	r1, [r4, #0]
 8009ffe:	4211      	tst	r1, r2
 800a000:	d000      	beq.n	800a004 <_printf_float+0x1d0>
 800a002:	1c9a      	adds	r2, r3, #2
 800a004:	6122      	str	r2, [r4, #16]
 800a006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a008:	65a3      	str	r3, [r4, #88]	; 0x58
 800a00a:	2300      	movs	r3, #0
 800a00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a00e:	e7cf      	b.n	8009fb0 <_printf_float+0x17c>
 800a010:	2367      	movs	r3, #103	; 0x67
 800a012:	930a      	str	r3, [sp, #40]	; 0x28
 800a014:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a018:	4299      	cmp	r1, r3
 800a01a:	db06      	blt.n	800a02a <_printf_float+0x1f6>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	6121      	str	r1, [r4, #16]
 800a020:	07db      	lsls	r3, r3, #31
 800a022:	d5f0      	bpl.n	800a006 <_printf_float+0x1d2>
 800a024:	3101      	adds	r1, #1
 800a026:	6121      	str	r1, [r4, #16]
 800a028:	e7ed      	b.n	800a006 <_printf_float+0x1d2>
 800a02a:	2201      	movs	r2, #1
 800a02c:	2900      	cmp	r1, #0
 800a02e:	dc01      	bgt.n	800a034 <_printf_float+0x200>
 800a030:	1892      	adds	r2, r2, r2
 800a032:	1a52      	subs	r2, r2, r1
 800a034:	189b      	adds	r3, r3, r2
 800a036:	e7dc      	b.n	8009ff2 <_printf_float+0x1be>
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	0553      	lsls	r3, r2, #21
 800a03c:	d408      	bmi.n	800a050 <_printf_float+0x21c>
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	002a      	movs	r2, r5
 800a042:	0038      	movs	r0, r7
 800a044:	9908      	ldr	r1, [sp, #32]
 800a046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a048:	47a8      	blx	r5
 800a04a:	3001      	adds	r0, #1
 800a04c:	d12a      	bne.n	800a0a4 <_printf_float+0x270>
 800a04e:	e74f      	b.n	8009ef0 <_printf_float+0xbc>
 800a050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a052:	2b65      	cmp	r3, #101	; 0x65
 800a054:	d800      	bhi.n	800a058 <_printf_float+0x224>
 800a056:	e0ec      	b.n	800a232 <_printf_float+0x3fe>
 800a058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a05a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 f9f2 	bl	8000448 <__aeabi_dcmpeq>
 800a064:	2800      	cmp	r0, #0
 800a066:	d034      	beq.n	800a0d2 <_printf_float+0x29e>
 800a068:	2301      	movs	r3, #1
 800a06a:	0038      	movs	r0, r7
 800a06c:	4a37      	ldr	r2, [pc, #220]	; (800a14c <_printf_float+0x318>)
 800a06e:	9908      	ldr	r1, [sp, #32]
 800a070:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a072:	47a8      	blx	r5
 800a074:	3001      	adds	r0, #1
 800a076:	d100      	bne.n	800a07a <_printf_float+0x246>
 800a078:	e73a      	b.n	8009ef0 <_printf_float+0xbc>
 800a07a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a07e:	429a      	cmp	r2, r3
 800a080:	db02      	blt.n	800a088 <_printf_float+0x254>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	07db      	lsls	r3, r3, #31
 800a086:	d50d      	bpl.n	800a0a4 <_printf_float+0x270>
 800a088:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a08a:	0038      	movs	r0, r7
 800a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a090:	9908      	ldr	r1, [sp, #32]
 800a092:	47a8      	blx	r5
 800a094:	2500      	movs	r5, #0
 800a096:	3001      	adds	r0, #1
 800a098:	d100      	bne.n	800a09c <_printf_float+0x268>
 800a09a:	e729      	b.n	8009ef0 <_printf_float+0xbc>
 800a09c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	dc0a      	bgt.n	800a0ba <_printf_float+0x286>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	079b      	lsls	r3, r3, #30
 800a0a8:	d500      	bpl.n	800a0ac <_printf_float+0x278>
 800a0aa:	e116      	b.n	800a2da <_printf_float+0x4a6>
 800a0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ae:	68e0      	ldr	r0, [r4, #12]
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	db00      	blt.n	800a0b6 <_printf_float+0x282>
 800a0b4:	e71e      	b.n	8009ef4 <_printf_float+0xc0>
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	e71c      	b.n	8009ef4 <_printf_float+0xc0>
 800a0ba:	0022      	movs	r2, r4
 800a0bc:	2301      	movs	r3, #1
 800a0be:	0038      	movs	r0, r7
 800a0c0:	9908      	ldr	r1, [sp, #32]
 800a0c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0c4:	321a      	adds	r2, #26
 800a0c6:	47b0      	blx	r6
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d100      	bne.n	800a0ce <_printf_float+0x29a>
 800a0cc:	e710      	b.n	8009ef0 <_printf_float+0xbc>
 800a0ce:	3501      	adds	r5, #1
 800a0d0:	e7e4      	b.n	800a09c <_printf_float+0x268>
 800a0d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dc3b      	bgt.n	800a150 <_printf_float+0x31c>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	0038      	movs	r0, r7
 800a0dc:	4a1b      	ldr	r2, [pc, #108]	; (800a14c <_printf_float+0x318>)
 800a0de:	9908      	ldr	r1, [sp, #32]
 800a0e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0e2:	47b0      	blx	r6
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d100      	bne.n	800a0ea <_printf_float+0x2b6>
 800a0e8:	e702      	b.n	8009ef0 <_printf_float+0xbc>
 800a0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	d102      	bne.n	800a0f8 <_printf_float+0x2c4>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	07db      	lsls	r3, r3, #31
 800a0f6:	d5d5      	bpl.n	800a0a4 <_printf_float+0x270>
 800a0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fa:	0038      	movs	r0, r7
 800a0fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0fe:	9908      	ldr	r1, [sp, #32]
 800a100:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a102:	47b0      	blx	r6
 800a104:	2300      	movs	r3, #0
 800a106:	3001      	adds	r0, #1
 800a108:	d100      	bne.n	800a10c <_printf_float+0x2d8>
 800a10a:	e6f1      	b.n	8009ef0 <_printf_float+0xbc>
 800a10c:	930a      	str	r3, [sp, #40]	; 0x28
 800a10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a112:	425b      	negs	r3, r3
 800a114:	4293      	cmp	r3, r2
 800a116:	dc01      	bgt.n	800a11c <_printf_float+0x2e8>
 800a118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a11a:	e791      	b.n	800a040 <_printf_float+0x20c>
 800a11c:	0022      	movs	r2, r4
 800a11e:	2301      	movs	r3, #1
 800a120:	0038      	movs	r0, r7
 800a122:	9908      	ldr	r1, [sp, #32]
 800a124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a126:	321a      	adds	r2, #26
 800a128:	47b0      	blx	r6
 800a12a:	3001      	adds	r0, #1
 800a12c:	d100      	bne.n	800a130 <_printf_float+0x2fc>
 800a12e:	e6df      	b.n	8009ef0 <_printf_float+0xbc>
 800a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a132:	3301      	adds	r3, #1
 800a134:	e7ea      	b.n	800a10c <_printf_float+0x2d8>
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	7fefffff 	.word	0x7fefffff
 800a13c:	0800fb88 	.word	0x0800fb88
 800a140:	0800fb8c 	.word	0x0800fb8c
 800a144:	0800fb90 	.word	0x0800fb90
 800a148:	0800fb94 	.word	0x0800fb94
 800a14c:	0800fb98 	.word	0x0800fb98
 800a150:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a154:	920a      	str	r2, [sp, #40]	; 0x28
 800a156:	429a      	cmp	r2, r3
 800a158:	dd00      	ble.n	800a15c <_printf_float+0x328>
 800a15a:	930a      	str	r3, [sp, #40]	; 0x28
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dc3d      	bgt.n	800a1de <_printf_float+0x3aa>
 800a162:	2300      	movs	r3, #0
 800a164:	930e      	str	r3, [sp, #56]	; 0x38
 800a166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a168:	43db      	mvns	r3, r3
 800a16a:	17db      	asrs	r3, r3, #31
 800a16c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a16e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a172:	930b      	str	r3, [sp, #44]	; 0x2c
 800a174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a176:	4013      	ands	r3, r2
 800a178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a17e:	4293      	cmp	r3, r2
 800a180:	dc36      	bgt.n	800a1f0 <_printf_float+0x3bc>
 800a182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a186:	429a      	cmp	r2, r3
 800a188:	db40      	blt.n	800a20c <_printf_float+0x3d8>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	07db      	lsls	r3, r3, #31
 800a18e:	d43d      	bmi.n	800a20c <_printf_float+0x3d8>
 800a190:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a192:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a196:	1af3      	subs	r3, r6, r3
 800a198:	1ab6      	subs	r6, r6, r2
 800a19a:	429e      	cmp	r6, r3
 800a19c:	dd00      	ble.n	800a1a0 <_printf_float+0x36c>
 800a19e:	001e      	movs	r6, r3
 800a1a0:	2e00      	cmp	r6, #0
 800a1a2:	dc3c      	bgt.n	800a21e <_printf_float+0x3ea>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a8:	43f3      	mvns	r3, r6
 800a1aa:	17db      	asrs	r3, r3, #31
 800a1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b6:	4032      	ands	r2, r6
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	dc00      	bgt.n	800a1c2 <_printf_float+0x38e>
 800a1c0:	e770      	b.n	800a0a4 <_printf_float+0x270>
 800a1c2:	0022      	movs	r2, r4
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	0038      	movs	r0, r7
 800a1c8:	9908      	ldr	r1, [sp, #32]
 800a1ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1cc:	321a      	adds	r2, #26
 800a1ce:	47a8      	blx	r5
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d100      	bne.n	800a1d6 <_printf_float+0x3a2>
 800a1d4:	e68c      	b.n	8009ef0 <_printf_float+0xbc>
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	3301      	adds	r3, #1
 800a1da:	930a      	str	r3, [sp, #40]	; 0x28
 800a1dc:	e7e7      	b.n	800a1ae <_printf_float+0x37a>
 800a1de:	002a      	movs	r2, r5
 800a1e0:	0038      	movs	r0, r7
 800a1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e4:	9908      	ldr	r1, [sp, #32]
 800a1e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1e8:	47b0      	blx	r6
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d1b9      	bne.n	800a162 <_printf_float+0x32e>
 800a1ee:	e67f      	b.n	8009ef0 <_printf_float+0xbc>
 800a1f0:	0022      	movs	r2, r4
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	0038      	movs	r0, r7
 800a1f6:	9908      	ldr	r1, [sp, #32]
 800a1f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1fa:	321a      	adds	r2, #26
 800a1fc:	47b0      	blx	r6
 800a1fe:	3001      	adds	r0, #1
 800a200:	d100      	bne.n	800a204 <_printf_float+0x3d0>
 800a202:	e675      	b.n	8009ef0 <_printf_float+0xbc>
 800a204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a206:	3301      	adds	r3, #1
 800a208:	930e      	str	r3, [sp, #56]	; 0x38
 800a20a:	e7b0      	b.n	800a16e <_printf_float+0x33a>
 800a20c:	0038      	movs	r0, r7
 800a20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a212:	9908      	ldr	r1, [sp, #32]
 800a214:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a216:	47b0      	blx	r6
 800a218:	3001      	adds	r0, #1
 800a21a:	d1b9      	bne.n	800a190 <_printf_float+0x35c>
 800a21c:	e668      	b.n	8009ef0 <_printf_float+0xbc>
 800a21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a220:	0038      	movs	r0, r7
 800a222:	18ea      	adds	r2, r5, r3
 800a224:	9908      	ldr	r1, [sp, #32]
 800a226:	0033      	movs	r3, r6
 800a228:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a22a:	47a8      	blx	r5
 800a22c:	3001      	adds	r0, #1
 800a22e:	d1b9      	bne.n	800a1a4 <_printf_float+0x370>
 800a230:	e65e      	b.n	8009ef0 <_printf_float+0xbc>
 800a232:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a234:	2b01      	cmp	r3, #1
 800a236:	dc02      	bgt.n	800a23e <_printf_float+0x40a>
 800a238:	2301      	movs	r3, #1
 800a23a:	421a      	tst	r2, r3
 800a23c:	d03a      	beq.n	800a2b4 <_printf_float+0x480>
 800a23e:	2301      	movs	r3, #1
 800a240:	002a      	movs	r2, r5
 800a242:	0038      	movs	r0, r7
 800a244:	9908      	ldr	r1, [sp, #32]
 800a246:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a248:	47b0      	blx	r6
 800a24a:	3001      	adds	r0, #1
 800a24c:	d100      	bne.n	800a250 <_printf_float+0x41c>
 800a24e:	e64f      	b.n	8009ef0 <_printf_float+0xbc>
 800a250:	0038      	movs	r0, r7
 800a252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a256:	9908      	ldr	r1, [sp, #32]
 800a258:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a25a:	47b0      	blx	r6
 800a25c:	3001      	adds	r0, #1
 800a25e:	d100      	bne.n	800a262 <_printf_float+0x42e>
 800a260:	e646      	b.n	8009ef0 <_printf_float+0xbc>
 800a262:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a264:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a268:	2200      	movs	r2, #0
 800a26a:	001e      	movs	r6, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	f7f6 f8eb 	bl	8000448 <__aeabi_dcmpeq>
 800a272:	2800      	cmp	r0, #0
 800a274:	d11c      	bne.n	800a2b0 <_printf_float+0x47c>
 800a276:	0033      	movs	r3, r6
 800a278:	1c6a      	adds	r2, r5, #1
 800a27a:	3b01      	subs	r3, #1
 800a27c:	0038      	movs	r0, r7
 800a27e:	9908      	ldr	r1, [sp, #32]
 800a280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a282:	47a8      	blx	r5
 800a284:	3001      	adds	r0, #1
 800a286:	d10f      	bne.n	800a2a8 <_printf_float+0x474>
 800a288:	e632      	b.n	8009ef0 <_printf_float+0xbc>
 800a28a:	0022      	movs	r2, r4
 800a28c:	2301      	movs	r3, #1
 800a28e:	0038      	movs	r0, r7
 800a290:	9908      	ldr	r1, [sp, #32]
 800a292:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a294:	321a      	adds	r2, #26
 800a296:	47b0      	blx	r6
 800a298:	3001      	adds	r0, #1
 800a29a:	d100      	bne.n	800a29e <_printf_float+0x46a>
 800a29c:	e628      	b.n	8009ef0 <_printf_float+0xbc>
 800a29e:	3501      	adds	r5, #1
 800a2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dcf0      	bgt.n	800a28a <_printf_float+0x456>
 800a2a8:	0022      	movs	r2, r4
 800a2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ac:	3250      	adds	r2, #80	; 0x50
 800a2ae:	e6c8      	b.n	800a042 <_printf_float+0x20e>
 800a2b0:	2500      	movs	r5, #0
 800a2b2:	e7f5      	b.n	800a2a0 <_printf_float+0x46c>
 800a2b4:	002a      	movs	r2, r5
 800a2b6:	e7e1      	b.n	800a27c <_printf_float+0x448>
 800a2b8:	0022      	movs	r2, r4
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	0038      	movs	r0, r7
 800a2be:	9908      	ldr	r1, [sp, #32]
 800a2c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2c2:	3219      	adds	r2, #25
 800a2c4:	47b0      	blx	r6
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d100      	bne.n	800a2cc <_printf_float+0x498>
 800a2ca:	e611      	b.n	8009ef0 <_printf_float+0xbc>
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	68e3      	ldr	r3, [r4, #12]
 800a2d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2d2:	1a9b      	subs	r3, r3, r2
 800a2d4:	42ab      	cmp	r3, r5
 800a2d6:	dcef      	bgt.n	800a2b8 <_printf_float+0x484>
 800a2d8:	e6e8      	b.n	800a0ac <_printf_float+0x278>
 800a2da:	2500      	movs	r5, #0
 800a2dc:	e7f7      	b.n	800a2ce <_printf_float+0x49a>
 800a2de:	46c0      	nop			; (mov r8, r8)

0800a2e0 <_printf_common>:
 800a2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e2:	0016      	movs	r6, r2
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	688a      	ldr	r2, [r1, #8]
 800a2e8:	690b      	ldr	r3, [r1, #16]
 800a2ea:	000c      	movs	r4, r1
 800a2ec:	9000      	str	r0, [sp, #0]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	da00      	bge.n	800a2f4 <_printf_common+0x14>
 800a2f2:	0013      	movs	r3, r2
 800a2f4:	0022      	movs	r2, r4
 800a2f6:	6033      	str	r3, [r6, #0]
 800a2f8:	3243      	adds	r2, #67	; 0x43
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	d001      	beq.n	800a304 <_printf_common+0x24>
 800a300:	3301      	adds	r3, #1
 800a302:	6033      	str	r3, [r6, #0]
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	069b      	lsls	r3, r3, #26
 800a308:	d502      	bpl.n	800a310 <_printf_common+0x30>
 800a30a:	6833      	ldr	r3, [r6, #0]
 800a30c:	3302      	adds	r3, #2
 800a30e:	6033      	str	r3, [r6, #0]
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	2306      	movs	r3, #6
 800a314:	0015      	movs	r5, r2
 800a316:	401d      	ands	r5, r3
 800a318:	421a      	tst	r2, r3
 800a31a:	d027      	beq.n	800a36c <_printf_common+0x8c>
 800a31c:	0023      	movs	r3, r4
 800a31e:	3343      	adds	r3, #67	; 0x43
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	4193      	sbcs	r3, r2
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	0692      	lsls	r2, r2, #26
 800a32a:	d430      	bmi.n	800a38e <_printf_common+0xae>
 800a32c:	0022      	movs	r2, r4
 800a32e:	9901      	ldr	r1, [sp, #4]
 800a330:	9800      	ldr	r0, [sp, #0]
 800a332:	9d08      	ldr	r5, [sp, #32]
 800a334:	3243      	adds	r2, #67	; 0x43
 800a336:	47a8      	blx	r5
 800a338:	3001      	adds	r0, #1
 800a33a:	d025      	beq.n	800a388 <_printf_common+0xa8>
 800a33c:	2206      	movs	r2, #6
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	2500      	movs	r5, #0
 800a342:	4013      	ands	r3, r2
 800a344:	2b04      	cmp	r3, #4
 800a346:	d105      	bne.n	800a354 <_printf_common+0x74>
 800a348:	6833      	ldr	r3, [r6, #0]
 800a34a:	68e5      	ldr	r5, [r4, #12]
 800a34c:	1aed      	subs	r5, r5, r3
 800a34e:	43eb      	mvns	r3, r5
 800a350:	17db      	asrs	r3, r3, #31
 800a352:	401d      	ands	r5, r3
 800a354:	68a3      	ldr	r3, [r4, #8]
 800a356:	6922      	ldr	r2, [r4, #16]
 800a358:	4293      	cmp	r3, r2
 800a35a:	dd01      	ble.n	800a360 <_printf_common+0x80>
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	18ed      	adds	r5, r5, r3
 800a360:	2600      	movs	r6, #0
 800a362:	42b5      	cmp	r5, r6
 800a364:	d120      	bne.n	800a3a8 <_printf_common+0xc8>
 800a366:	2000      	movs	r0, #0
 800a368:	e010      	b.n	800a38c <_printf_common+0xac>
 800a36a:	3501      	adds	r5, #1
 800a36c:	68e3      	ldr	r3, [r4, #12]
 800a36e:	6832      	ldr	r2, [r6, #0]
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	42ab      	cmp	r3, r5
 800a374:	ddd2      	ble.n	800a31c <_printf_common+0x3c>
 800a376:	0022      	movs	r2, r4
 800a378:	2301      	movs	r3, #1
 800a37a:	9901      	ldr	r1, [sp, #4]
 800a37c:	9800      	ldr	r0, [sp, #0]
 800a37e:	9f08      	ldr	r7, [sp, #32]
 800a380:	3219      	adds	r2, #25
 800a382:	47b8      	blx	r7
 800a384:	3001      	adds	r0, #1
 800a386:	d1f0      	bne.n	800a36a <_printf_common+0x8a>
 800a388:	2001      	movs	r0, #1
 800a38a:	4240      	negs	r0, r0
 800a38c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a38e:	2030      	movs	r0, #48	; 0x30
 800a390:	18e1      	adds	r1, r4, r3
 800a392:	3143      	adds	r1, #67	; 0x43
 800a394:	7008      	strb	r0, [r1, #0]
 800a396:	0021      	movs	r1, r4
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	3145      	adds	r1, #69	; 0x45
 800a39c:	7809      	ldrb	r1, [r1, #0]
 800a39e:	18a2      	adds	r2, r4, r2
 800a3a0:	3243      	adds	r2, #67	; 0x43
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	7011      	strb	r1, [r2, #0]
 800a3a6:	e7c1      	b.n	800a32c <_printf_common+0x4c>
 800a3a8:	0022      	movs	r2, r4
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	9901      	ldr	r1, [sp, #4]
 800a3ae:	9800      	ldr	r0, [sp, #0]
 800a3b0:	9f08      	ldr	r7, [sp, #32]
 800a3b2:	321a      	adds	r2, #26
 800a3b4:	47b8      	blx	r7
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0e6      	beq.n	800a388 <_printf_common+0xa8>
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7d1      	b.n	800a362 <_printf_common+0x82>
	...

0800a3c0 <_printf_i>:
 800a3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c2:	b08b      	sub	sp, #44	; 0x2c
 800a3c4:	9206      	str	r2, [sp, #24]
 800a3c6:	000a      	movs	r2, r1
 800a3c8:	3243      	adds	r2, #67	; 0x43
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	9005      	str	r0, [sp, #20]
 800a3ce:	9204      	str	r2, [sp, #16]
 800a3d0:	7e0a      	ldrb	r2, [r1, #24]
 800a3d2:	000c      	movs	r4, r1
 800a3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3d6:	2a78      	cmp	r2, #120	; 0x78
 800a3d8:	d809      	bhi.n	800a3ee <_printf_i+0x2e>
 800a3da:	2a62      	cmp	r2, #98	; 0x62
 800a3dc:	d80b      	bhi.n	800a3f6 <_printf_i+0x36>
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	d100      	bne.n	800a3e4 <_printf_i+0x24>
 800a3e2:	e0be      	b.n	800a562 <_printf_i+0x1a2>
 800a3e4:	497c      	ldr	r1, [pc, #496]	; (800a5d8 <_printf_i+0x218>)
 800a3e6:	9103      	str	r1, [sp, #12]
 800a3e8:	2a58      	cmp	r2, #88	; 0x58
 800a3ea:	d100      	bne.n	800a3ee <_printf_i+0x2e>
 800a3ec:	e093      	b.n	800a516 <_printf_i+0x156>
 800a3ee:	0026      	movs	r6, r4
 800a3f0:	3642      	adds	r6, #66	; 0x42
 800a3f2:	7032      	strb	r2, [r6, #0]
 800a3f4:	e022      	b.n	800a43c <_printf_i+0x7c>
 800a3f6:	0010      	movs	r0, r2
 800a3f8:	3863      	subs	r0, #99	; 0x63
 800a3fa:	2815      	cmp	r0, #21
 800a3fc:	d8f7      	bhi.n	800a3ee <_printf_i+0x2e>
 800a3fe:	f7f5 fe93 	bl	8000128 <__gnu_thumb1_case_shi>
 800a402:	0016      	.short	0x0016
 800a404:	fff6001f 	.word	0xfff6001f
 800a408:	fff6fff6 	.word	0xfff6fff6
 800a40c:	001ffff6 	.word	0x001ffff6
 800a410:	fff6fff6 	.word	0xfff6fff6
 800a414:	fff6fff6 	.word	0xfff6fff6
 800a418:	003600a3 	.word	0x003600a3
 800a41c:	fff60083 	.word	0xfff60083
 800a420:	00b4fff6 	.word	0x00b4fff6
 800a424:	0036fff6 	.word	0x0036fff6
 800a428:	fff6fff6 	.word	0xfff6fff6
 800a42c:	0087      	.short	0x0087
 800a42e:	0026      	movs	r6, r4
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	3642      	adds	r6, #66	; 0x42
 800a434:	1d11      	adds	r1, r2, #4
 800a436:	6019      	str	r1, [r3, #0]
 800a438:	6813      	ldr	r3, [r2, #0]
 800a43a:	7033      	strb	r3, [r6, #0]
 800a43c:	2301      	movs	r3, #1
 800a43e:	e0a2      	b.n	800a586 <_printf_i+0x1c6>
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	6809      	ldr	r1, [r1, #0]
 800a444:	1d02      	adds	r2, r0, #4
 800a446:	060d      	lsls	r5, r1, #24
 800a448:	d50b      	bpl.n	800a462 <_printf_i+0xa2>
 800a44a:	6805      	ldr	r5, [r0, #0]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	2d00      	cmp	r5, #0
 800a450:	da03      	bge.n	800a45a <_printf_i+0x9a>
 800a452:	232d      	movs	r3, #45	; 0x2d
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	426d      	negs	r5, r5
 800a458:	7013      	strb	r3, [r2, #0]
 800a45a:	4b5f      	ldr	r3, [pc, #380]	; (800a5d8 <_printf_i+0x218>)
 800a45c:	270a      	movs	r7, #10
 800a45e:	9303      	str	r3, [sp, #12]
 800a460:	e01b      	b.n	800a49a <_printf_i+0xda>
 800a462:	6805      	ldr	r5, [r0, #0]
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	0649      	lsls	r1, r1, #25
 800a468:	d5f1      	bpl.n	800a44e <_printf_i+0x8e>
 800a46a:	b22d      	sxth	r5, r5
 800a46c:	e7ef      	b.n	800a44e <_printf_i+0x8e>
 800a46e:	680d      	ldr	r5, [r1, #0]
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	1d08      	adds	r0, r1, #4
 800a474:	6018      	str	r0, [r3, #0]
 800a476:	062e      	lsls	r6, r5, #24
 800a478:	d501      	bpl.n	800a47e <_printf_i+0xbe>
 800a47a:	680d      	ldr	r5, [r1, #0]
 800a47c:	e003      	b.n	800a486 <_printf_i+0xc6>
 800a47e:	066d      	lsls	r5, r5, #25
 800a480:	d5fb      	bpl.n	800a47a <_printf_i+0xba>
 800a482:	680d      	ldr	r5, [r1, #0]
 800a484:	b2ad      	uxth	r5, r5
 800a486:	4b54      	ldr	r3, [pc, #336]	; (800a5d8 <_printf_i+0x218>)
 800a488:	2708      	movs	r7, #8
 800a48a:	9303      	str	r3, [sp, #12]
 800a48c:	2a6f      	cmp	r2, #111	; 0x6f
 800a48e:	d000      	beq.n	800a492 <_printf_i+0xd2>
 800a490:	3702      	adds	r7, #2
 800a492:	0023      	movs	r3, r4
 800a494:	2200      	movs	r2, #0
 800a496:	3343      	adds	r3, #67	; 0x43
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	60a3      	str	r3, [r4, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	db03      	blt.n	800a4aa <_printf_i+0xea>
 800a4a2:	2104      	movs	r1, #4
 800a4a4:	6822      	ldr	r2, [r4, #0]
 800a4a6:	438a      	bics	r2, r1
 800a4a8:	6022      	str	r2, [r4, #0]
 800a4aa:	2d00      	cmp	r5, #0
 800a4ac:	d102      	bne.n	800a4b4 <_printf_i+0xf4>
 800a4ae:	9e04      	ldr	r6, [sp, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00c      	beq.n	800a4ce <_printf_i+0x10e>
 800a4b4:	9e04      	ldr	r6, [sp, #16]
 800a4b6:	0028      	movs	r0, r5
 800a4b8:	0039      	movs	r1, r7
 800a4ba:	f7f5 fec5 	bl	8000248 <__aeabi_uidivmod>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	3e01      	subs	r6, #1
 800a4c2:	5c5b      	ldrb	r3, [r3, r1]
 800a4c4:	7033      	strb	r3, [r6, #0]
 800a4c6:	002b      	movs	r3, r5
 800a4c8:	0005      	movs	r5, r0
 800a4ca:	429f      	cmp	r7, r3
 800a4cc:	d9f3      	bls.n	800a4b6 <_printf_i+0xf6>
 800a4ce:	2f08      	cmp	r7, #8
 800a4d0:	d109      	bne.n	800a4e6 <_printf_i+0x126>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	07db      	lsls	r3, r3, #31
 800a4d6:	d506      	bpl.n	800a4e6 <_printf_i+0x126>
 800a4d8:	6862      	ldr	r2, [r4, #4]
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	dc02      	bgt.n	800a4e6 <_printf_i+0x126>
 800a4e0:	2330      	movs	r3, #48	; 0x30
 800a4e2:	3e01      	subs	r6, #1
 800a4e4:	7033      	strb	r3, [r6, #0]
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	1b9b      	subs	r3, r3, r6
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	0021      	movs	r1, r4
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	9805      	ldr	r0, [sp, #20]
 800a4f4:	9b06      	ldr	r3, [sp, #24]
 800a4f6:	aa09      	add	r2, sp, #36	; 0x24
 800a4f8:	f7ff fef2 	bl	800a2e0 <_printf_common>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d147      	bne.n	800a590 <_printf_i+0x1d0>
 800a500:	2001      	movs	r0, #1
 800a502:	4240      	negs	r0, r0
 800a504:	b00b      	add	sp, #44	; 0x2c
 800a506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a508:	2220      	movs	r2, #32
 800a50a:	6809      	ldr	r1, [r1, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	2278      	movs	r2, #120	; 0x78
 800a512:	4932      	ldr	r1, [pc, #200]	; (800a5dc <_printf_i+0x21c>)
 800a514:	9103      	str	r1, [sp, #12]
 800a516:	0021      	movs	r1, r4
 800a518:	3145      	adds	r1, #69	; 0x45
 800a51a:	700a      	strb	r2, [r1, #0]
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	c920      	ldmia	r1!, {r5}
 800a522:	0610      	lsls	r0, r2, #24
 800a524:	d402      	bmi.n	800a52c <_printf_i+0x16c>
 800a526:	0650      	lsls	r0, r2, #25
 800a528:	d500      	bpl.n	800a52c <_printf_i+0x16c>
 800a52a:	b2ad      	uxth	r5, r5
 800a52c:	6019      	str	r1, [r3, #0]
 800a52e:	07d3      	lsls	r3, r2, #31
 800a530:	d502      	bpl.n	800a538 <_printf_i+0x178>
 800a532:	2320      	movs	r3, #32
 800a534:	4313      	orrs	r3, r2
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	2710      	movs	r7, #16
 800a53a:	2d00      	cmp	r5, #0
 800a53c:	d1a9      	bne.n	800a492 <_printf_i+0xd2>
 800a53e:	2220      	movs	r2, #32
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	4393      	bics	r3, r2
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	e7a4      	b.n	800a492 <_printf_i+0xd2>
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	680d      	ldr	r5, [r1, #0]
 800a54c:	1d10      	adds	r0, r2, #4
 800a54e:	6949      	ldr	r1, [r1, #20]
 800a550:	6018      	str	r0, [r3, #0]
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	062e      	lsls	r6, r5, #24
 800a556:	d501      	bpl.n	800a55c <_printf_i+0x19c>
 800a558:	6019      	str	r1, [r3, #0]
 800a55a:	e002      	b.n	800a562 <_printf_i+0x1a2>
 800a55c:	066d      	lsls	r5, r5, #25
 800a55e:	d5fb      	bpl.n	800a558 <_printf_i+0x198>
 800a560:	8019      	strh	r1, [r3, #0]
 800a562:	2300      	movs	r3, #0
 800a564:	9e04      	ldr	r6, [sp, #16]
 800a566:	6123      	str	r3, [r4, #16]
 800a568:	e7c0      	b.n	800a4ec <_printf_i+0x12c>
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	1d11      	adds	r1, r2, #4
 800a56e:	6019      	str	r1, [r3, #0]
 800a570:	6816      	ldr	r6, [r2, #0]
 800a572:	2100      	movs	r1, #0
 800a574:	0030      	movs	r0, r6
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	f000 f9fd 	bl	800a976 <memchr>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d001      	beq.n	800a584 <_printf_i+0x1c4>
 800a580:	1b80      	subs	r0, r0, r6
 800a582:	6060      	str	r0, [r4, #4]
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	2300      	movs	r3, #0
 800a58a:	9a04      	ldr	r2, [sp, #16]
 800a58c:	7013      	strb	r3, [r2, #0]
 800a58e:	e7ad      	b.n	800a4ec <_printf_i+0x12c>
 800a590:	0032      	movs	r2, r6
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	9906      	ldr	r1, [sp, #24]
 800a596:	9805      	ldr	r0, [sp, #20]
 800a598:	9d07      	ldr	r5, [sp, #28]
 800a59a:	47a8      	blx	r5
 800a59c:	3001      	adds	r0, #1
 800a59e:	d0af      	beq.n	800a500 <_printf_i+0x140>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	079b      	lsls	r3, r3, #30
 800a5a4:	d415      	bmi.n	800a5d2 <_printf_i+0x212>
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	68e0      	ldr	r0, [r4, #12]
 800a5aa:	4298      	cmp	r0, r3
 800a5ac:	daaa      	bge.n	800a504 <_printf_i+0x144>
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	e7a8      	b.n	800a504 <_printf_i+0x144>
 800a5b2:	0022      	movs	r2, r4
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	9906      	ldr	r1, [sp, #24]
 800a5b8:	9805      	ldr	r0, [sp, #20]
 800a5ba:	9e07      	ldr	r6, [sp, #28]
 800a5bc:	3219      	adds	r2, #25
 800a5be:	47b0      	blx	r6
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d09d      	beq.n	800a500 <_printf_i+0x140>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dcf0      	bgt.n	800a5b2 <_printf_i+0x1f2>
 800a5d0:	e7e9      	b.n	800a5a6 <_printf_i+0x1e6>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	e7f7      	b.n	800a5c6 <_printf_i+0x206>
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	0800fb9a 	.word	0x0800fb9a
 800a5dc:	0800fbab 	.word	0x0800fbab

0800a5e0 <std>:
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	0004      	movs	r4, r0
 800a5e6:	6003      	str	r3, [r0, #0]
 800a5e8:	6043      	str	r3, [r0, #4]
 800a5ea:	6083      	str	r3, [r0, #8]
 800a5ec:	8181      	strh	r1, [r0, #12]
 800a5ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a5f0:	81c2      	strh	r2, [r0, #14]
 800a5f2:	6103      	str	r3, [r0, #16]
 800a5f4:	6143      	str	r3, [r0, #20]
 800a5f6:	6183      	str	r3, [r0, #24]
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	2208      	movs	r2, #8
 800a5fc:	305c      	adds	r0, #92	; 0x5c
 800a5fe:	f000 f932 	bl	800a866 <memset>
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <std+0x50>)
 800a604:	6224      	str	r4, [r4, #32]
 800a606:	6263      	str	r3, [r4, #36]	; 0x24
 800a608:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <std+0x54>)
 800a60a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a60c:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <std+0x58>)
 800a60e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <std+0x5c>)
 800a612:	6323      	str	r3, [r4, #48]	; 0x30
 800a614:	4b0a      	ldr	r3, [pc, #40]	; (800a640 <std+0x60>)
 800a616:	429c      	cmp	r4, r3
 800a618:	d005      	beq.n	800a626 <std+0x46>
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <std+0x64>)
 800a61c:	429c      	cmp	r4, r3
 800a61e:	d002      	beq.n	800a626 <std+0x46>
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <std+0x68>)
 800a622:	429c      	cmp	r4, r3
 800a624:	d103      	bne.n	800a62e <std+0x4e>
 800a626:	0020      	movs	r0, r4
 800a628:	3058      	adds	r0, #88	; 0x58
 800a62a:	f000 f9a1 	bl	800a970 <__retarget_lock_init_recursive>
 800a62e:	bd10      	pop	{r4, pc}
 800a630:	0800a7a9 	.word	0x0800a7a9
 800a634:	0800a7d1 	.word	0x0800a7d1
 800a638:	0800a809 	.word	0x0800a809
 800a63c:	0800a835 	.word	0x0800a835
 800a640:	20000878 	.word	0x20000878
 800a644:	200008e0 	.word	0x200008e0
 800a648:	20000948 	.word	0x20000948

0800a64c <stdio_exit_handler>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4a03      	ldr	r2, [pc, #12]	; (800a65c <stdio_exit_handler+0x10>)
 800a650:	4903      	ldr	r1, [pc, #12]	; (800a660 <stdio_exit_handler+0x14>)
 800a652:	4804      	ldr	r0, [pc, #16]	; (800a664 <stdio_exit_handler+0x18>)
 800a654:	f000 f86c 	bl	800a730 <_fwalk_sglue>
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	46c0      	nop			; (mov r8, r8)
 800a65c:	20000044 	.word	0x20000044
 800a660:	0800c3f5 	.word	0x0800c3f5
 800a664:	20000050 	.word	0x20000050

0800a668 <cleanup_stdio>:
 800a668:	6841      	ldr	r1, [r0, #4]
 800a66a:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <cleanup_stdio+0x30>)
 800a66c:	b510      	push	{r4, lr}
 800a66e:	0004      	movs	r4, r0
 800a670:	4299      	cmp	r1, r3
 800a672:	d001      	beq.n	800a678 <cleanup_stdio+0x10>
 800a674:	f001 febe 	bl	800c3f4 <_fflush_r>
 800a678:	68a1      	ldr	r1, [r4, #8]
 800a67a:	4b08      	ldr	r3, [pc, #32]	; (800a69c <cleanup_stdio+0x34>)
 800a67c:	4299      	cmp	r1, r3
 800a67e:	d002      	beq.n	800a686 <cleanup_stdio+0x1e>
 800a680:	0020      	movs	r0, r4
 800a682:	f001 feb7 	bl	800c3f4 <_fflush_r>
 800a686:	68e1      	ldr	r1, [r4, #12]
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <cleanup_stdio+0x38>)
 800a68a:	4299      	cmp	r1, r3
 800a68c:	d002      	beq.n	800a694 <cleanup_stdio+0x2c>
 800a68e:	0020      	movs	r0, r4
 800a690:	f001 feb0 	bl	800c3f4 <_fflush_r>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	20000878 	.word	0x20000878
 800a69c:	200008e0 	.word	0x200008e0
 800a6a0:	20000948 	.word	0x20000948

0800a6a4 <global_stdio_init.part.0>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <global_stdio_init.part.0+0x28>)
 800a6a8:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <global_stdio_init.part.0+0x2c>)
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	4809      	ldr	r0, [pc, #36]	; (800a6d4 <global_stdio_init.part.0+0x30>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f7ff ff95 	bl	800a5e0 <std>
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	2109      	movs	r1, #9
 800a6ba:	4807      	ldr	r0, [pc, #28]	; (800a6d8 <global_stdio_init.part.0+0x34>)
 800a6bc:	f7ff ff90 	bl	800a5e0 <std>
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	2112      	movs	r1, #18
 800a6c4:	4805      	ldr	r0, [pc, #20]	; (800a6dc <global_stdio_init.part.0+0x38>)
 800a6c6:	f7ff ff8b 	bl	800a5e0 <std>
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	200009b0 	.word	0x200009b0
 800a6d0:	0800a64d 	.word	0x0800a64d
 800a6d4:	20000878 	.word	0x20000878
 800a6d8:	200008e0 	.word	0x200008e0
 800a6dc:	20000948 	.word	0x20000948

0800a6e0 <__sfp_lock_acquire>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	4802      	ldr	r0, [pc, #8]	; (800a6ec <__sfp_lock_acquire+0xc>)
 800a6e4:	f000 f945 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	200009b9 	.word	0x200009b9

0800a6f0 <__sfp_lock_release>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4802      	ldr	r0, [pc, #8]	; (800a6fc <__sfp_lock_release+0xc>)
 800a6f4:	f000 f93e 	bl	800a974 <__retarget_lock_release_recursive>
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	200009b9 	.word	0x200009b9

0800a700 <__sinit>:
 800a700:	b510      	push	{r4, lr}
 800a702:	0004      	movs	r4, r0
 800a704:	f7ff ffec 	bl	800a6e0 <__sfp_lock_acquire>
 800a708:	6a23      	ldr	r3, [r4, #32]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <__sinit+0x14>
 800a70e:	f7ff ffef 	bl	800a6f0 <__sfp_lock_release>
 800a712:	bd10      	pop	{r4, pc}
 800a714:	4b04      	ldr	r3, [pc, #16]	; (800a728 <__sinit+0x28>)
 800a716:	6223      	str	r3, [r4, #32]
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <__sinit+0x2c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f6      	bne.n	800a70e <__sinit+0xe>
 800a720:	f7ff ffc0 	bl	800a6a4 <global_stdio_init.part.0>
 800a724:	e7f3      	b.n	800a70e <__sinit+0xe>
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	0800a669 	.word	0x0800a669
 800a72c:	200009b0 	.word	0x200009b0

0800a730 <_fwalk_sglue>:
 800a730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a732:	0014      	movs	r4, r2
 800a734:	2600      	movs	r6, #0
 800a736:	9000      	str	r0, [sp, #0]
 800a738:	9101      	str	r1, [sp, #4]
 800a73a:	68a5      	ldr	r5, [r4, #8]
 800a73c:	6867      	ldr	r7, [r4, #4]
 800a73e:	3f01      	subs	r7, #1
 800a740:	d504      	bpl.n	800a74c <_fwalk_sglue+0x1c>
 800a742:	6824      	ldr	r4, [r4, #0]
 800a744:	2c00      	cmp	r4, #0
 800a746:	d1f8      	bne.n	800a73a <_fwalk_sglue+0xa>
 800a748:	0030      	movs	r0, r6
 800a74a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a74c:	89ab      	ldrh	r3, [r5, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d908      	bls.n	800a764 <_fwalk_sglue+0x34>
 800a752:	220e      	movs	r2, #14
 800a754:	5eab      	ldrsh	r3, [r5, r2]
 800a756:	3301      	adds	r3, #1
 800a758:	d004      	beq.n	800a764 <_fwalk_sglue+0x34>
 800a75a:	0029      	movs	r1, r5
 800a75c:	9800      	ldr	r0, [sp, #0]
 800a75e:	9b01      	ldr	r3, [sp, #4]
 800a760:	4798      	blx	r3
 800a762:	4306      	orrs	r6, r0
 800a764:	3568      	adds	r5, #104	; 0x68
 800a766:	e7ea      	b.n	800a73e <_fwalk_sglue+0xe>

0800a768 <siprintf>:
 800a768:	b40e      	push	{r1, r2, r3}
 800a76a:	b500      	push	{lr}
 800a76c:	490b      	ldr	r1, [pc, #44]	; (800a79c <siprintf+0x34>)
 800a76e:	b09c      	sub	sp, #112	; 0x70
 800a770:	ab1d      	add	r3, sp, #116	; 0x74
 800a772:	9002      	str	r0, [sp, #8]
 800a774:	9006      	str	r0, [sp, #24]
 800a776:	9107      	str	r1, [sp, #28]
 800a778:	9104      	str	r1, [sp, #16]
 800a77a:	4809      	ldr	r0, [pc, #36]	; (800a7a0 <siprintf+0x38>)
 800a77c:	4909      	ldr	r1, [pc, #36]	; (800a7a4 <siprintf+0x3c>)
 800a77e:	cb04      	ldmia	r3!, {r2}
 800a780:	9105      	str	r1, [sp, #20]
 800a782:	6800      	ldr	r0, [r0, #0]
 800a784:	a902      	add	r1, sp, #8
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	f001 fcaa 	bl	800c0e0 <_svfiprintf_r>
 800a78c:	2200      	movs	r2, #0
 800a78e:	9b02      	ldr	r3, [sp, #8]
 800a790:	701a      	strb	r2, [r3, #0]
 800a792:	b01c      	add	sp, #112	; 0x70
 800a794:	bc08      	pop	{r3}
 800a796:	b003      	add	sp, #12
 800a798:	4718      	bx	r3
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	7fffffff 	.word	0x7fffffff
 800a7a0:	2000009c 	.word	0x2000009c
 800a7a4:	ffff0208 	.word	0xffff0208

0800a7a8 <__sread>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	000c      	movs	r4, r1
 800a7ac:	250e      	movs	r5, #14
 800a7ae:	5f49      	ldrsh	r1, [r1, r5]
 800a7b0:	f000 f88c 	bl	800a8cc <_read_r>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	db03      	blt.n	800a7c0 <__sread+0x18>
 800a7b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a7ba:	181b      	adds	r3, r3, r0
 800a7bc:	6563      	str	r3, [r4, #84]	; 0x54
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	4a02      	ldr	r2, [pc, #8]	; (800a7cc <__sread+0x24>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	e7f9      	b.n	800a7be <__sread+0x16>
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	ffffefff 	.word	0xffffefff

0800a7d0 <__swrite>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	001f      	movs	r7, r3
 800a7d4:	898b      	ldrh	r3, [r1, #12]
 800a7d6:	0005      	movs	r5, r0
 800a7d8:	000c      	movs	r4, r1
 800a7da:	0016      	movs	r6, r2
 800a7dc:	05db      	lsls	r3, r3, #23
 800a7de:	d505      	bpl.n	800a7ec <__swrite+0x1c>
 800a7e0:	230e      	movs	r3, #14
 800a7e2:	5ec9      	ldrsh	r1, [r1, r3]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	f000 f85c 	bl	800a8a4 <_lseek_r>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	4a05      	ldr	r2, [pc, #20]	; (800a804 <__swrite+0x34>)
 800a7f0:	0028      	movs	r0, r5
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	0032      	movs	r2, r6
 800a7f8:	230e      	movs	r3, #14
 800a7fa:	5ee1      	ldrsh	r1, [r4, r3]
 800a7fc:	003b      	movs	r3, r7
 800a7fe:	f000 f879 	bl	800a8f4 <_write_r>
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a804:	ffffefff 	.word	0xffffefff

0800a808 <__sseek>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	000c      	movs	r4, r1
 800a80c:	250e      	movs	r5, #14
 800a80e:	5f49      	ldrsh	r1, [r1, r5]
 800a810:	f000 f848 	bl	800a8a4 <_lseek_r>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	1c42      	adds	r2, r0, #1
 800a818:	d103      	bne.n	800a822 <__sseek+0x1a>
 800a81a:	4a05      	ldr	r2, [pc, #20]	; (800a830 <__sseek+0x28>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	bd70      	pop	{r4, r5, r6, pc}
 800a822:	2280      	movs	r2, #128	; 0x80
 800a824:	0152      	lsls	r2, r2, #5
 800a826:	4313      	orrs	r3, r2
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	6560      	str	r0, [r4, #84]	; 0x54
 800a82c:	e7f8      	b.n	800a820 <__sseek+0x18>
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	ffffefff 	.word	0xffffefff

0800a834 <__sclose>:
 800a834:	b510      	push	{r4, lr}
 800a836:	230e      	movs	r3, #14
 800a838:	5ec9      	ldrsh	r1, [r1, r3]
 800a83a:	f000 f821 	bl	800a880 <_close_r>
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <memmove>:
 800a840:	b510      	push	{r4, lr}
 800a842:	4288      	cmp	r0, r1
 800a844:	d902      	bls.n	800a84c <memmove+0xc>
 800a846:	188b      	adds	r3, r1, r2
 800a848:	4298      	cmp	r0, r3
 800a84a:	d303      	bcc.n	800a854 <memmove+0x14>
 800a84c:	2300      	movs	r3, #0
 800a84e:	e007      	b.n	800a860 <memmove+0x20>
 800a850:	5c8b      	ldrb	r3, [r1, r2]
 800a852:	5483      	strb	r3, [r0, r2]
 800a854:	3a01      	subs	r2, #1
 800a856:	d2fb      	bcs.n	800a850 <memmove+0x10>
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	5ccc      	ldrb	r4, [r1, r3]
 800a85c:	54c4      	strb	r4, [r0, r3]
 800a85e:	3301      	adds	r3, #1
 800a860:	429a      	cmp	r2, r3
 800a862:	d1fa      	bne.n	800a85a <memmove+0x1a>
 800a864:	e7f8      	b.n	800a858 <memmove+0x18>

0800a866 <memset>:
 800a866:	0003      	movs	r3, r0
 800a868:	1882      	adds	r2, r0, r2
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d100      	bne.n	800a870 <memset+0xa>
 800a86e:	4770      	bx	lr
 800a870:	7019      	strb	r1, [r3, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	e7f9      	b.n	800a86a <memset+0x4>
	...

0800a878 <_localeconv_r>:
 800a878:	4800      	ldr	r0, [pc, #0]	; (800a87c <_localeconv_r+0x4>)
 800a87a:	4770      	bx	lr
 800a87c:	20000190 	.word	0x20000190

0800a880 <_close_r>:
 800a880:	2300      	movs	r3, #0
 800a882:	b570      	push	{r4, r5, r6, lr}
 800a884:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_close_r+0x20>)
 800a886:	0004      	movs	r4, r0
 800a888:	0008      	movs	r0, r1
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	f7fa f937 	bl	8004afe <_close>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d103      	bne.n	800a89c <_close_r+0x1c>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d000      	beq.n	800a89c <_close_r+0x1c>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	46c0      	nop			; (mov r8, r8)
 800a8a0:	200009b4 	.word	0x200009b4

0800a8a4 <_lseek_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	0004      	movs	r4, r0
 800a8a8:	0008      	movs	r0, r1
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d05      	ldr	r5, [pc, #20]	; (800a8c8 <_lseek_r+0x24>)
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7fa f944 	bl	8004b40 <_lseek>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d103      	bne.n	800a8c4 <_lseek_r+0x20>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d000      	beq.n	800a8c4 <_lseek_r+0x20>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	200009b4 	.word	0x200009b4

0800a8cc <_read_r>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	0008      	movs	r0, r1
 800a8d2:	0011      	movs	r1, r2
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d05      	ldr	r5, [pc, #20]	; (800a8f0 <_read_r+0x24>)
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7fa f8d6 	bl	8004a8c <_read>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d103      	bne.n	800a8ec <_read_r+0x20>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d000      	beq.n	800a8ec <_read_r+0x20>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	200009b4 	.word	0x200009b4

0800a8f4 <_write_r>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	0004      	movs	r4, r0
 800a8f8:	0008      	movs	r0, r1
 800a8fa:	0011      	movs	r1, r2
 800a8fc:	001a      	movs	r2, r3
 800a8fe:	2300      	movs	r3, #0
 800a900:	4d05      	ldr	r5, [pc, #20]	; (800a918 <_write_r+0x24>)
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	f7fa f8df 	bl	8004ac6 <_write>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d103      	bne.n	800a914 <_write_r+0x20>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d000      	beq.n	800a914 <_write_r+0x20>
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	200009b4 	.word	0x200009b4

0800a91c <__errno>:
 800a91c:	4b01      	ldr	r3, [pc, #4]	; (800a924 <__errno+0x8>)
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	4770      	bx	lr
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	2000009c 	.word	0x2000009c

0800a928 <__libc_init_array>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	2600      	movs	r6, #0
 800a92c:	4c0c      	ldr	r4, [pc, #48]	; (800a960 <__libc_init_array+0x38>)
 800a92e:	4d0d      	ldr	r5, [pc, #52]	; (800a964 <__libc_init_array+0x3c>)
 800a930:	1b64      	subs	r4, r4, r5
 800a932:	10a4      	asrs	r4, r4, #2
 800a934:	42a6      	cmp	r6, r4
 800a936:	d109      	bne.n	800a94c <__libc_init_array+0x24>
 800a938:	2600      	movs	r6, #0
 800a93a:	f002 f90f 	bl	800cb5c <_init>
 800a93e:	4c0a      	ldr	r4, [pc, #40]	; (800a968 <__libc_init_array+0x40>)
 800a940:	4d0a      	ldr	r5, [pc, #40]	; (800a96c <__libc_init_array+0x44>)
 800a942:	1b64      	subs	r4, r4, r5
 800a944:	10a4      	asrs	r4, r4, #2
 800a946:	42a6      	cmp	r6, r4
 800a948:	d105      	bne.n	800a956 <__libc_init_array+0x2e>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	00b3      	lsls	r3, r6, #2
 800a94e:	58eb      	ldr	r3, [r5, r3]
 800a950:	4798      	blx	r3
 800a952:	3601      	adds	r6, #1
 800a954:	e7ee      	b.n	800a934 <__libc_init_array+0xc>
 800a956:	00b3      	lsls	r3, r6, #2
 800a958:	58eb      	ldr	r3, [r5, r3]
 800a95a:	4798      	blx	r3
 800a95c:	3601      	adds	r6, #1
 800a95e:	e7f2      	b.n	800a946 <__libc_init_array+0x1e>
 800a960:	0800ff04 	.word	0x0800ff04
 800a964:	0800ff04 	.word	0x0800ff04
 800a968:	0800ff08 	.word	0x0800ff08
 800a96c:	0800ff04 	.word	0x0800ff04

0800a970 <__retarget_lock_init_recursive>:
 800a970:	4770      	bx	lr

0800a972 <__retarget_lock_acquire_recursive>:
 800a972:	4770      	bx	lr

0800a974 <__retarget_lock_release_recursive>:
 800a974:	4770      	bx	lr

0800a976 <memchr>:
 800a976:	b2c9      	uxtb	r1, r1
 800a978:	1882      	adds	r2, r0, r2
 800a97a:	4290      	cmp	r0, r2
 800a97c:	d101      	bne.n	800a982 <memchr+0xc>
 800a97e:	2000      	movs	r0, #0
 800a980:	4770      	bx	lr
 800a982:	7803      	ldrb	r3, [r0, #0]
 800a984:	428b      	cmp	r3, r1
 800a986:	d0fb      	beq.n	800a980 <memchr+0xa>
 800a988:	3001      	adds	r0, #1
 800a98a:	e7f6      	b.n	800a97a <memchr+0x4>

0800a98c <memcpy>:
 800a98c:	2300      	movs	r3, #0
 800a98e:	b510      	push	{r4, lr}
 800a990:	429a      	cmp	r2, r3
 800a992:	d100      	bne.n	800a996 <memcpy+0xa>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	5ccc      	ldrb	r4, [r1, r3]
 800a998:	54c4      	strb	r4, [r0, r3]
 800a99a:	3301      	adds	r3, #1
 800a99c:	e7f8      	b.n	800a990 <memcpy+0x4>

0800a99e <quorem>:
 800a99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a0:	6902      	ldr	r2, [r0, #16]
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	b089      	sub	sp, #36	; 0x24
 800a9a6:	0007      	movs	r7, r0
 800a9a8:	9104      	str	r1, [sp, #16]
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	db69      	blt.n	800aa84 <quorem+0xe6>
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	009c      	lsls	r4, r3, #2
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	000b      	movs	r3, r1
 800a9b8:	3314      	adds	r3, #20
 800a9ba:	9306      	str	r3, [sp, #24]
 800a9bc:	191b      	adds	r3, r3, r4
 800a9be:	9305      	str	r3, [sp, #20]
 800a9c0:	003b      	movs	r3, r7
 800a9c2:	3314      	adds	r3, #20
 800a9c4:	9303      	str	r3, [sp, #12]
 800a9c6:	191c      	adds	r4, r3, r4
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	6826      	ldr	r6, [r4, #0]
 800a9cc:	681d      	ldr	r5, [r3, #0]
 800a9ce:	0030      	movs	r0, r6
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	0029      	movs	r1, r5
 800a9d4:	f7f5 fbb2 	bl	800013c <__udivsi3>
 800a9d8:	9002      	str	r0, [sp, #8]
 800a9da:	42ae      	cmp	r6, r5
 800a9dc:	d329      	bcc.n	800aa32 <quorem+0x94>
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	2600      	movs	r6, #0
 800a9e2:	469c      	mov	ip, r3
 800a9e4:	9d03      	ldr	r5, [sp, #12]
 800a9e6:	9606      	str	r6, [sp, #24]
 800a9e8:	4662      	mov	r2, ip
 800a9ea:	ca08      	ldmia	r2!, {r3}
 800a9ec:	6828      	ldr	r0, [r5, #0]
 800a9ee:	4694      	mov	ip, r2
 800a9f0:	9a02      	ldr	r2, [sp, #8]
 800a9f2:	b299      	uxth	r1, r3
 800a9f4:	4351      	muls	r1, r2
 800a9f6:	0c1b      	lsrs	r3, r3, #16
 800a9f8:	4353      	muls	r3, r2
 800a9fa:	1989      	adds	r1, r1, r6
 800a9fc:	0c0a      	lsrs	r2, r1, #16
 800a9fe:	189b      	adds	r3, r3, r2
 800aa00:	9307      	str	r3, [sp, #28]
 800aa02:	0c1e      	lsrs	r6, r3, #16
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	b282      	uxth	r2, r0
 800aa08:	18d2      	adds	r2, r2, r3
 800aa0a:	466b      	mov	r3, sp
 800aa0c:	b289      	uxth	r1, r1
 800aa0e:	8b9b      	ldrh	r3, [r3, #28]
 800aa10:	1a52      	subs	r2, r2, r1
 800aa12:	0c01      	lsrs	r1, r0, #16
 800aa14:	1ac9      	subs	r1, r1, r3
 800aa16:	1413      	asrs	r3, r2, #16
 800aa18:	18cb      	adds	r3, r1, r3
 800aa1a:	1419      	asrs	r1, r3, #16
 800aa1c:	b292      	uxth	r2, r2
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	4313      	orrs	r3, r2
 800aa22:	c508      	stmia	r5!, {r3}
 800aa24:	9b05      	ldr	r3, [sp, #20]
 800aa26:	9106      	str	r1, [sp, #24]
 800aa28:	4563      	cmp	r3, ip
 800aa2a:	d2dd      	bcs.n	800a9e8 <quorem+0x4a>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d030      	beq.n	800aa94 <quorem+0xf6>
 800aa32:	0038      	movs	r0, r7
 800aa34:	9904      	ldr	r1, [sp, #16]
 800aa36:	f001 f9dd 	bl	800bdf4 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	db21      	blt.n	800aa82 <quorem+0xe4>
 800aa3e:	0038      	movs	r0, r7
 800aa40:	2600      	movs	r6, #0
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	9c04      	ldr	r4, [sp, #16]
 800aa46:	3301      	adds	r3, #1
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	3014      	adds	r0, #20
 800aa4c:	3414      	adds	r4, #20
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	cc02      	ldmia	r4!, {r1}
 800aa52:	b29d      	uxth	r5, r3
 800aa54:	19ad      	adds	r5, r5, r6
 800aa56:	b28a      	uxth	r2, r1
 800aa58:	1aaa      	subs	r2, r5, r2
 800aa5a:	0c09      	lsrs	r1, r1, #16
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	1a5b      	subs	r3, r3, r1
 800aa60:	1411      	asrs	r1, r2, #16
 800aa62:	185b      	adds	r3, r3, r1
 800aa64:	141e      	asrs	r6, r3, #16
 800aa66:	b292      	uxth	r2, r2
 800aa68:	041b      	lsls	r3, r3, #16
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	c008      	stmia	r0!, {r3}
 800aa6e:	9b05      	ldr	r3, [sp, #20]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d2ec      	bcs.n	800aa4e <quorem+0xb0>
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	9a03      	ldr	r2, [sp, #12]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	18d3      	adds	r3, r2, r3
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	d015      	beq.n	800aaae <quorem+0x110>
 800aa82:	9802      	ldr	r0, [sp, #8]
 800aa84:	b009      	add	sp, #36	; 0x24
 800aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d106      	bne.n	800aa9c <quorem+0xfe>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	3c04      	subs	r4, #4
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d3f5      	bcc.n	800aa88 <quorem+0xea>
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	e7c7      	b.n	800aa32 <quorem+0x94>
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d106      	bne.n	800aab6 <quorem+0x118>
 800aaa8:	9a01      	ldr	r2, [sp, #4]
 800aaaa:	3a01      	subs	r2, #1
 800aaac:	9201      	str	r2, [sp, #4]
 800aaae:	9a03      	ldr	r2, [sp, #12]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d3f5      	bcc.n	800aaa2 <quorem+0x104>
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	e7e2      	b.n	800aa82 <quorem+0xe4>

0800aabc <_dtoa_r>:
 800aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aabe:	0014      	movs	r4, r2
 800aac0:	001d      	movs	r5, r3
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	b09d      	sub	sp, #116	; 0x74
 800aac6:	9408      	str	r4, [sp, #32]
 800aac8:	9509      	str	r5, [sp, #36]	; 0x24
 800aaca:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800aacc:	9004      	str	r0, [sp, #16]
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d10f      	bne.n	800aaf2 <_dtoa_r+0x36>
 800aad2:	2010      	movs	r0, #16
 800aad4:	f000 fe4a 	bl	800b76c <malloc>
 800aad8:	9b04      	ldr	r3, [sp, #16]
 800aada:	1e02      	subs	r2, r0, #0
 800aadc:	61d8      	str	r0, [r3, #28]
 800aade:	d104      	bne.n	800aaea <_dtoa_r+0x2e>
 800aae0:	21ef      	movs	r1, #239	; 0xef
 800aae2:	4bc6      	ldr	r3, [pc, #792]	; (800adfc <_dtoa_r+0x340>)
 800aae4:	48c6      	ldr	r0, [pc, #792]	; (800ae00 <_dtoa_r+0x344>)
 800aae6:	f001 fcc3 	bl	800c470 <__assert_func>
 800aaea:	6046      	str	r6, [r0, #4]
 800aaec:	6086      	str	r6, [r0, #8]
 800aaee:	6006      	str	r6, [r0, #0]
 800aaf0:	60c6      	str	r6, [r0, #12]
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	6819      	ldr	r1, [r3, #0]
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	d00b      	beq.n	800ab14 <_dtoa_r+0x58>
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	2301      	movs	r3, #1
 800ab00:	4093      	lsls	r3, r2
 800ab02:	604a      	str	r2, [r1, #4]
 800ab04:	608b      	str	r3, [r1, #8]
 800ab06:	9804      	ldr	r0, [sp, #16]
 800ab08:	f000 ff32 	bl	800b970 <_Bfree>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	da1e      	bge.n	800ab56 <_dtoa_r+0x9a>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	006b      	lsls	r3, r5, #1
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	9309      	str	r3, [sp, #36]	; 0x24
 800ab22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab24:	4bb7      	ldr	r3, [pc, #732]	; (800ae04 <_dtoa_r+0x348>)
 800ab26:	4ab7      	ldr	r2, [pc, #732]	; (800ae04 <_dtoa_r+0x348>)
 800ab28:	403b      	ands	r3, r7
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d116      	bne.n	800ab5c <_dtoa_r+0xa0>
 800ab2e:	4bb6      	ldr	r3, [pc, #728]	; (800ae08 <_dtoa_r+0x34c>)
 800ab30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	033b      	lsls	r3, r7, #12
 800ab36:	0b1b      	lsrs	r3, r3, #12
 800ab38:	4323      	orrs	r3, r4
 800ab3a:	d101      	bne.n	800ab40 <_dtoa_r+0x84>
 800ab3c:	f000 fdb5 	bl	800b6aa <_dtoa_r+0xbee>
 800ab40:	4bb2      	ldr	r3, [pc, #712]	; (800ae0c <_dtoa_r+0x350>)
 800ab42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	2a00      	cmp	r2, #0
 800ab48:	d002      	beq.n	800ab50 <_dtoa_r+0x94>
 800ab4a:	4bb1      	ldr	r3, [pc, #708]	; (800ae10 <_dtoa_r+0x354>)
 800ab4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	9806      	ldr	r0, [sp, #24]
 800ab52:	b01d      	add	sp, #116	; 0x74
 800ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab56:	2300      	movs	r3, #0
 800ab58:	603b      	str	r3, [r7, #0]
 800ab5a:	e7e2      	b.n	800ab22 <_dtoa_r+0x66>
 800ab5c:	9a08      	ldr	r2, [sp, #32]
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	9210      	str	r2, [sp, #64]	; 0x40
 800ab62:	9311      	str	r3, [sp, #68]	; 0x44
 800ab64:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f7f5 fc6c 	bl	8000448 <__aeabi_dcmpeq>
 800ab70:	1e06      	subs	r6, r0, #0
 800ab72:	d009      	beq.n	800ab88 <_dtoa_r+0xcc>
 800ab74:	2301      	movs	r3, #1
 800ab76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	4ba6      	ldr	r3, [pc, #664]	; (800ae14 <_dtoa_r+0x358>)
 800ab7c:	9306      	str	r3, [sp, #24]
 800ab7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0e5      	beq.n	800ab50 <_dtoa_r+0x94>
 800ab84:	4ba4      	ldr	r3, [pc, #656]	; (800ae18 <_dtoa_r+0x35c>)
 800ab86:	e7e1      	b.n	800ab4c <_dtoa_r+0x90>
 800ab88:	ab1a      	add	r3, sp, #104	; 0x68
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	9804      	ldr	r0, [sp, #16]
 800ab92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab96:	f001 f9e1 	bl	800bf5c <__d2b>
 800ab9a:	007a      	lsls	r2, r7, #1
 800ab9c:	9005      	str	r0, [sp, #20]
 800ab9e:	0d52      	lsrs	r2, r2, #21
 800aba0:	d100      	bne.n	800aba4 <_dtoa_r+0xe8>
 800aba2:	e07b      	b.n	800ac9c <_dtoa_r+0x1e0>
 800aba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aba6:	9617      	str	r6, [sp, #92]	; 0x5c
 800aba8:	0319      	lsls	r1, r3, #12
 800abaa:	4b9c      	ldr	r3, [pc, #624]	; (800ae1c <_dtoa_r+0x360>)
 800abac:	0b09      	lsrs	r1, r1, #12
 800abae:	430b      	orrs	r3, r1
 800abb0:	499b      	ldr	r1, [pc, #620]	; (800ae20 <_dtoa_r+0x364>)
 800abb2:	1857      	adds	r7, r2, r1
 800abb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abb8:	0019      	movs	r1, r3
 800abba:	2200      	movs	r2, #0
 800abbc:	4b99      	ldr	r3, [pc, #612]	; (800ae24 <_dtoa_r+0x368>)
 800abbe:	f7f7 fd05 	bl	80025cc <__aeabi_dsub>
 800abc2:	4a99      	ldr	r2, [pc, #612]	; (800ae28 <_dtoa_r+0x36c>)
 800abc4:	4b99      	ldr	r3, [pc, #612]	; (800ae2c <_dtoa_r+0x370>)
 800abc6:	f7f7 fa3f 	bl	8002048 <__aeabi_dmul>
 800abca:	4a99      	ldr	r2, [pc, #612]	; (800ae30 <_dtoa_r+0x374>)
 800abcc:	4b99      	ldr	r3, [pc, #612]	; (800ae34 <_dtoa_r+0x378>)
 800abce:	f7f6 fae1 	bl	8001194 <__aeabi_dadd>
 800abd2:	0004      	movs	r4, r0
 800abd4:	0038      	movs	r0, r7
 800abd6:	000d      	movs	r5, r1
 800abd8:	f7f8 f8ce 	bl	8002d78 <__aeabi_i2d>
 800abdc:	4a96      	ldr	r2, [pc, #600]	; (800ae38 <_dtoa_r+0x37c>)
 800abde:	4b97      	ldr	r3, [pc, #604]	; (800ae3c <_dtoa_r+0x380>)
 800abe0:	f7f7 fa32 	bl	8002048 <__aeabi_dmul>
 800abe4:	0002      	movs	r2, r0
 800abe6:	000b      	movs	r3, r1
 800abe8:	0020      	movs	r0, r4
 800abea:	0029      	movs	r1, r5
 800abec:	f7f6 fad2 	bl	8001194 <__aeabi_dadd>
 800abf0:	0004      	movs	r4, r0
 800abf2:	000d      	movs	r5, r1
 800abf4:	f7f8 f88a 	bl	8002d0c <__aeabi_d2iz>
 800abf8:	2200      	movs	r2, #0
 800abfa:	9003      	str	r0, [sp, #12]
 800abfc:	2300      	movs	r3, #0
 800abfe:	0020      	movs	r0, r4
 800ac00:	0029      	movs	r1, r5
 800ac02:	f7f5 fc27 	bl	8000454 <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d00b      	beq.n	800ac22 <_dtoa_r+0x166>
 800ac0a:	9803      	ldr	r0, [sp, #12]
 800ac0c:	f7f8 f8b4 	bl	8002d78 <__aeabi_i2d>
 800ac10:	002b      	movs	r3, r5
 800ac12:	0022      	movs	r2, r4
 800ac14:	f7f5 fc18 	bl	8000448 <__aeabi_dcmpeq>
 800ac18:	4243      	negs	r3, r0
 800ac1a:	4158      	adcs	r0, r3
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	1a1b      	subs	r3, r3, r0
 800ac20:	9303      	str	r3, [sp, #12]
 800ac22:	2301      	movs	r3, #1
 800ac24:	9316      	str	r3, [sp, #88]	; 0x58
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	2b16      	cmp	r3, #22
 800ac2a:	d810      	bhi.n	800ac4e <_dtoa_r+0x192>
 800ac2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac30:	9a03      	ldr	r2, [sp, #12]
 800ac32:	4b83      	ldr	r3, [pc, #524]	; (800ae40 <_dtoa_r+0x384>)
 800ac34:	00d2      	lsls	r2, r2, #3
 800ac36:	189b      	adds	r3, r3, r2
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f7f5 fc0a 	bl	8000454 <__aeabi_dcmplt>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d047      	beq.n	800acd4 <_dtoa_r+0x218>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9316      	str	r3, [sp, #88]	; 0x58
 800ac4e:	2200      	movs	r2, #0
 800ac50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ac52:	920a      	str	r2, [sp, #40]	; 0x28
 800ac54:	1bdb      	subs	r3, r3, r7
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	d53e      	bpl.n	800acd8 <_dtoa_r+0x21c>
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac60:	2300      	movs	r3, #0
 800ac62:	930c      	str	r3, [sp, #48]	; 0x30
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	db38      	blt.n	800acdc <_dtoa_r+0x220>
 800ac6a:	9a03      	ldr	r2, [sp, #12]
 800ac6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6e:	4694      	mov	ip, r2
 800ac70:	4463      	add	r3, ip
 800ac72:	930c      	str	r3, [sp, #48]	; 0x30
 800ac74:	2300      	movs	r3, #0
 800ac76:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac78:	930d      	str	r3, [sp, #52]	; 0x34
 800ac7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac7c:	2401      	movs	r4, #1
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	d867      	bhi.n	800ad52 <_dtoa_r+0x296>
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	dd02      	ble.n	800ac8c <_dtoa_r+0x1d0>
 800ac86:	2400      	movs	r4, #0
 800ac88:	3b04      	subs	r3, #4
 800ac8a:	9322      	str	r3, [sp, #136]	; 0x88
 800ac8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac8e:	1e98      	subs	r0, r3, #2
 800ac90:	2803      	cmp	r0, #3
 800ac92:	d867      	bhi.n	800ad64 <_dtoa_r+0x2a8>
 800ac94:	f7f5 fa3e 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ac98:	5b383a2b 	.word	0x5b383a2b
 800ac9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac9e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800aca0:	18f6      	adds	r6, r6, r3
 800aca2:	4b68      	ldr	r3, [pc, #416]	; (800ae44 <_dtoa_r+0x388>)
 800aca4:	18f2      	adds	r2, r6, r3
 800aca6:	2a20      	cmp	r2, #32
 800aca8:	dd0f      	ble.n	800acca <_dtoa_r+0x20e>
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	409f      	lsls	r7, r3
 800acb0:	4b65      	ldr	r3, [pc, #404]	; (800ae48 <_dtoa_r+0x38c>)
 800acb2:	0038      	movs	r0, r7
 800acb4:	18f3      	adds	r3, r6, r3
 800acb6:	40dc      	lsrs	r4, r3
 800acb8:	4320      	orrs	r0, r4
 800acba:	f7f8 f88d 	bl	8002dd8 <__aeabi_ui2d>
 800acbe:	2201      	movs	r2, #1
 800acc0:	4b62      	ldr	r3, [pc, #392]	; (800ae4c <_dtoa_r+0x390>)
 800acc2:	1e77      	subs	r7, r6, #1
 800acc4:	18cb      	adds	r3, r1, r3
 800acc6:	9217      	str	r2, [sp, #92]	; 0x5c
 800acc8:	e776      	b.n	800abb8 <_dtoa_r+0xfc>
 800acca:	2320      	movs	r3, #32
 800accc:	0020      	movs	r0, r4
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	4098      	lsls	r0, r3
 800acd2:	e7f2      	b.n	800acba <_dtoa_r+0x1fe>
 800acd4:	9016      	str	r0, [sp, #88]	; 0x58
 800acd6:	e7ba      	b.n	800ac4e <_dtoa_r+0x192>
 800acd8:	920c      	str	r2, [sp, #48]	; 0x30
 800acda:	e7c3      	b.n	800ac64 <_dtoa_r+0x1a8>
 800acdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acde:	9a03      	ldr	r2, [sp, #12]
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	930a      	str	r3, [sp, #40]	; 0x28
 800ace4:	4253      	negs	r3, r2
 800ace6:	930d      	str	r3, [sp, #52]	; 0x34
 800ace8:	2300      	movs	r3, #0
 800acea:	9313      	str	r3, [sp, #76]	; 0x4c
 800acec:	e7c5      	b.n	800ac7a <_dtoa_r+0x1be>
 800acee:	2300      	movs	r3, #0
 800acf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800acf6:	9307      	str	r3, [sp, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dc13      	bgt.n	800ad24 <_dtoa_r+0x268>
 800acfc:	2301      	movs	r3, #1
 800acfe:	001a      	movs	r2, r3
 800ad00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad02:	9307      	str	r3, [sp, #28]
 800ad04:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad06:	e00d      	b.n	800ad24 <_dtoa_r+0x268>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e7f1      	b.n	800acf0 <_dtoa_r+0x234>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ad10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad12:	4694      	mov	ip, r2
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	4463      	add	r3, ip
 800ad18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	9307      	str	r3, [sp, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	dc00      	bgt.n	800ad24 <_dtoa_r+0x268>
 800ad22:	2301      	movs	r3, #1
 800ad24:	9a04      	ldr	r2, [sp, #16]
 800ad26:	2100      	movs	r1, #0
 800ad28:	69d0      	ldr	r0, [r2, #28]
 800ad2a:	2204      	movs	r2, #4
 800ad2c:	0015      	movs	r5, r2
 800ad2e:	3514      	adds	r5, #20
 800ad30:	429d      	cmp	r5, r3
 800ad32:	d91b      	bls.n	800ad6c <_dtoa_r+0x2b0>
 800ad34:	6041      	str	r1, [r0, #4]
 800ad36:	9804      	ldr	r0, [sp, #16]
 800ad38:	f000 fdd6 	bl	800b8e8 <_Balloc>
 800ad3c:	9006      	str	r0, [sp, #24]
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d117      	bne.n	800ad72 <_dtoa_r+0x2b6>
 800ad42:	21b0      	movs	r1, #176	; 0xb0
 800ad44:	4b42      	ldr	r3, [pc, #264]	; (800ae50 <_dtoa_r+0x394>)
 800ad46:	482e      	ldr	r0, [pc, #184]	; (800ae00 <_dtoa_r+0x344>)
 800ad48:	9a06      	ldr	r2, [sp, #24]
 800ad4a:	31ff      	adds	r1, #255	; 0xff
 800ad4c:	e6cb      	b.n	800aae6 <_dtoa_r+0x2a>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7dd      	b.n	800ad0e <_dtoa_r+0x252>
 800ad52:	2300      	movs	r3, #0
 800ad54:	940f      	str	r4, [sp, #60]	; 0x3c
 800ad56:	9322      	str	r3, [sp, #136]	; 0x88
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad5c:	9307      	str	r3, [sp, #28]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	3313      	adds	r3, #19
 800ad62:	e7cf      	b.n	800ad04 <_dtoa_r+0x248>
 800ad64:	2301      	movs	r3, #1
 800ad66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad68:	3b02      	subs	r3, #2
 800ad6a:	e7f6      	b.n	800ad5a <_dtoa_r+0x29e>
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	0052      	lsls	r2, r2, #1
 800ad70:	e7dc      	b.n	800ad2c <_dtoa_r+0x270>
 800ad72:	9b04      	ldr	r3, [sp, #16]
 800ad74:	9a06      	ldr	r2, [sp, #24]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	2b0e      	cmp	r3, #14
 800ad7e:	d900      	bls.n	800ad82 <_dtoa_r+0x2c6>
 800ad80:	e0e5      	b.n	800af4e <_dtoa_r+0x492>
 800ad82:	2c00      	cmp	r4, #0
 800ad84:	d100      	bne.n	800ad88 <_dtoa_r+0x2cc>
 800ad86:	e0e2      	b.n	800af4e <_dtoa_r+0x492>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dd64      	ble.n	800ae58 <_dtoa_r+0x39c>
 800ad8e:	210f      	movs	r1, #15
 800ad90:	9a03      	ldr	r2, [sp, #12]
 800ad92:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <_dtoa_r+0x384>)
 800ad94:	400a      	ands	r2, r1
 800ad96:	00d2      	lsls	r2, r2, #3
 800ad98:	189b      	adds	r3, r3, r2
 800ad9a:	681e      	ldr	r6, [r3, #0]
 800ad9c:	685f      	ldr	r7, [r3, #4]
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	2402      	movs	r4, #2
 800ada2:	111d      	asrs	r5, r3, #4
 800ada4:	05db      	lsls	r3, r3, #23
 800ada6:	d50a      	bpl.n	800adbe <_dtoa_r+0x302>
 800ada8:	4b2a      	ldr	r3, [pc, #168]	; (800ae54 <_dtoa_r+0x398>)
 800adaa:	400d      	ands	r5, r1
 800adac:	6a1a      	ldr	r2, [r3, #32]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adb2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adb4:	f7f6 fd4e 	bl	8001854 <__aeabi_ddiv>
 800adb8:	9008      	str	r0, [sp, #32]
 800adba:	9109      	str	r1, [sp, #36]	; 0x24
 800adbc:	3401      	adds	r4, #1
 800adbe:	4b25      	ldr	r3, [pc, #148]	; (800ae54 <_dtoa_r+0x398>)
 800adc0:	930e      	str	r3, [sp, #56]	; 0x38
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	d108      	bne.n	800add8 <_dtoa_r+0x31c>
 800adc6:	9808      	ldr	r0, [sp, #32]
 800adc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adca:	0032      	movs	r2, r6
 800adcc:	003b      	movs	r3, r7
 800adce:	f7f6 fd41 	bl	8001854 <__aeabi_ddiv>
 800add2:	9008      	str	r0, [sp, #32]
 800add4:	9109      	str	r1, [sp, #36]	; 0x24
 800add6:	e05a      	b.n	800ae8e <_dtoa_r+0x3d2>
 800add8:	2301      	movs	r3, #1
 800adda:	421d      	tst	r5, r3
 800addc:	d009      	beq.n	800adf2 <_dtoa_r+0x336>
 800adde:	18e4      	adds	r4, r4, r3
 800ade0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade2:	0030      	movs	r0, r6
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	0039      	movs	r1, r7
 800adea:	f7f7 f92d 	bl	8002048 <__aeabi_dmul>
 800adee:	0006      	movs	r6, r0
 800adf0:	000f      	movs	r7, r1
 800adf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf4:	106d      	asrs	r5, r5, #1
 800adf6:	3308      	adds	r3, #8
 800adf8:	e7e2      	b.n	800adc0 <_dtoa_r+0x304>
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	0800fbc9 	.word	0x0800fbc9
 800ae00:	0800fbe0 	.word	0x0800fbe0
 800ae04:	7ff00000 	.word	0x7ff00000
 800ae08:	0000270f 	.word	0x0000270f
 800ae0c:	0800fbc5 	.word	0x0800fbc5
 800ae10:	0800fbc8 	.word	0x0800fbc8
 800ae14:	0800fb98 	.word	0x0800fb98
 800ae18:	0800fb99 	.word	0x0800fb99
 800ae1c:	3ff00000 	.word	0x3ff00000
 800ae20:	fffffc01 	.word	0xfffffc01
 800ae24:	3ff80000 	.word	0x3ff80000
 800ae28:	636f4361 	.word	0x636f4361
 800ae2c:	3fd287a7 	.word	0x3fd287a7
 800ae30:	8b60c8b3 	.word	0x8b60c8b3
 800ae34:	3fc68a28 	.word	0x3fc68a28
 800ae38:	509f79fb 	.word	0x509f79fb
 800ae3c:	3fd34413 	.word	0x3fd34413
 800ae40:	0800fcd0 	.word	0x0800fcd0
 800ae44:	00000432 	.word	0x00000432
 800ae48:	00000412 	.word	0x00000412
 800ae4c:	fe100000 	.word	0xfe100000
 800ae50:	0800fc38 	.word	0x0800fc38
 800ae54:	0800fca8 	.word	0x0800fca8
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	2402      	movs	r4, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d016      	beq.n	800ae8e <_dtoa_r+0x3d2>
 800ae60:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae64:	220f      	movs	r2, #15
 800ae66:	425d      	negs	r5, r3
 800ae68:	402a      	ands	r2, r5
 800ae6a:	4bdd      	ldr	r3, [pc, #884]	; (800b1e0 <_dtoa_r+0x724>)
 800ae6c:	00d2      	lsls	r2, r2, #3
 800ae6e:	189b      	adds	r3, r3, r2
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f7f7 f8e8 	bl	8002048 <__aeabi_dmul>
 800ae78:	2701      	movs	r7, #1
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9008      	str	r0, [sp, #32]
 800ae7e:	9109      	str	r1, [sp, #36]	; 0x24
 800ae80:	4ed8      	ldr	r6, [pc, #864]	; (800b1e4 <_dtoa_r+0x728>)
 800ae82:	112d      	asrs	r5, r5, #4
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	d000      	beq.n	800ae8a <_dtoa_r+0x3ce>
 800ae88:	e091      	b.n	800afae <_dtoa_r+0x4f2>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1a1      	bne.n	800add2 <_dtoa_r+0x316>
 800ae8e:	9e08      	ldr	r6, [sp, #32]
 800ae90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d100      	bne.n	800ae9a <_dtoa_r+0x3de>
 800ae98:	e094      	b.n	800afc4 <_dtoa_r+0x508>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	0030      	movs	r0, r6
 800ae9e:	0039      	movs	r1, r7
 800aea0:	4bd1      	ldr	r3, [pc, #836]	; (800b1e8 <_dtoa_r+0x72c>)
 800aea2:	f7f5 fad7 	bl	8000454 <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d100      	bne.n	800aeac <_dtoa_r+0x3f0>
 800aeaa:	e08b      	b.n	800afc4 <_dtoa_r+0x508>
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d100      	bne.n	800aeb4 <_dtoa_r+0x3f8>
 800aeb2:	e087      	b.n	800afc4 <_dtoa_r+0x508>
 800aeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dd45      	ble.n	800af46 <_dtoa_r+0x48a>
 800aeba:	9b03      	ldr	r3, [sp, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	3b01      	subs	r3, #1
 800aec0:	930e      	str	r3, [sp, #56]	; 0x38
 800aec2:	0030      	movs	r0, r6
 800aec4:	4bc9      	ldr	r3, [pc, #804]	; (800b1ec <_dtoa_r+0x730>)
 800aec6:	0039      	movs	r1, r7
 800aec8:	f7f7 f8be 	bl	8002048 <__aeabi_dmul>
 800aecc:	9008      	str	r0, [sp, #32]
 800aece:	9109      	str	r1, [sp, #36]	; 0x24
 800aed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed2:	3401      	adds	r4, #1
 800aed4:	0020      	movs	r0, r4
 800aed6:	9e08      	ldr	r6, [sp, #32]
 800aed8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aeda:	9312      	str	r3, [sp, #72]	; 0x48
 800aedc:	f7f7 ff4c 	bl	8002d78 <__aeabi_i2d>
 800aee0:	0032      	movs	r2, r6
 800aee2:	003b      	movs	r3, r7
 800aee4:	f7f7 f8b0 	bl	8002048 <__aeabi_dmul>
 800aee8:	2200      	movs	r2, #0
 800aeea:	4bc1      	ldr	r3, [pc, #772]	; (800b1f0 <_dtoa_r+0x734>)
 800aeec:	f7f6 f952 	bl	8001194 <__aeabi_dadd>
 800aef0:	4ac0      	ldr	r2, [pc, #768]	; (800b1f4 <_dtoa_r+0x738>)
 800aef2:	9014      	str	r0, [sp, #80]	; 0x50
 800aef4:	9115      	str	r1, [sp, #84]	; 0x54
 800aef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aef8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800aefa:	4694      	mov	ip, r2
 800aefc:	9308      	str	r3, [sp, #32]
 800aefe:	9409      	str	r4, [sp, #36]	; 0x24
 800af00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af02:	4463      	add	r3, ip
 800af04:	9318      	str	r3, [sp, #96]	; 0x60
 800af06:	9309      	str	r3, [sp, #36]	; 0x24
 800af08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d15e      	bne.n	800afcc <_dtoa_r+0x510>
 800af0e:	2200      	movs	r2, #0
 800af10:	4bb9      	ldr	r3, [pc, #740]	; (800b1f8 <_dtoa_r+0x73c>)
 800af12:	0030      	movs	r0, r6
 800af14:	0039      	movs	r1, r7
 800af16:	f7f7 fb59 	bl	80025cc <__aeabi_dsub>
 800af1a:	9a08      	ldr	r2, [sp, #32]
 800af1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af1e:	0004      	movs	r4, r0
 800af20:	000d      	movs	r5, r1
 800af22:	f7f5 faab 	bl	800047c <__aeabi_dcmpgt>
 800af26:	2800      	cmp	r0, #0
 800af28:	d000      	beq.n	800af2c <_dtoa_r+0x470>
 800af2a:	e2b3      	b.n	800b494 <_dtoa_r+0x9d8>
 800af2c:	48b3      	ldr	r0, [pc, #716]	; (800b1fc <_dtoa_r+0x740>)
 800af2e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af30:	4684      	mov	ip, r0
 800af32:	4461      	add	r1, ip
 800af34:	000b      	movs	r3, r1
 800af36:	0020      	movs	r0, r4
 800af38:	0029      	movs	r1, r5
 800af3a:	9a08      	ldr	r2, [sp, #32]
 800af3c:	f7f5 fa8a 	bl	8000454 <__aeabi_dcmplt>
 800af40:	2800      	cmp	r0, #0
 800af42:	d000      	beq.n	800af46 <_dtoa_r+0x48a>
 800af44:	e2a3      	b.n	800b48e <_dtoa_r+0x9d2>
 800af46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800af4a:	9308      	str	r3, [sp, #32]
 800af4c:	9409      	str	r4, [sp, #36]	; 0x24
 800af4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af50:	2b00      	cmp	r3, #0
 800af52:	da00      	bge.n	800af56 <_dtoa_r+0x49a>
 800af54:	e179      	b.n	800b24a <_dtoa_r+0x78e>
 800af56:	9a03      	ldr	r2, [sp, #12]
 800af58:	2a0e      	cmp	r2, #14
 800af5a:	dd00      	ble.n	800af5e <_dtoa_r+0x4a2>
 800af5c:	e175      	b.n	800b24a <_dtoa_r+0x78e>
 800af5e:	4ba0      	ldr	r3, [pc, #640]	; (800b1e0 <_dtoa_r+0x724>)
 800af60:	00d2      	lsls	r2, r2, #3
 800af62:	189b      	adds	r3, r3, r2
 800af64:	681e      	ldr	r6, [r3, #0]
 800af66:	685f      	ldr	r7, [r3, #4]
 800af68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	db00      	blt.n	800af70 <_dtoa_r+0x4b4>
 800af6e:	e0e5      	b.n	800b13c <_dtoa_r+0x680>
 800af70:	9b07      	ldr	r3, [sp, #28]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dd00      	ble.n	800af78 <_dtoa_r+0x4bc>
 800af76:	e0e1      	b.n	800b13c <_dtoa_r+0x680>
 800af78:	d000      	beq.n	800af7c <_dtoa_r+0x4c0>
 800af7a:	e288      	b.n	800b48e <_dtoa_r+0x9d2>
 800af7c:	2200      	movs	r2, #0
 800af7e:	0030      	movs	r0, r6
 800af80:	0039      	movs	r1, r7
 800af82:	4b9d      	ldr	r3, [pc, #628]	; (800b1f8 <_dtoa_r+0x73c>)
 800af84:	f7f7 f860 	bl	8002048 <__aeabi_dmul>
 800af88:	9a08      	ldr	r2, [sp, #32]
 800af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8c:	f7f5 fa80 	bl	8000490 <__aeabi_dcmpge>
 800af90:	9e07      	ldr	r6, [sp, #28]
 800af92:	0037      	movs	r7, r6
 800af94:	2800      	cmp	r0, #0
 800af96:	d000      	beq.n	800af9a <_dtoa_r+0x4de>
 800af98:	e25f      	b.n	800b45a <_dtoa_r+0x99e>
 800af9a:	9b06      	ldr	r3, [sp, #24]
 800af9c:	9a06      	ldr	r2, [sp, #24]
 800af9e:	3301      	adds	r3, #1
 800afa0:	9308      	str	r3, [sp, #32]
 800afa2:	2331      	movs	r3, #49	; 0x31
 800afa4:	7013      	strb	r3, [r2, #0]
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	3301      	adds	r3, #1
 800afaa:	9303      	str	r3, [sp, #12]
 800afac:	e25a      	b.n	800b464 <_dtoa_r+0x9a8>
 800afae:	423d      	tst	r5, r7
 800afb0:	d005      	beq.n	800afbe <_dtoa_r+0x502>
 800afb2:	6832      	ldr	r2, [r6, #0]
 800afb4:	6873      	ldr	r3, [r6, #4]
 800afb6:	f7f7 f847 	bl	8002048 <__aeabi_dmul>
 800afba:	003b      	movs	r3, r7
 800afbc:	3401      	adds	r4, #1
 800afbe:	106d      	asrs	r5, r5, #1
 800afc0:	3608      	adds	r6, #8
 800afc2:	e75f      	b.n	800ae84 <_dtoa_r+0x3c8>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	930e      	str	r3, [sp, #56]	; 0x38
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	e783      	b.n	800aed4 <_dtoa_r+0x418>
 800afcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afce:	4b84      	ldr	r3, [pc, #528]	; (800b1e0 <_dtoa_r+0x724>)
 800afd0:	3a01      	subs	r2, #1
 800afd2:	00d2      	lsls	r2, r2, #3
 800afd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afd6:	189b      	adds	r3, r3, r2
 800afd8:	9c08      	ldr	r4, [sp, #32]
 800afda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	d051      	beq.n	800b088 <_dtoa_r+0x5cc>
 800afe4:	2000      	movs	r0, #0
 800afe6:	4986      	ldr	r1, [pc, #536]	; (800b200 <_dtoa_r+0x744>)
 800afe8:	f7f6 fc34 	bl	8001854 <__aeabi_ddiv>
 800afec:	0022      	movs	r2, r4
 800afee:	002b      	movs	r3, r5
 800aff0:	f7f7 faec 	bl	80025cc <__aeabi_dsub>
 800aff4:	9a06      	ldr	r2, [sp, #24]
 800aff6:	0004      	movs	r4, r0
 800aff8:	4694      	mov	ip, r2
 800affa:	000d      	movs	r5, r1
 800affc:	9b06      	ldr	r3, [sp, #24]
 800affe:	9314      	str	r3, [sp, #80]	; 0x50
 800b000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b002:	4463      	add	r3, ip
 800b004:	9318      	str	r3, [sp, #96]	; 0x60
 800b006:	0039      	movs	r1, r7
 800b008:	0030      	movs	r0, r6
 800b00a:	f7f7 fe7f 	bl	8002d0c <__aeabi_d2iz>
 800b00e:	9012      	str	r0, [sp, #72]	; 0x48
 800b010:	f7f7 feb2 	bl	8002d78 <__aeabi_i2d>
 800b014:	0002      	movs	r2, r0
 800b016:	000b      	movs	r3, r1
 800b018:	0030      	movs	r0, r6
 800b01a:	0039      	movs	r1, r7
 800b01c:	f7f7 fad6 	bl	80025cc <__aeabi_dsub>
 800b020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b022:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b024:	3301      	adds	r3, #1
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b02a:	0006      	movs	r6, r0
 800b02c:	3330      	adds	r3, #48	; 0x30
 800b02e:	7013      	strb	r3, [r2, #0]
 800b030:	0022      	movs	r2, r4
 800b032:	002b      	movs	r3, r5
 800b034:	000f      	movs	r7, r1
 800b036:	f7f5 fa0d 	bl	8000454 <__aeabi_dcmplt>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d174      	bne.n	800b128 <_dtoa_r+0x66c>
 800b03e:	0032      	movs	r2, r6
 800b040:	003b      	movs	r3, r7
 800b042:	2000      	movs	r0, #0
 800b044:	4968      	ldr	r1, [pc, #416]	; (800b1e8 <_dtoa_r+0x72c>)
 800b046:	f7f7 fac1 	bl	80025cc <__aeabi_dsub>
 800b04a:	0022      	movs	r2, r4
 800b04c:	002b      	movs	r3, r5
 800b04e:	f7f5 fa01 	bl	8000454 <__aeabi_dcmplt>
 800b052:	2800      	cmp	r0, #0
 800b054:	d000      	beq.n	800b058 <_dtoa_r+0x59c>
 800b056:	e0d7      	b.n	800b208 <_dtoa_r+0x74c>
 800b058:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b05a:	9a08      	ldr	r2, [sp, #32]
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d100      	bne.n	800b062 <_dtoa_r+0x5a6>
 800b060:	e771      	b.n	800af46 <_dtoa_r+0x48a>
 800b062:	2200      	movs	r2, #0
 800b064:	0020      	movs	r0, r4
 800b066:	0029      	movs	r1, r5
 800b068:	4b60      	ldr	r3, [pc, #384]	; (800b1ec <_dtoa_r+0x730>)
 800b06a:	f7f6 ffed 	bl	8002048 <__aeabi_dmul>
 800b06e:	4b5f      	ldr	r3, [pc, #380]	; (800b1ec <_dtoa_r+0x730>)
 800b070:	0004      	movs	r4, r0
 800b072:	000d      	movs	r5, r1
 800b074:	0030      	movs	r0, r6
 800b076:	0039      	movs	r1, r7
 800b078:	2200      	movs	r2, #0
 800b07a:	f7f6 ffe5 	bl	8002048 <__aeabi_dmul>
 800b07e:	9b08      	ldr	r3, [sp, #32]
 800b080:	0006      	movs	r6, r0
 800b082:	000f      	movs	r7, r1
 800b084:	9314      	str	r3, [sp, #80]	; 0x50
 800b086:	e7be      	b.n	800b006 <_dtoa_r+0x54a>
 800b088:	0020      	movs	r0, r4
 800b08a:	0029      	movs	r1, r5
 800b08c:	f7f6 ffdc 	bl	8002048 <__aeabi_dmul>
 800b090:	9a06      	ldr	r2, [sp, #24]
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	4694      	mov	ip, r2
 800b096:	9308      	str	r3, [sp, #32]
 800b098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b09a:	9014      	str	r0, [sp, #80]	; 0x50
 800b09c:	9115      	str	r1, [sp, #84]	; 0x54
 800b09e:	4463      	add	r3, ip
 800b0a0:	9319      	str	r3, [sp, #100]	; 0x64
 800b0a2:	0030      	movs	r0, r6
 800b0a4:	0039      	movs	r1, r7
 800b0a6:	f7f7 fe31 	bl	8002d0c <__aeabi_d2iz>
 800b0aa:	9018      	str	r0, [sp, #96]	; 0x60
 800b0ac:	f7f7 fe64 	bl	8002d78 <__aeabi_i2d>
 800b0b0:	0002      	movs	r2, r0
 800b0b2:	000b      	movs	r3, r1
 800b0b4:	0030      	movs	r0, r6
 800b0b6:	0039      	movs	r1, r7
 800b0b8:	f7f7 fa88 	bl	80025cc <__aeabi_dsub>
 800b0bc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b0be:	9b08      	ldr	r3, [sp, #32]
 800b0c0:	3630      	adds	r6, #48	; 0x30
 800b0c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b0c4:	701e      	strb	r6, [r3, #0]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	0004      	movs	r4, r0
 800b0ca:	000d      	movs	r5, r1
 800b0cc:	9308      	str	r3, [sp, #32]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d12d      	bne.n	800b12e <_dtoa_r+0x672>
 800b0d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b0d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0d6:	9a06      	ldr	r2, [sp, #24]
 800b0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0da:	4694      	mov	ip, r2
 800b0dc:	4463      	add	r3, ip
 800b0de:	2200      	movs	r2, #0
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	4b47      	ldr	r3, [pc, #284]	; (800b200 <_dtoa_r+0x744>)
 800b0e4:	f7f6 f856 	bl	8001194 <__aeabi_dadd>
 800b0e8:	0002      	movs	r2, r0
 800b0ea:	000b      	movs	r3, r1
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	0029      	movs	r1, r5
 800b0f0:	f7f5 f9c4 	bl	800047c <__aeabi_dcmpgt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d000      	beq.n	800b0fa <_dtoa_r+0x63e>
 800b0f8:	e086      	b.n	800b208 <_dtoa_r+0x74c>
 800b0fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0fe:	2000      	movs	r0, #0
 800b100:	493f      	ldr	r1, [pc, #252]	; (800b200 <_dtoa_r+0x744>)
 800b102:	f7f7 fa63 	bl	80025cc <__aeabi_dsub>
 800b106:	0002      	movs	r2, r0
 800b108:	000b      	movs	r3, r1
 800b10a:	0020      	movs	r0, r4
 800b10c:	0029      	movs	r1, r5
 800b10e:	f7f5 f9a1 	bl	8000454 <__aeabi_dcmplt>
 800b112:	2800      	cmp	r0, #0
 800b114:	d100      	bne.n	800b118 <_dtoa_r+0x65c>
 800b116:	e716      	b.n	800af46 <_dtoa_r+0x48a>
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	001a      	movs	r2, r3
 800b11c:	3a01      	subs	r2, #1
 800b11e:	9208      	str	r2, [sp, #32]
 800b120:	7812      	ldrb	r2, [r2, #0]
 800b122:	2a30      	cmp	r2, #48	; 0x30
 800b124:	d0f8      	beq.n	800b118 <_dtoa_r+0x65c>
 800b126:	9308      	str	r3, [sp, #32]
 800b128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	e046      	b.n	800b1bc <_dtoa_r+0x700>
 800b12e:	2200      	movs	r2, #0
 800b130:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <_dtoa_r+0x730>)
 800b132:	f7f6 ff89 	bl	8002048 <__aeabi_dmul>
 800b136:	0006      	movs	r6, r0
 800b138:	000f      	movs	r7, r1
 800b13a:	e7b2      	b.n	800b0a2 <_dtoa_r+0x5e6>
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	9a06      	ldr	r2, [sp, #24]
 800b140:	930a      	str	r3, [sp, #40]	; 0x28
 800b142:	9b07      	ldr	r3, [sp, #28]
 800b144:	9c08      	ldr	r4, [sp, #32]
 800b146:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b148:	3b01      	subs	r3, #1
 800b14a:	189b      	adds	r3, r3, r2
 800b14c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b14e:	0032      	movs	r2, r6
 800b150:	003b      	movs	r3, r7
 800b152:	0020      	movs	r0, r4
 800b154:	0029      	movs	r1, r5
 800b156:	f7f6 fb7d 	bl	8001854 <__aeabi_ddiv>
 800b15a:	f7f7 fdd7 	bl	8002d0c <__aeabi_d2iz>
 800b15e:	9007      	str	r0, [sp, #28]
 800b160:	f7f7 fe0a 	bl	8002d78 <__aeabi_i2d>
 800b164:	0032      	movs	r2, r6
 800b166:	003b      	movs	r3, r7
 800b168:	f7f6 ff6e 	bl	8002048 <__aeabi_dmul>
 800b16c:	0002      	movs	r2, r0
 800b16e:	000b      	movs	r3, r1
 800b170:	0020      	movs	r0, r4
 800b172:	0029      	movs	r1, r5
 800b174:	f7f7 fa2a 	bl	80025cc <__aeabi_dsub>
 800b178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17a:	001a      	movs	r2, r3
 800b17c:	3201      	adds	r2, #1
 800b17e:	920a      	str	r2, [sp, #40]	; 0x28
 800b180:	9208      	str	r2, [sp, #32]
 800b182:	9a07      	ldr	r2, [sp, #28]
 800b184:	3230      	adds	r2, #48	; 0x30
 800b186:	701a      	strb	r2, [r3, #0]
 800b188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d14f      	bne.n	800b22e <_dtoa_r+0x772>
 800b18e:	0002      	movs	r2, r0
 800b190:	000b      	movs	r3, r1
 800b192:	f7f5 ffff 	bl	8001194 <__aeabi_dadd>
 800b196:	0032      	movs	r2, r6
 800b198:	003b      	movs	r3, r7
 800b19a:	0004      	movs	r4, r0
 800b19c:	000d      	movs	r5, r1
 800b19e:	f7f5 f96d 	bl	800047c <__aeabi_dcmpgt>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d12e      	bne.n	800b204 <_dtoa_r+0x748>
 800b1a6:	0032      	movs	r2, r6
 800b1a8:	003b      	movs	r3, r7
 800b1aa:	0020      	movs	r0, r4
 800b1ac:	0029      	movs	r1, r5
 800b1ae:	f7f5 f94b 	bl	8000448 <__aeabi_dcmpeq>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d002      	beq.n	800b1bc <_dtoa_r+0x700>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	07de      	lsls	r6, r3, #31
 800b1ba:	d423      	bmi.n	800b204 <_dtoa_r+0x748>
 800b1bc:	9905      	ldr	r1, [sp, #20]
 800b1be:	9804      	ldr	r0, [sp, #16]
 800b1c0:	f000 fbd6 	bl	800b970 <_Bfree>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9a08      	ldr	r2, [sp, #32]
 800b1c8:	7013      	strb	r3, [r2, #0]
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d100      	bne.n	800b1da <_dtoa_r+0x71e>
 800b1d8:	e4ba      	b.n	800ab50 <_dtoa_r+0x94>
 800b1da:	9a08      	ldr	r2, [sp, #32]
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e4b7      	b.n	800ab50 <_dtoa_r+0x94>
 800b1e0:	0800fcd0 	.word	0x0800fcd0
 800b1e4:	0800fca8 	.word	0x0800fca8
 800b1e8:	3ff00000 	.word	0x3ff00000
 800b1ec:	40240000 	.word	0x40240000
 800b1f0:	401c0000 	.word	0x401c0000
 800b1f4:	fcc00000 	.word	0xfcc00000
 800b1f8:	40140000 	.word	0x40140000
 800b1fc:	7cc00000 	.word	0x7cc00000
 800b200:	3fe00000 	.word	0x3fe00000
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	930e      	str	r3, [sp, #56]	; 0x38
 800b208:	9b08      	ldr	r3, [sp, #32]
 800b20a:	9308      	str	r3, [sp, #32]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	2a39      	cmp	r2, #57	; 0x39
 800b212:	d108      	bne.n	800b226 <_dtoa_r+0x76a>
 800b214:	9a06      	ldr	r2, [sp, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d1f7      	bne.n	800b20a <_dtoa_r+0x74e>
 800b21a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b21c:	9906      	ldr	r1, [sp, #24]
 800b21e:	3201      	adds	r2, #1
 800b220:	920e      	str	r2, [sp, #56]	; 0x38
 800b222:	2230      	movs	r2, #48	; 0x30
 800b224:	700a      	strb	r2, [r1, #0]
 800b226:	781a      	ldrb	r2, [r3, #0]
 800b228:	3201      	adds	r2, #1
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	e77c      	b.n	800b128 <_dtoa_r+0x66c>
 800b22e:	2200      	movs	r2, #0
 800b230:	4ba9      	ldr	r3, [pc, #676]	; (800b4d8 <_dtoa_r+0xa1c>)
 800b232:	f7f6 ff09 	bl	8002048 <__aeabi_dmul>
 800b236:	2200      	movs	r2, #0
 800b238:	2300      	movs	r3, #0
 800b23a:	0004      	movs	r4, r0
 800b23c:	000d      	movs	r5, r1
 800b23e:	f7f5 f903 	bl	8000448 <__aeabi_dcmpeq>
 800b242:	2800      	cmp	r0, #0
 800b244:	d100      	bne.n	800b248 <_dtoa_r+0x78c>
 800b246:	e782      	b.n	800b14e <_dtoa_r+0x692>
 800b248:	e7b8      	b.n	800b1bc <_dtoa_r+0x700>
 800b24a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b24c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b24e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b250:	2f00      	cmp	r7, #0
 800b252:	d012      	beq.n	800b27a <_dtoa_r+0x7be>
 800b254:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b256:	2a01      	cmp	r2, #1
 800b258:	dc6e      	bgt.n	800b338 <_dtoa_r+0x87c>
 800b25a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	d065      	beq.n	800b32c <_dtoa_r+0x870>
 800b260:	4a9e      	ldr	r2, [pc, #632]	; (800b4dc <_dtoa_r+0xa20>)
 800b262:	189b      	adds	r3, r3, r2
 800b264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b266:	2101      	movs	r1, #1
 800b268:	18d2      	adds	r2, r2, r3
 800b26a:	920a      	str	r2, [sp, #40]	; 0x28
 800b26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b26e:	9804      	ldr	r0, [sp, #16]
 800b270:	18d3      	adds	r3, r2, r3
 800b272:	930c      	str	r3, [sp, #48]	; 0x30
 800b274:	f000 fc2c 	bl	800bad0 <__i2b>
 800b278:	0007      	movs	r7, r0
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	d00e      	beq.n	800b29c <_dtoa_r+0x7e0>
 800b27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b280:	2b00      	cmp	r3, #0
 800b282:	dd0b      	ble.n	800b29c <_dtoa_r+0x7e0>
 800b284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b286:	0023      	movs	r3, r4
 800b288:	4294      	cmp	r4, r2
 800b28a:	dd00      	ble.n	800b28e <_dtoa_r+0x7d2>
 800b28c:	0013      	movs	r3, r2
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	1ae4      	subs	r4, r4, r3
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	920a      	str	r2, [sp, #40]	; 0x28
 800b296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	930c      	str	r3, [sp, #48]	; 0x30
 800b29c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d01e      	beq.n	800b2e0 <_dtoa_r+0x824>
 800b2a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d05c      	beq.n	800b362 <_dtoa_r+0x8a6>
 800b2a8:	2d00      	cmp	r5, #0
 800b2aa:	dd10      	ble.n	800b2ce <_dtoa_r+0x812>
 800b2ac:	0039      	movs	r1, r7
 800b2ae:	002a      	movs	r2, r5
 800b2b0:	9804      	ldr	r0, [sp, #16]
 800b2b2:	f000 fcd5 	bl	800bc60 <__pow5mult>
 800b2b6:	9a05      	ldr	r2, [sp, #20]
 800b2b8:	0001      	movs	r1, r0
 800b2ba:	0007      	movs	r7, r0
 800b2bc:	9804      	ldr	r0, [sp, #16]
 800b2be:	f000 fc1f 	bl	800bb00 <__multiply>
 800b2c2:	0006      	movs	r6, r0
 800b2c4:	9905      	ldr	r1, [sp, #20]
 800b2c6:	9804      	ldr	r0, [sp, #16]
 800b2c8:	f000 fb52 	bl	800b970 <_Bfree>
 800b2cc:	9605      	str	r6, [sp, #20]
 800b2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d0:	1b5a      	subs	r2, r3, r5
 800b2d2:	42ab      	cmp	r3, r5
 800b2d4:	d004      	beq.n	800b2e0 <_dtoa_r+0x824>
 800b2d6:	9905      	ldr	r1, [sp, #20]
 800b2d8:	9804      	ldr	r0, [sp, #16]
 800b2da:	f000 fcc1 	bl	800bc60 <__pow5mult>
 800b2de:	9005      	str	r0, [sp, #20]
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	9804      	ldr	r0, [sp, #16]
 800b2e4:	f000 fbf4 	bl	800bad0 <__i2b>
 800b2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2ea:	0006      	movs	r6, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd3a      	ble.n	800b366 <_dtoa_r+0x8aa>
 800b2f0:	001a      	movs	r2, r3
 800b2f2:	0001      	movs	r1, r0
 800b2f4:	9804      	ldr	r0, [sp, #16]
 800b2f6:	f000 fcb3 	bl	800bc60 <__pow5mult>
 800b2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2fc:	0006      	movs	r6, r0
 800b2fe:	2500      	movs	r5, #0
 800b300:	2b01      	cmp	r3, #1
 800b302:	dc38      	bgt.n	800b376 <_dtoa_r+0x8ba>
 800b304:	2500      	movs	r5, #0
 800b306:	9b08      	ldr	r3, [sp, #32]
 800b308:	42ab      	cmp	r3, r5
 800b30a:	d130      	bne.n	800b36e <_dtoa_r+0x8b2>
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	031b      	lsls	r3, r3, #12
 800b310:	42ab      	cmp	r3, r5
 800b312:	d12c      	bne.n	800b36e <_dtoa_r+0x8b2>
 800b314:	4b72      	ldr	r3, [pc, #456]	; (800b4e0 <_dtoa_r+0xa24>)
 800b316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b318:	4213      	tst	r3, r2
 800b31a:	d028      	beq.n	800b36e <_dtoa_r+0x8b2>
 800b31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b31e:	3501      	adds	r5, #1
 800b320:	3301      	adds	r3, #1
 800b322:	930a      	str	r3, [sp, #40]	; 0x28
 800b324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b326:	3301      	adds	r3, #1
 800b328:	930c      	str	r3, [sp, #48]	; 0x30
 800b32a:	e020      	b.n	800b36e <_dtoa_r+0x8b2>
 800b32c:	2336      	movs	r3, #54	; 0x36
 800b32e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b330:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b332:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b334:	1a9b      	subs	r3, r3, r2
 800b336:	e795      	b.n	800b264 <_dtoa_r+0x7a8>
 800b338:	9b07      	ldr	r3, [sp, #28]
 800b33a:	1e5d      	subs	r5, r3, #1
 800b33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33e:	42ab      	cmp	r3, r5
 800b340:	db07      	blt.n	800b352 <_dtoa_r+0x896>
 800b342:	1b5d      	subs	r5, r3, r5
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da8b      	bge.n	800b264 <_dtoa_r+0x7a8>
 800b34c:	1ae4      	subs	r4, r4, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	e788      	b.n	800b264 <_dtoa_r+0x7a8>
 800b352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b354:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b356:	1aeb      	subs	r3, r5, r3
 800b358:	18d3      	adds	r3, r2, r3
 800b35a:	950d      	str	r5, [sp, #52]	; 0x34
 800b35c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b35e:	2500      	movs	r5, #0
 800b360:	e7f0      	b.n	800b344 <_dtoa_r+0x888>
 800b362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b364:	e7b7      	b.n	800b2d6 <_dtoa_r+0x81a>
 800b366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b368:	2500      	movs	r5, #0
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	ddca      	ble.n	800b304 <_dtoa_r+0x848>
 800b36e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b370:	2001      	movs	r0, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d008      	beq.n	800b388 <_dtoa_r+0x8cc>
 800b376:	6933      	ldr	r3, [r6, #16]
 800b378:	3303      	adds	r3, #3
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	18f3      	adds	r3, r6, r3
 800b37e:	6858      	ldr	r0, [r3, #4]
 800b380:	f000 fb5e 	bl	800ba40 <__hi0bits>
 800b384:	2320      	movs	r3, #32
 800b386:	1a18      	subs	r0, r3, r0
 800b388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b38a:	1818      	adds	r0, r3, r0
 800b38c:	0002      	movs	r2, r0
 800b38e:	231f      	movs	r3, #31
 800b390:	401a      	ands	r2, r3
 800b392:	4218      	tst	r0, r3
 800b394:	d047      	beq.n	800b426 <_dtoa_r+0x96a>
 800b396:	3301      	adds	r3, #1
 800b398:	1a9b      	subs	r3, r3, r2
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	dd3f      	ble.n	800b41e <_dtoa_r+0x962>
 800b39e:	231c      	movs	r3, #28
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3a4:	18e4      	adds	r4, r4, r3
 800b3a6:	18d2      	adds	r2, r2, r3
 800b3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ac:	18d3      	adds	r3, r2, r3
 800b3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dd05      	ble.n	800b3c2 <_dtoa_r+0x906>
 800b3b6:	001a      	movs	r2, r3
 800b3b8:	9905      	ldr	r1, [sp, #20]
 800b3ba:	9804      	ldr	r0, [sp, #16]
 800b3bc:	f000 fcac 	bl	800bd18 <__lshift>
 800b3c0:	9005      	str	r0, [sp, #20]
 800b3c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dd05      	ble.n	800b3d4 <_dtoa_r+0x918>
 800b3c8:	0031      	movs	r1, r6
 800b3ca:	001a      	movs	r2, r3
 800b3cc:	9804      	ldr	r0, [sp, #16]
 800b3ce:	f000 fca3 	bl	800bd18 <__lshift>
 800b3d2:	0006      	movs	r6, r0
 800b3d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d027      	beq.n	800b42a <_dtoa_r+0x96e>
 800b3da:	0031      	movs	r1, r6
 800b3dc:	9805      	ldr	r0, [sp, #20]
 800b3de:	f000 fd09 	bl	800bdf4 <__mcmp>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	da21      	bge.n	800b42a <_dtoa_r+0x96e>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	220a      	movs	r2, #10
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	9905      	ldr	r1, [sp, #20]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9804      	ldr	r0, [sp, #16]
 800b3f4:	f000 fae0 	bl	800b9b8 <__multadd>
 800b3f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3fa:	9005      	str	r0, [sp, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d100      	bne.n	800b402 <_dtoa_r+0x946>
 800b400:	e15d      	b.n	800b6be <_dtoa_r+0xc02>
 800b402:	2300      	movs	r3, #0
 800b404:	0039      	movs	r1, r7
 800b406:	220a      	movs	r2, #10
 800b408:	9804      	ldr	r0, [sp, #16]
 800b40a:	f000 fad5 	bl	800b9b8 <__multadd>
 800b40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b410:	0007      	movs	r7, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	dc49      	bgt.n	800b4aa <_dtoa_r+0x9ee>
 800b416:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b418:	2b02      	cmp	r3, #2
 800b41a:	dc0e      	bgt.n	800b43a <_dtoa_r+0x97e>
 800b41c:	e045      	b.n	800b4aa <_dtoa_r+0x9ee>
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d0c6      	beq.n	800b3b0 <_dtoa_r+0x8f4>
 800b422:	331c      	adds	r3, #28
 800b424:	e7bd      	b.n	800b3a2 <_dtoa_r+0x8e6>
 800b426:	0013      	movs	r3, r2
 800b428:	e7fb      	b.n	800b422 <_dtoa_r+0x966>
 800b42a:	9b07      	ldr	r3, [sp, #28]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dc36      	bgt.n	800b49e <_dtoa_r+0x9e2>
 800b430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b432:	2b02      	cmp	r3, #2
 800b434:	dd33      	ble.n	800b49e <_dtoa_r+0x9e2>
 800b436:	9b07      	ldr	r3, [sp, #28]
 800b438:	930b      	str	r3, [sp, #44]	; 0x2c
 800b43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10c      	bne.n	800b45a <_dtoa_r+0x99e>
 800b440:	0031      	movs	r1, r6
 800b442:	2205      	movs	r2, #5
 800b444:	9804      	ldr	r0, [sp, #16]
 800b446:	f000 fab7 	bl	800b9b8 <__multadd>
 800b44a:	0006      	movs	r6, r0
 800b44c:	0001      	movs	r1, r0
 800b44e:	9805      	ldr	r0, [sp, #20]
 800b450:	f000 fcd0 	bl	800bdf4 <__mcmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	dd00      	ble.n	800b45a <_dtoa_r+0x99e>
 800b458:	e59f      	b.n	800af9a <_dtoa_r+0x4de>
 800b45a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b45c:	43db      	mvns	r3, r3
 800b45e:	9303      	str	r3, [sp, #12]
 800b460:	9b06      	ldr	r3, [sp, #24]
 800b462:	9308      	str	r3, [sp, #32]
 800b464:	2500      	movs	r5, #0
 800b466:	0031      	movs	r1, r6
 800b468:	9804      	ldr	r0, [sp, #16]
 800b46a:	f000 fa81 	bl	800b970 <_Bfree>
 800b46e:	2f00      	cmp	r7, #0
 800b470:	d100      	bne.n	800b474 <_dtoa_r+0x9b8>
 800b472:	e6a3      	b.n	800b1bc <_dtoa_r+0x700>
 800b474:	2d00      	cmp	r5, #0
 800b476:	d005      	beq.n	800b484 <_dtoa_r+0x9c8>
 800b478:	42bd      	cmp	r5, r7
 800b47a:	d003      	beq.n	800b484 <_dtoa_r+0x9c8>
 800b47c:	0029      	movs	r1, r5
 800b47e:	9804      	ldr	r0, [sp, #16]
 800b480:	f000 fa76 	bl	800b970 <_Bfree>
 800b484:	0039      	movs	r1, r7
 800b486:	9804      	ldr	r0, [sp, #16]
 800b488:	f000 fa72 	bl	800b970 <_Bfree>
 800b48c:	e696      	b.n	800b1bc <_dtoa_r+0x700>
 800b48e:	2600      	movs	r6, #0
 800b490:	0037      	movs	r7, r6
 800b492:	e7e2      	b.n	800b45a <_dtoa_r+0x99e>
 800b494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b496:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b498:	9303      	str	r3, [sp, #12]
 800b49a:	0037      	movs	r7, r6
 800b49c:	e57d      	b.n	800af9a <_dtoa_r+0x4de>
 800b49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d100      	bne.n	800b4a6 <_dtoa_r+0x9ea>
 800b4a4:	e0c3      	b.n	800b62e <_dtoa_r+0xb72>
 800b4a6:	9b07      	ldr	r3, [sp, #28]
 800b4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	dd05      	ble.n	800b4ba <_dtoa_r+0x9fe>
 800b4ae:	0039      	movs	r1, r7
 800b4b0:	0022      	movs	r2, r4
 800b4b2:	9804      	ldr	r0, [sp, #16]
 800b4b4:	f000 fc30 	bl	800bd18 <__lshift>
 800b4b8:	0007      	movs	r7, r0
 800b4ba:	0038      	movs	r0, r7
 800b4bc:	2d00      	cmp	r5, #0
 800b4be:	d024      	beq.n	800b50a <_dtoa_r+0xa4e>
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	9804      	ldr	r0, [sp, #16]
 800b4c4:	f000 fa10 	bl	800b8e8 <_Balloc>
 800b4c8:	1e04      	subs	r4, r0, #0
 800b4ca:	d111      	bne.n	800b4f0 <_dtoa_r+0xa34>
 800b4cc:	0022      	movs	r2, r4
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <_dtoa_r+0xa28>)
 800b4d0:	4805      	ldr	r0, [pc, #20]	; (800b4e8 <_dtoa_r+0xa2c>)
 800b4d2:	4906      	ldr	r1, [pc, #24]	; (800b4ec <_dtoa_r+0xa30>)
 800b4d4:	f7ff fb07 	bl	800aae6 <_dtoa_r+0x2a>
 800b4d8:	40240000 	.word	0x40240000
 800b4dc:	00000433 	.word	0x00000433
 800b4e0:	7ff00000 	.word	0x7ff00000
 800b4e4:	0800fc38 	.word	0x0800fc38
 800b4e8:	0800fbe0 	.word	0x0800fbe0
 800b4ec:	000002ef 	.word	0x000002ef
 800b4f0:	0039      	movs	r1, r7
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	310c      	adds	r1, #12
 800b4f6:	3202      	adds	r2, #2
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	300c      	adds	r0, #12
 800b4fc:	f7ff fa46 	bl	800a98c <memcpy>
 800b500:	2201      	movs	r2, #1
 800b502:	0021      	movs	r1, r4
 800b504:	9804      	ldr	r0, [sp, #16]
 800b506:	f000 fc07 	bl	800bd18 <__lshift>
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b50e:	9307      	str	r3, [sp, #28]
 800b510:	3b01      	subs	r3, #1
 800b512:	189b      	adds	r3, r3, r2
 800b514:	2201      	movs	r2, #1
 800b516:	003d      	movs	r5, r7
 800b518:	0007      	movs	r7, r0
 800b51a:	930e      	str	r3, [sp, #56]	; 0x38
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	4013      	ands	r3, r2
 800b520:	930d      	str	r3, [sp, #52]	; 0x34
 800b522:	0031      	movs	r1, r6
 800b524:	9805      	ldr	r0, [sp, #20]
 800b526:	f7ff fa3a 	bl	800a99e <quorem>
 800b52a:	0029      	movs	r1, r5
 800b52c:	0004      	movs	r4, r0
 800b52e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b530:	9805      	ldr	r0, [sp, #20]
 800b532:	f000 fc5f 	bl	800bdf4 <__mcmp>
 800b536:	003a      	movs	r2, r7
 800b538:	900c      	str	r0, [sp, #48]	; 0x30
 800b53a:	0031      	movs	r1, r6
 800b53c:	9804      	ldr	r0, [sp, #16]
 800b53e:	f000 fc75 	bl	800be2c <__mdiff>
 800b542:	2201      	movs	r2, #1
 800b544:	68c3      	ldr	r3, [r0, #12]
 800b546:	3430      	adds	r4, #48	; 0x30
 800b548:	9008      	str	r0, [sp, #32]
 800b54a:	920a      	str	r2, [sp, #40]	; 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d104      	bne.n	800b55a <_dtoa_r+0xa9e>
 800b550:	0001      	movs	r1, r0
 800b552:	9805      	ldr	r0, [sp, #20]
 800b554:	f000 fc4e 	bl	800bdf4 <__mcmp>
 800b558:	900a      	str	r0, [sp, #40]	; 0x28
 800b55a:	9908      	ldr	r1, [sp, #32]
 800b55c:	9804      	ldr	r0, [sp, #16]
 800b55e:	f000 fa07 	bl	800b970 <_Bfree>
 800b562:	9b07      	ldr	r3, [sp, #28]
 800b564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b566:	3301      	adds	r3, #1
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b56c:	4313      	orrs	r3, r2
 800b56e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b570:	4313      	orrs	r3, r2
 800b572:	d109      	bne.n	800b588 <_dtoa_r+0xacc>
 800b574:	2c39      	cmp	r4, #57	; 0x39
 800b576:	d022      	beq.n	800b5be <_dtoa_r+0xb02>
 800b578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dd01      	ble.n	800b582 <_dtoa_r+0xac6>
 800b57e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b580:	3431      	adds	r4, #49	; 0x31
 800b582:	9b07      	ldr	r3, [sp, #28]
 800b584:	701c      	strb	r4, [r3, #0]
 800b586:	e76e      	b.n	800b466 <_dtoa_r+0x9aa>
 800b588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	db04      	blt.n	800b598 <_dtoa_r+0xadc>
 800b58e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b590:	4313      	orrs	r3, r2
 800b592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b594:	4313      	orrs	r3, r2
 800b596:	d11e      	bne.n	800b5d6 <_dtoa_r+0xb1a>
 800b598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	ddf1      	ble.n	800b582 <_dtoa_r+0xac6>
 800b59e:	9905      	ldr	r1, [sp, #20]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	9804      	ldr	r0, [sp, #16]
 800b5a4:	f000 fbb8 	bl	800bd18 <__lshift>
 800b5a8:	0031      	movs	r1, r6
 800b5aa:	9005      	str	r0, [sp, #20]
 800b5ac:	f000 fc22 	bl	800bdf4 <__mcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dc02      	bgt.n	800b5ba <_dtoa_r+0xafe>
 800b5b4:	d1e5      	bne.n	800b582 <_dtoa_r+0xac6>
 800b5b6:	07e3      	lsls	r3, r4, #31
 800b5b8:	d5e3      	bpl.n	800b582 <_dtoa_r+0xac6>
 800b5ba:	2c39      	cmp	r4, #57	; 0x39
 800b5bc:	d1df      	bne.n	800b57e <_dtoa_r+0xac2>
 800b5be:	2339      	movs	r3, #57	; 0x39
 800b5c0:	9a07      	ldr	r2, [sp, #28]
 800b5c2:	7013      	strb	r3, [r2, #0]
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	9308      	str	r3, [sp, #32]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	781a      	ldrb	r2, [r3, #0]
 800b5cc:	2a39      	cmp	r2, #57	; 0x39
 800b5ce:	d063      	beq.n	800b698 <_dtoa_r+0xbdc>
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	e747      	b.n	800b466 <_dtoa_r+0x9aa>
 800b5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dd03      	ble.n	800b5e4 <_dtoa_r+0xb28>
 800b5dc:	2c39      	cmp	r4, #57	; 0x39
 800b5de:	d0ee      	beq.n	800b5be <_dtoa_r+0xb02>
 800b5e0:	3401      	adds	r4, #1
 800b5e2:	e7ce      	b.n	800b582 <_dtoa_r+0xac6>
 800b5e4:	9b07      	ldr	r3, [sp, #28]
 800b5e6:	9a07      	ldr	r2, [sp, #28]
 800b5e8:	701c      	strb	r4, [r3, #0]
 800b5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d03e      	beq.n	800b66e <_dtoa_r+0xbb2>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	220a      	movs	r2, #10
 800b5f4:	9905      	ldr	r1, [sp, #20]
 800b5f6:	9804      	ldr	r0, [sp, #16]
 800b5f8:	f000 f9de 	bl	800b9b8 <__multadd>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9005      	str	r0, [sp, #20]
 800b600:	220a      	movs	r2, #10
 800b602:	0029      	movs	r1, r5
 800b604:	9804      	ldr	r0, [sp, #16]
 800b606:	42bd      	cmp	r5, r7
 800b608:	d106      	bne.n	800b618 <_dtoa_r+0xb5c>
 800b60a:	f000 f9d5 	bl	800b9b8 <__multadd>
 800b60e:	0005      	movs	r5, r0
 800b610:	0007      	movs	r7, r0
 800b612:	9b08      	ldr	r3, [sp, #32]
 800b614:	9307      	str	r3, [sp, #28]
 800b616:	e784      	b.n	800b522 <_dtoa_r+0xa66>
 800b618:	f000 f9ce 	bl	800b9b8 <__multadd>
 800b61c:	0039      	movs	r1, r7
 800b61e:	0005      	movs	r5, r0
 800b620:	2300      	movs	r3, #0
 800b622:	220a      	movs	r2, #10
 800b624:	9804      	ldr	r0, [sp, #16]
 800b626:	f000 f9c7 	bl	800b9b8 <__multadd>
 800b62a:	0007      	movs	r7, r0
 800b62c:	e7f1      	b.n	800b612 <_dtoa_r+0xb56>
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	930b      	str	r3, [sp, #44]	; 0x2c
 800b632:	2500      	movs	r5, #0
 800b634:	0031      	movs	r1, r6
 800b636:	9805      	ldr	r0, [sp, #20]
 800b638:	f7ff f9b1 	bl	800a99e <quorem>
 800b63c:	9b06      	ldr	r3, [sp, #24]
 800b63e:	3030      	adds	r0, #48	; 0x30
 800b640:	5558      	strb	r0, [r3, r5]
 800b642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b644:	3501      	adds	r5, #1
 800b646:	0004      	movs	r4, r0
 800b648:	42ab      	cmp	r3, r5
 800b64a:	dd07      	ble.n	800b65c <_dtoa_r+0xba0>
 800b64c:	2300      	movs	r3, #0
 800b64e:	220a      	movs	r2, #10
 800b650:	9905      	ldr	r1, [sp, #20]
 800b652:	9804      	ldr	r0, [sp, #16]
 800b654:	f000 f9b0 	bl	800b9b8 <__multadd>
 800b658:	9005      	str	r0, [sp, #20]
 800b65a:	e7eb      	b.n	800b634 <_dtoa_r+0xb78>
 800b65c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b65e:	2301      	movs	r3, #1
 800b660:	2a00      	cmp	r2, #0
 800b662:	dd00      	ble.n	800b666 <_dtoa_r+0xbaa>
 800b664:	0013      	movs	r3, r2
 800b666:	2500      	movs	r5, #0
 800b668:	9a06      	ldr	r2, [sp, #24]
 800b66a:	18d3      	adds	r3, r2, r3
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	9905      	ldr	r1, [sp, #20]
 800b670:	2201      	movs	r2, #1
 800b672:	9804      	ldr	r0, [sp, #16]
 800b674:	f000 fb50 	bl	800bd18 <__lshift>
 800b678:	0031      	movs	r1, r6
 800b67a:	9005      	str	r0, [sp, #20]
 800b67c:	f000 fbba 	bl	800bdf4 <__mcmp>
 800b680:	2800      	cmp	r0, #0
 800b682:	dc9f      	bgt.n	800b5c4 <_dtoa_r+0xb08>
 800b684:	d101      	bne.n	800b68a <_dtoa_r+0xbce>
 800b686:	07e4      	lsls	r4, r4, #31
 800b688:	d49c      	bmi.n	800b5c4 <_dtoa_r+0xb08>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	9308      	str	r3, [sp, #32]
 800b68e:	3b01      	subs	r3, #1
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	2a30      	cmp	r2, #48	; 0x30
 800b694:	d0fa      	beq.n	800b68c <_dtoa_r+0xbd0>
 800b696:	e6e6      	b.n	800b466 <_dtoa_r+0x9aa>
 800b698:	9a06      	ldr	r2, [sp, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d193      	bne.n	800b5c6 <_dtoa_r+0xb0a>
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	2331      	movs	r3, #49	; 0x31
 800b6a6:	7013      	strb	r3, [r2, #0]
 800b6a8:	e6dd      	b.n	800b466 <_dtoa_r+0x9aa>
 800b6aa:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <_dtoa_r+0xc14>)
 800b6ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6ae:	9306      	str	r3, [sp, #24]
 800b6b0:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <_dtoa_r+0xc18>)
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	d001      	beq.n	800b6ba <_dtoa_r+0xbfe>
 800b6b6:	f7ff fa49 	bl	800ab4c <_dtoa_r+0x90>
 800b6ba:	f7ff fa49 	bl	800ab50 <_dtoa_r+0x94>
 800b6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	dcb6      	bgt.n	800b632 <_dtoa_r+0xb76>
 800b6c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	dd00      	ble.n	800b6cc <_dtoa_r+0xc10>
 800b6ca:	e6b6      	b.n	800b43a <_dtoa_r+0x97e>
 800b6cc:	e7b1      	b.n	800b632 <_dtoa_r+0xb76>
 800b6ce:	46c0      	nop			; (mov r8, r8)
 800b6d0:	0800fbbc 	.word	0x0800fbbc
 800b6d4:	0800fbc4 	.word	0x0800fbc4

0800b6d8 <_free_r>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	0005      	movs	r5, r0
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	d010      	beq.n	800b702 <_free_r+0x2a>
 800b6e0:	1f0c      	subs	r4, r1, #4
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	da00      	bge.n	800b6ea <_free_r+0x12>
 800b6e8:	18e4      	adds	r4, r4, r3
 800b6ea:	0028      	movs	r0, r5
 800b6ec:	f000 f8ec 	bl	800b8c8 <__malloc_lock>
 800b6f0:	4a1d      	ldr	r2, [pc, #116]	; (800b768 <_free_r+0x90>)
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d105      	bne.n	800b704 <_free_r+0x2c>
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	6014      	str	r4, [r2, #0]
 800b6fc:	0028      	movs	r0, r5
 800b6fe:	f000 f8eb 	bl	800b8d8 <__malloc_unlock>
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	42a3      	cmp	r3, r4
 800b706:	d908      	bls.n	800b71a <_free_r+0x42>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	1821      	adds	r1, r4, r0
 800b70c:	428b      	cmp	r3, r1
 800b70e:	d1f3      	bne.n	800b6f8 <_free_r+0x20>
 800b710:	6819      	ldr	r1, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	1809      	adds	r1, r1, r0
 800b716:	6021      	str	r1, [r4, #0]
 800b718:	e7ee      	b.n	800b6f8 <_free_r+0x20>
 800b71a:	001a      	movs	r2, r3
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <_free_r+0x4e>
 800b722:	42a3      	cmp	r3, r4
 800b724:	d9f9      	bls.n	800b71a <_free_r+0x42>
 800b726:	6811      	ldr	r1, [r2, #0]
 800b728:	1850      	adds	r0, r2, r1
 800b72a:	42a0      	cmp	r0, r4
 800b72c:	d10b      	bne.n	800b746 <_free_r+0x6e>
 800b72e:	6820      	ldr	r0, [r4, #0]
 800b730:	1809      	adds	r1, r1, r0
 800b732:	1850      	adds	r0, r2, r1
 800b734:	6011      	str	r1, [r2, #0]
 800b736:	4283      	cmp	r3, r0
 800b738:	d1e0      	bne.n	800b6fc <_free_r+0x24>
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	1841      	adds	r1, r0, r1
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	6053      	str	r3, [r2, #4]
 800b744:	e7da      	b.n	800b6fc <_free_r+0x24>
 800b746:	42a0      	cmp	r0, r4
 800b748:	d902      	bls.n	800b750 <_free_r+0x78>
 800b74a:	230c      	movs	r3, #12
 800b74c:	602b      	str	r3, [r5, #0]
 800b74e:	e7d5      	b.n	800b6fc <_free_r+0x24>
 800b750:	6820      	ldr	r0, [r4, #0]
 800b752:	1821      	adds	r1, r4, r0
 800b754:	428b      	cmp	r3, r1
 800b756:	d103      	bne.n	800b760 <_free_r+0x88>
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	1809      	adds	r1, r1, r0
 800b75e:	6021      	str	r1, [r4, #0]
 800b760:	6063      	str	r3, [r4, #4]
 800b762:	6054      	str	r4, [r2, #4]
 800b764:	e7ca      	b.n	800b6fc <_free_r+0x24>
 800b766:	46c0      	nop			; (mov r8, r8)
 800b768:	200009bc 	.word	0x200009bc

0800b76c <malloc>:
 800b76c:	b510      	push	{r4, lr}
 800b76e:	4b03      	ldr	r3, [pc, #12]	; (800b77c <malloc+0x10>)
 800b770:	0001      	movs	r1, r0
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	f000 f826 	bl	800b7c4 <_malloc_r>
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	46c0      	nop			; (mov r8, r8)
 800b77c:	2000009c 	.word	0x2000009c

0800b780 <sbrk_aligned>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	4e0f      	ldr	r6, [pc, #60]	; (800b7c0 <sbrk_aligned+0x40>)
 800b784:	000d      	movs	r5, r1
 800b786:	6831      	ldr	r1, [r6, #0]
 800b788:	0004      	movs	r4, r0
 800b78a:	2900      	cmp	r1, #0
 800b78c:	d102      	bne.n	800b794 <sbrk_aligned+0x14>
 800b78e:	f000 fe5d 	bl	800c44c <_sbrk_r>
 800b792:	6030      	str	r0, [r6, #0]
 800b794:	0029      	movs	r1, r5
 800b796:	0020      	movs	r0, r4
 800b798:	f000 fe58 	bl	800c44c <_sbrk_r>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d00a      	beq.n	800b7b6 <sbrk_aligned+0x36>
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	1cc5      	adds	r5, r0, #3
 800b7a4:	439d      	bics	r5, r3
 800b7a6:	42a8      	cmp	r0, r5
 800b7a8:	d007      	beq.n	800b7ba <sbrk_aligned+0x3a>
 800b7aa:	1a29      	subs	r1, r5, r0
 800b7ac:	0020      	movs	r0, r4
 800b7ae:	f000 fe4d 	bl	800c44c <_sbrk_r>
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d101      	bne.n	800b7ba <sbrk_aligned+0x3a>
 800b7b6:	2501      	movs	r5, #1
 800b7b8:	426d      	negs	r5, r5
 800b7ba:	0028      	movs	r0, r5
 800b7bc:	bd70      	pop	{r4, r5, r6, pc}
 800b7be:	46c0      	nop			; (mov r8, r8)
 800b7c0:	200009c0 	.word	0x200009c0

0800b7c4 <_malloc_r>:
 800b7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	1ccb      	adds	r3, r1, #3
 800b7ca:	4393      	bics	r3, r2
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	0006      	movs	r6, r0
 800b7d0:	001f      	movs	r7, r3
 800b7d2:	2b0c      	cmp	r3, #12
 800b7d4:	d238      	bcs.n	800b848 <_malloc_r+0x84>
 800b7d6:	270c      	movs	r7, #12
 800b7d8:	42b9      	cmp	r1, r7
 800b7da:	d837      	bhi.n	800b84c <_malloc_r+0x88>
 800b7dc:	0030      	movs	r0, r6
 800b7de:	f000 f873 	bl	800b8c8 <__malloc_lock>
 800b7e2:	4b38      	ldr	r3, [pc, #224]	; (800b8c4 <_malloc_r+0x100>)
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	001c      	movs	r4, r3
 800b7ea:	2c00      	cmp	r4, #0
 800b7ec:	d133      	bne.n	800b856 <_malloc_r+0x92>
 800b7ee:	0039      	movs	r1, r7
 800b7f0:	0030      	movs	r0, r6
 800b7f2:	f7ff ffc5 	bl	800b780 <sbrk_aligned>
 800b7f6:	0004      	movs	r4, r0
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	d15e      	bne.n	800b8ba <_malloc_r+0xf6>
 800b7fc:	9b00      	ldr	r3, [sp, #0]
 800b7fe:	681c      	ldr	r4, [r3, #0]
 800b800:	0025      	movs	r5, r4
 800b802:	2d00      	cmp	r5, #0
 800b804:	d14e      	bne.n	800b8a4 <_malloc_r+0xe0>
 800b806:	2c00      	cmp	r4, #0
 800b808:	d051      	beq.n	800b8ae <_malloc_r+0xea>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	0029      	movs	r1, r5
 800b80e:	18e3      	adds	r3, r4, r3
 800b810:	0030      	movs	r0, r6
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	f000 fe1a 	bl	800c44c <_sbrk_r>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	4283      	cmp	r3, r0
 800b81c:	d147      	bne.n	800b8ae <_malloc_r+0xea>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	0030      	movs	r0, r6
 800b822:	1aff      	subs	r7, r7, r3
 800b824:	0039      	movs	r1, r7
 800b826:	f7ff ffab 	bl	800b780 <sbrk_aligned>
 800b82a:	3001      	adds	r0, #1
 800b82c:	d03f      	beq.n	800b8ae <_malloc_r+0xea>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	19db      	adds	r3, r3, r7
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d040      	beq.n	800b8be <_malloc_r+0xfa>
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	42a2      	cmp	r2, r4
 800b840:	d133      	bne.n	800b8aa <_malloc_r+0xe6>
 800b842:	2200      	movs	r2, #0
 800b844:	605a      	str	r2, [r3, #4]
 800b846:	e014      	b.n	800b872 <_malloc_r+0xae>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	dac5      	bge.n	800b7d8 <_malloc_r+0x14>
 800b84c:	230c      	movs	r3, #12
 800b84e:	2500      	movs	r5, #0
 800b850:	6033      	str	r3, [r6, #0]
 800b852:	0028      	movs	r0, r5
 800b854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b856:	6821      	ldr	r1, [r4, #0]
 800b858:	1bc9      	subs	r1, r1, r7
 800b85a:	d420      	bmi.n	800b89e <_malloc_r+0xda>
 800b85c:	290b      	cmp	r1, #11
 800b85e:	d918      	bls.n	800b892 <_malloc_r+0xce>
 800b860:	19e2      	adds	r2, r4, r7
 800b862:	6027      	str	r7, [r4, #0]
 800b864:	42a3      	cmp	r3, r4
 800b866:	d112      	bne.n	800b88e <_malloc_r+0xca>
 800b868:	9b00      	ldr	r3, [sp, #0]
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	6011      	str	r1, [r2, #0]
 800b870:	6053      	str	r3, [r2, #4]
 800b872:	0030      	movs	r0, r6
 800b874:	0025      	movs	r5, r4
 800b876:	f000 f82f 	bl	800b8d8 <__malloc_unlock>
 800b87a:	2207      	movs	r2, #7
 800b87c:	350b      	adds	r5, #11
 800b87e:	1d23      	adds	r3, r4, #4
 800b880:	4395      	bics	r5, r2
 800b882:	1aea      	subs	r2, r5, r3
 800b884:	429d      	cmp	r5, r3
 800b886:	d0e4      	beq.n	800b852 <_malloc_r+0x8e>
 800b888:	1b5b      	subs	r3, r3, r5
 800b88a:	50a3      	str	r3, [r4, r2]
 800b88c:	e7e1      	b.n	800b852 <_malloc_r+0x8e>
 800b88e:	605a      	str	r2, [r3, #4]
 800b890:	e7ec      	b.n	800b86c <_malloc_r+0xa8>
 800b892:	6862      	ldr	r2, [r4, #4]
 800b894:	42a3      	cmp	r3, r4
 800b896:	d1d5      	bne.n	800b844 <_malloc_r+0x80>
 800b898:	9b00      	ldr	r3, [sp, #0]
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e7e9      	b.n	800b872 <_malloc_r+0xae>
 800b89e:	0023      	movs	r3, r4
 800b8a0:	6864      	ldr	r4, [r4, #4]
 800b8a2:	e7a2      	b.n	800b7ea <_malloc_r+0x26>
 800b8a4:	002c      	movs	r4, r5
 800b8a6:	686d      	ldr	r5, [r5, #4]
 800b8a8:	e7ab      	b.n	800b802 <_malloc_r+0x3e>
 800b8aa:	0013      	movs	r3, r2
 800b8ac:	e7c4      	b.n	800b838 <_malloc_r+0x74>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	0030      	movs	r0, r6
 800b8b2:	6033      	str	r3, [r6, #0]
 800b8b4:	f000 f810 	bl	800b8d8 <__malloc_unlock>
 800b8b8:	e7cb      	b.n	800b852 <_malloc_r+0x8e>
 800b8ba:	6027      	str	r7, [r4, #0]
 800b8bc:	e7d9      	b.n	800b872 <_malloc_r+0xae>
 800b8be:	605b      	str	r3, [r3, #4]
 800b8c0:	deff      	udf	#255	; 0xff
 800b8c2:	46c0      	nop			; (mov r8, r8)
 800b8c4:	200009bc 	.word	0x200009bc

0800b8c8 <__malloc_lock>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4802      	ldr	r0, [pc, #8]	; (800b8d4 <__malloc_lock+0xc>)
 800b8cc:	f7ff f851 	bl	800a972 <__retarget_lock_acquire_recursive>
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	46c0      	nop			; (mov r8, r8)
 800b8d4:	200009b8 	.word	0x200009b8

0800b8d8 <__malloc_unlock>:
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	4802      	ldr	r0, [pc, #8]	; (800b8e4 <__malloc_unlock+0xc>)
 800b8dc:	f7ff f84a 	bl	800a974 <__retarget_lock_release_recursive>
 800b8e0:	bd10      	pop	{r4, pc}
 800b8e2:	46c0      	nop			; (mov r8, r8)
 800b8e4:	200009b8 	.word	0x200009b8

0800b8e8 <_Balloc>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	69c5      	ldr	r5, [r0, #28]
 800b8ec:	0006      	movs	r6, r0
 800b8ee:	000c      	movs	r4, r1
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	d10e      	bne.n	800b912 <_Balloc+0x2a>
 800b8f4:	2010      	movs	r0, #16
 800b8f6:	f7ff ff39 	bl	800b76c <malloc>
 800b8fa:	1e02      	subs	r2, r0, #0
 800b8fc:	61f0      	str	r0, [r6, #28]
 800b8fe:	d104      	bne.n	800b90a <_Balloc+0x22>
 800b900:	216b      	movs	r1, #107	; 0x6b
 800b902:	4b19      	ldr	r3, [pc, #100]	; (800b968 <_Balloc+0x80>)
 800b904:	4819      	ldr	r0, [pc, #100]	; (800b96c <_Balloc+0x84>)
 800b906:	f000 fdb3 	bl	800c470 <__assert_func>
 800b90a:	6045      	str	r5, [r0, #4]
 800b90c:	6085      	str	r5, [r0, #8]
 800b90e:	6005      	str	r5, [r0, #0]
 800b910:	60c5      	str	r5, [r0, #12]
 800b912:	69f5      	ldr	r5, [r6, #28]
 800b914:	68eb      	ldr	r3, [r5, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d013      	beq.n	800b942 <_Balloc+0x5a>
 800b91a:	69f3      	ldr	r3, [r6, #28]
 800b91c:	00a2      	lsls	r2, r4, #2
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	189b      	adds	r3, r3, r2
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	2800      	cmp	r0, #0
 800b926:	d118      	bne.n	800b95a <_Balloc+0x72>
 800b928:	2101      	movs	r1, #1
 800b92a:	000d      	movs	r5, r1
 800b92c:	40a5      	lsls	r5, r4
 800b92e:	1d6a      	adds	r2, r5, #5
 800b930:	0030      	movs	r0, r6
 800b932:	0092      	lsls	r2, r2, #2
 800b934:	f000 fdba 	bl	800c4ac <_calloc_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d00c      	beq.n	800b956 <_Balloc+0x6e>
 800b93c:	6044      	str	r4, [r0, #4]
 800b93e:	6085      	str	r5, [r0, #8]
 800b940:	e00d      	b.n	800b95e <_Balloc+0x76>
 800b942:	2221      	movs	r2, #33	; 0x21
 800b944:	2104      	movs	r1, #4
 800b946:	0030      	movs	r0, r6
 800b948:	f000 fdb0 	bl	800c4ac <_calloc_r>
 800b94c:	69f3      	ldr	r3, [r6, #28]
 800b94e:	60e8      	str	r0, [r5, #12]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e1      	bne.n	800b91a <_Balloc+0x32>
 800b956:	2000      	movs	r0, #0
 800b958:	bd70      	pop	{r4, r5, r6, pc}
 800b95a:	6802      	ldr	r2, [r0, #0]
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	2300      	movs	r3, #0
 800b960:	6103      	str	r3, [r0, #16]
 800b962:	60c3      	str	r3, [r0, #12]
 800b964:	e7f8      	b.n	800b958 <_Balloc+0x70>
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	0800fbc9 	.word	0x0800fbc9
 800b96c:	0800fc49 	.word	0x0800fc49

0800b970 <_Bfree>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	69c6      	ldr	r6, [r0, #28]
 800b974:	0005      	movs	r5, r0
 800b976:	000c      	movs	r4, r1
 800b978:	2e00      	cmp	r6, #0
 800b97a:	d10e      	bne.n	800b99a <_Bfree+0x2a>
 800b97c:	2010      	movs	r0, #16
 800b97e:	f7ff fef5 	bl	800b76c <malloc>
 800b982:	1e02      	subs	r2, r0, #0
 800b984:	61e8      	str	r0, [r5, #28]
 800b986:	d104      	bne.n	800b992 <_Bfree+0x22>
 800b988:	218f      	movs	r1, #143	; 0x8f
 800b98a:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <_Bfree+0x40>)
 800b98c:	4809      	ldr	r0, [pc, #36]	; (800b9b4 <_Bfree+0x44>)
 800b98e:	f000 fd6f 	bl	800c470 <__assert_func>
 800b992:	6046      	str	r6, [r0, #4]
 800b994:	6086      	str	r6, [r0, #8]
 800b996:	6006      	str	r6, [r0, #0]
 800b998:	60c6      	str	r6, [r0, #12]
 800b99a:	2c00      	cmp	r4, #0
 800b99c:	d007      	beq.n	800b9ae <_Bfree+0x3e>
 800b99e:	69eb      	ldr	r3, [r5, #28]
 800b9a0:	6862      	ldr	r2, [r4, #4]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	189b      	adds	r3, r3, r2
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	6022      	str	r2, [r4, #0]
 800b9ac:	601c      	str	r4, [r3, #0]
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	0800fbc9 	.word	0x0800fbc9
 800b9b4:	0800fc49 	.word	0x0800fc49

0800b9b8 <__multadd>:
 800b9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ba:	000e      	movs	r6, r1
 800b9bc:	9001      	str	r0, [sp, #4]
 800b9be:	000c      	movs	r4, r1
 800b9c0:	001d      	movs	r5, r3
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	690f      	ldr	r7, [r1, #16]
 800b9c6:	3614      	adds	r6, #20
 800b9c8:	6833      	ldr	r3, [r6, #0]
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	b299      	uxth	r1, r3
 800b9ce:	4351      	muls	r1, r2
 800b9d0:	0c1b      	lsrs	r3, r3, #16
 800b9d2:	4353      	muls	r3, r2
 800b9d4:	1949      	adds	r1, r1, r5
 800b9d6:	0c0d      	lsrs	r5, r1, #16
 800b9d8:	195b      	adds	r3, r3, r5
 800b9da:	0c1d      	lsrs	r5, r3, #16
 800b9dc:	b289      	uxth	r1, r1
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	185b      	adds	r3, r3, r1
 800b9e2:	c608      	stmia	r6!, {r3}
 800b9e4:	4287      	cmp	r7, r0
 800b9e6:	dcef      	bgt.n	800b9c8 <__multadd+0x10>
 800b9e8:	2d00      	cmp	r5, #0
 800b9ea:	d022      	beq.n	800ba32 <__multadd+0x7a>
 800b9ec:	68a3      	ldr	r3, [r4, #8]
 800b9ee:	42bb      	cmp	r3, r7
 800b9f0:	dc19      	bgt.n	800ba26 <__multadd+0x6e>
 800b9f2:	6861      	ldr	r1, [r4, #4]
 800b9f4:	9801      	ldr	r0, [sp, #4]
 800b9f6:	3101      	adds	r1, #1
 800b9f8:	f7ff ff76 	bl	800b8e8 <_Balloc>
 800b9fc:	1e06      	subs	r6, r0, #0
 800b9fe:	d105      	bne.n	800ba0c <__multadd+0x54>
 800ba00:	0032      	movs	r2, r6
 800ba02:	21ba      	movs	r1, #186	; 0xba
 800ba04:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <__multadd+0x80>)
 800ba06:	480d      	ldr	r0, [pc, #52]	; (800ba3c <__multadd+0x84>)
 800ba08:	f000 fd32 	bl	800c470 <__assert_func>
 800ba0c:	0021      	movs	r1, r4
 800ba0e:	6922      	ldr	r2, [r4, #16]
 800ba10:	310c      	adds	r1, #12
 800ba12:	3202      	adds	r2, #2
 800ba14:	0092      	lsls	r2, r2, #2
 800ba16:	300c      	adds	r0, #12
 800ba18:	f7fe ffb8 	bl	800a98c <memcpy>
 800ba1c:	0021      	movs	r1, r4
 800ba1e:	9801      	ldr	r0, [sp, #4]
 800ba20:	f7ff ffa6 	bl	800b970 <_Bfree>
 800ba24:	0034      	movs	r4, r6
 800ba26:	1d3b      	adds	r3, r7, #4
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	18e3      	adds	r3, r4, r3
 800ba2c:	605d      	str	r5, [r3, #4]
 800ba2e:	1c7b      	adds	r3, r7, #1
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	0020      	movs	r0, r4
 800ba34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	0800fc38 	.word	0x0800fc38
 800ba3c:	0800fc49 	.word	0x0800fc49

0800ba40 <__hi0bits>:
 800ba40:	0003      	movs	r3, r0
 800ba42:	0c02      	lsrs	r2, r0, #16
 800ba44:	2000      	movs	r0, #0
 800ba46:	4282      	cmp	r2, r0
 800ba48:	d101      	bne.n	800ba4e <__hi0bits+0xe>
 800ba4a:	041b      	lsls	r3, r3, #16
 800ba4c:	3010      	adds	r0, #16
 800ba4e:	0e1a      	lsrs	r2, r3, #24
 800ba50:	d101      	bne.n	800ba56 <__hi0bits+0x16>
 800ba52:	3008      	adds	r0, #8
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	0f1a      	lsrs	r2, r3, #28
 800ba58:	d101      	bne.n	800ba5e <__hi0bits+0x1e>
 800ba5a:	3004      	adds	r0, #4
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	0f9a      	lsrs	r2, r3, #30
 800ba60:	d101      	bne.n	800ba66 <__hi0bits+0x26>
 800ba62:	3002      	adds	r0, #2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	db03      	blt.n	800ba72 <__hi0bits+0x32>
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	d400      	bmi.n	800ba72 <__hi0bits+0x32>
 800ba70:	2020      	movs	r0, #32
 800ba72:	4770      	bx	lr

0800ba74 <__lo0bits>:
 800ba74:	6803      	ldr	r3, [r0, #0]
 800ba76:	0001      	movs	r1, r0
 800ba78:	2207      	movs	r2, #7
 800ba7a:	0018      	movs	r0, r3
 800ba7c:	4010      	ands	r0, r2
 800ba7e:	4213      	tst	r3, r2
 800ba80:	d00d      	beq.n	800ba9e <__lo0bits+0x2a>
 800ba82:	3a06      	subs	r2, #6
 800ba84:	2000      	movs	r0, #0
 800ba86:	4213      	tst	r3, r2
 800ba88:	d105      	bne.n	800ba96 <__lo0bits+0x22>
 800ba8a:	3002      	adds	r0, #2
 800ba8c:	4203      	tst	r3, r0
 800ba8e:	d003      	beq.n	800ba98 <__lo0bits+0x24>
 800ba90:	40d3      	lsrs	r3, r2
 800ba92:	0010      	movs	r0, r2
 800ba94:	600b      	str	r3, [r1, #0]
 800ba96:	4770      	bx	lr
 800ba98:	089b      	lsrs	r3, r3, #2
 800ba9a:	600b      	str	r3, [r1, #0]
 800ba9c:	e7fb      	b.n	800ba96 <__lo0bits+0x22>
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d101      	bne.n	800baa8 <__lo0bits+0x34>
 800baa4:	2010      	movs	r0, #16
 800baa6:	0c1b      	lsrs	r3, r3, #16
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d101      	bne.n	800bab2 <__lo0bits+0x3e>
 800baae:	3008      	adds	r0, #8
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	071a      	lsls	r2, r3, #28
 800bab4:	d101      	bne.n	800baba <__lo0bits+0x46>
 800bab6:	3004      	adds	r0, #4
 800bab8:	091b      	lsrs	r3, r3, #4
 800baba:	079a      	lsls	r2, r3, #30
 800babc:	d101      	bne.n	800bac2 <__lo0bits+0x4e>
 800babe:	3002      	adds	r0, #2
 800bac0:	089b      	lsrs	r3, r3, #2
 800bac2:	07da      	lsls	r2, r3, #31
 800bac4:	d4e9      	bmi.n	800ba9a <__lo0bits+0x26>
 800bac6:	3001      	adds	r0, #1
 800bac8:	085b      	lsrs	r3, r3, #1
 800baca:	d1e6      	bne.n	800ba9a <__lo0bits+0x26>
 800bacc:	2020      	movs	r0, #32
 800bace:	e7e2      	b.n	800ba96 <__lo0bits+0x22>

0800bad0 <__i2b>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	000c      	movs	r4, r1
 800bad4:	2101      	movs	r1, #1
 800bad6:	f7ff ff07 	bl	800b8e8 <_Balloc>
 800bada:	2800      	cmp	r0, #0
 800badc:	d107      	bne.n	800baee <__i2b+0x1e>
 800bade:	2146      	movs	r1, #70	; 0x46
 800bae0:	4c05      	ldr	r4, [pc, #20]	; (800baf8 <__i2b+0x28>)
 800bae2:	0002      	movs	r2, r0
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <__i2b+0x2c>)
 800bae6:	0020      	movs	r0, r4
 800bae8:	31ff      	adds	r1, #255	; 0xff
 800baea:	f000 fcc1 	bl	800c470 <__assert_func>
 800baee:	2301      	movs	r3, #1
 800baf0:	6144      	str	r4, [r0, #20]
 800baf2:	6103      	str	r3, [r0, #16]
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	0800fc49 	.word	0x0800fc49
 800bafc:	0800fc38 	.word	0x0800fc38

0800bb00 <__multiply>:
 800bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb02:	0015      	movs	r5, r2
 800bb04:	690a      	ldr	r2, [r1, #16]
 800bb06:	692b      	ldr	r3, [r5, #16]
 800bb08:	000c      	movs	r4, r1
 800bb0a:	b08b      	sub	sp, #44	; 0x2c
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	da01      	bge.n	800bb14 <__multiply+0x14>
 800bb10:	002c      	movs	r4, r5
 800bb12:	000d      	movs	r5, r1
 800bb14:	6927      	ldr	r7, [r4, #16]
 800bb16:	692e      	ldr	r6, [r5, #16]
 800bb18:	6861      	ldr	r1, [r4, #4]
 800bb1a:	19bb      	adds	r3, r7, r6
 800bb1c:	9303      	str	r3, [sp, #12]
 800bb1e:	68a3      	ldr	r3, [r4, #8]
 800bb20:	19ba      	adds	r2, r7, r6
 800bb22:	4293      	cmp	r3, r2
 800bb24:	da00      	bge.n	800bb28 <__multiply+0x28>
 800bb26:	3101      	adds	r1, #1
 800bb28:	f7ff fede 	bl	800b8e8 <_Balloc>
 800bb2c:	9002      	str	r0, [sp, #8]
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d106      	bne.n	800bb40 <__multiply+0x40>
 800bb32:	21b1      	movs	r1, #177	; 0xb1
 800bb34:	4b48      	ldr	r3, [pc, #288]	; (800bc58 <__multiply+0x158>)
 800bb36:	4849      	ldr	r0, [pc, #292]	; (800bc5c <__multiply+0x15c>)
 800bb38:	9a02      	ldr	r2, [sp, #8]
 800bb3a:	0049      	lsls	r1, r1, #1
 800bb3c:	f000 fc98 	bl	800c470 <__assert_func>
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	2200      	movs	r2, #0
 800bb44:	3314      	adds	r3, #20
 800bb46:	469c      	mov	ip, r3
 800bb48:	19bb      	adds	r3, r7, r6
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4463      	add	r3, ip
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	4663      	mov	r3, ip
 800bb52:	9904      	ldr	r1, [sp, #16]
 800bb54:	428b      	cmp	r3, r1
 800bb56:	d32a      	bcc.n	800bbae <__multiply+0xae>
 800bb58:	0023      	movs	r3, r4
 800bb5a:	00bf      	lsls	r7, r7, #2
 800bb5c:	3314      	adds	r3, #20
 800bb5e:	3514      	adds	r5, #20
 800bb60:	9308      	str	r3, [sp, #32]
 800bb62:	00b6      	lsls	r6, r6, #2
 800bb64:	19db      	adds	r3, r3, r7
 800bb66:	9305      	str	r3, [sp, #20]
 800bb68:	19ab      	adds	r3, r5, r6
 800bb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	9306      	str	r3, [sp, #24]
 800bb70:	0023      	movs	r3, r4
 800bb72:	9a05      	ldr	r2, [sp, #20]
 800bb74:	3315      	adds	r3, #21
 800bb76:	9501      	str	r5, [sp, #4]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d305      	bcc.n	800bb88 <__multiply+0x88>
 800bb7c:	1b13      	subs	r3, r2, r4
 800bb7e:	3b15      	subs	r3, #21
 800bb80:	089b      	lsrs	r3, r3, #2
 800bb82:	3301      	adds	r3, #1
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	9306      	str	r3, [sp, #24]
 800bb88:	9b01      	ldr	r3, [sp, #4]
 800bb8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d310      	bcc.n	800bbb2 <__multiply+0xb2>
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	dd05      	ble.n	800bba2 <__multiply+0xa2>
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d056      	beq.n	800bc50 <__multiply+0x150>
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	9a03      	ldr	r2, [sp, #12]
 800bba6:	0018      	movs	r0, r3
 800bba8:	611a      	str	r2, [r3, #16]
 800bbaa:	b00b      	add	sp, #44	; 0x2c
 800bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbae:	c304      	stmia	r3!, {r2}
 800bbb0:	e7cf      	b.n	800bb52 <__multiply+0x52>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	b280      	uxth	r0, r0
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d01e      	beq.n	800bbfa <__multiply+0xfa>
 800bbbc:	4667      	mov	r7, ip
 800bbbe:	2500      	movs	r5, #0
 800bbc0:	9e08      	ldr	r6, [sp, #32]
 800bbc2:	ce02      	ldmia	r6!, {r1}
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	b28b      	uxth	r3, r1
 800bbca:	4343      	muls	r3, r0
 800bbcc:	001a      	movs	r2, r3
 800bbce:	466b      	mov	r3, sp
 800bbd0:	8b9b      	ldrh	r3, [r3, #28]
 800bbd2:	18d3      	adds	r3, r2, r3
 800bbd4:	195b      	adds	r3, r3, r5
 800bbd6:	0c0d      	lsrs	r5, r1, #16
 800bbd8:	4345      	muls	r5, r0
 800bbda:	9a07      	ldr	r2, [sp, #28]
 800bbdc:	0c11      	lsrs	r1, r2, #16
 800bbde:	1869      	adds	r1, r5, r1
 800bbe0:	0c1a      	lsrs	r2, r3, #16
 800bbe2:	188a      	adds	r2, r1, r2
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	0c15      	lsrs	r5, r2, #16
 800bbe8:	0412      	lsls	r2, r2, #16
 800bbea:	431a      	orrs	r2, r3
 800bbec:	9b05      	ldr	r3, [sp, #20]
 800bbee:	c704      	stmia	r7!, {r2}
 800bbf0:	42b3      	cmp	r3, r6
 800bbf2:	d8e6      	bhi.n	800bbc2 <__multiply+0xc2>
 800bbf4:	4663      	mov	r3, ip
 800bbf6:	9a06      	ldr	r2, [sp, #24]
 800bbf8:	509d      	str	r5, [r3, r2]
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	0c00      	lsrs	r0, r0, #16
 800bc00:	d020      	beq.n	800bc44 <__multiply+0x144>
 800bc02:	4663      	mov	r3, ip
 800bc04:	0025      	movs	r5, r4
 800bc06:	4661      	mov	r1, ip
 800bc08:	2700      	movs	r7, #0
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3514      	adds	r5, #20
 800bc0e:	682a      	ldr	r2, [r5, #0]
 800bc10:	680e      	ldr	r6, [r1, #0]
 800bc12:	b292      	uxth	r2, r2
 800bc14:	4342      	muls	r2, r0
 800bc16:	0c36      	lsrs	r6, r6, #16
 800bc18:	1992      	adds	r2, r2, r6
 800bc1a:	19d2      	adds	r2, r2, r7
 800bc1c:	0416      	lsls	r6, r2, #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	431e      	orrs	r6, r3
 800bc22:	600e      	str	r6, [r1, #0]
 800bc24:	cd40      	ldmia	r5!, {r6}
 800bc26:	684b      	ldr	r3, [r1, #4]
 800bc28:	0c36      	lsrs	r6, r6, #16
 800bc2a:	4346      	muls	r6, r0
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	0c12      	lsrs	r2, r2, #16
 800bc30:	18f3      	adds	r3, r6, r3
 800bc32:	189b      	adds	r3, r3, r2
 800bc34:	9a05      	ldr	r2, [sp, #20]
 800bc36:	0c1f      	lsrs	r7, r3, #16
 800bc38:	3104      	adds	r1, #4
 800bc3a:	42aa      	cmp	r2, r5
 800bc3c:	d8e7      	bhi.n	800bc0e <__multiply+0x10e>
 800bc3e:	4662      	mov	r2, ip
 800bc40:	9906      	ldr	r1, [sp, #24]
 800bc42:	5053      	str	r3, [r2, r1]
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	3304      	adds	r3, #4
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	2304      	movs	r3, #4
 800bc4c:	449c      	add	ip, r3
 800bc4e:	e79b      	b.n	800bb88 <__multiply+0x88>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	e79b      	b.n	800bb90 <__multiply+0x90>
 800bc58:	0800fc38 	.word	0x0800fc38
 800bc5c:	0800fc49 	.word	0x0800fc49

0800bc60 <__pow5mult>:
 800bc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc62:	2303      	movs	r3, #3
 800bc64:	0015      	movs	r5, r2
 800bc66:	0007      	movs	r7, r0
 800bc68:	000e      	movs	r6, r1
 800bc6a:	401a      	ands	r2, r3
 800bc6c:	421d      	tst	r5, r3
 800bc6e:	d008      	beq.n	800bc82 <__pow5mult+0x22>
 800bc70:	4925      	ldr	r1, [pc, #148]	; (800bd08 <__pow5mult+0xa8>)
 800bc72:	3a01      	subs	r2, #1
 800bc74:	0092      	lsls	r2, r2, #2
 800bc76:	5852      	ldr	r2, [r2, r1]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	0031      	movs	r1, r6
 800bc7c:	f7ff fe9c 	bl	800b9b8 <__multadd>
 800bc80:	0006      	movs	r6, r0
 800bc82:	10ad      	asrs	r5, r5, #2
 800bc84:	d03d      	beq.n	800bd02 <__pow5mult+0xa2>
 800bc86:	69fc      	ldr	r4, [r7, #28]
 800bc88:	2c00      	cmp	r4, #0
 800bc8a:	d10f      	bne.n	800bcac <__pow5mult+0x4c>
 800bc8c:	2010      	movs	r0, #16
 800bc8e:	f7ff fd6d 	bl	800b76c <malloc>
 800bc92:	1e02      	subs	r2, r0, #0
 800bc94:	61f8      	str	r0, [r7, #28]
 800bc96:	d105      	bne.n	800bca4 <__pow5mult+0x44>
 800bc98:	21b4      	movs	r1, #180	; 0xb4
 800bc9a:	4b1c      	ldr	r3, [pc, #112]	; (800bd0c <__pow5mult+0xac>)
 800bc9c:	481c      	ldr	r0, [pc, #112]	; (800bd10 <__pow5mult+0xb0>)
 800bc9e:	31ff      	adds	r1, #255	; 0xff
 800bca0:	f000 fbe6 	bl	800c470 <__assert_func>
 800bca4:	6044      	str	r4, [r0, #4]
 800bca6:	6084      	str	r4, [r0, #8]
 800bca8:	6004      	str	r4, [r0, #0]
 800bcaa:	60c4      	str	r4, [r0, #12]
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	689c      	ldr	r4, [r3, #8]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	2c00      	cmp	r4, #0
 800bcb4:	d108      	bne.n	800bcc8 <__pow5mult+0x68>
 800bcb6:	0038      	movs	r0, r7
 800bcb8:	4916      	ldr	r1, [pc, #88]	; (800bd14 <__pow5mult+0xb4>)
 800bcba:	f7ff ff09 	bl	800bad0 <__i2b>
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	0004      	movs	r4, r0
 800bcc2:	6098      	str	r0, [r3, #8]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6003      	str	r3, [r0, #0]
 800bcc8:	2301      	movs	r3, #1
 800bcca:	421d      	tst	r5, r3
 800bccc:	d00a      	beq.n	800bce4 <__pow5mult+0x84>
 800bcce:	0031      	movs	r1, r6
 800bcd0:	0022      	movs	r2, r4
 800bcd2:	0038      	movs	r0, r7
 800bcd4:	f7ff ff14 	bl	800bb00 <__multiply>
 800bcd8:	0031      	movs	r1, r6
 800bcda:	9001      	str	r0, [sp, #4]
 800bcdc:	0038      	movs	r0, r7
 800bcde:	f7ff fe47 	bl	800b970 <_Bfree>
 800bce2:	9e01      	ldr	r6, [sp, #4]
 800bce4:	106d      	asrs	r5, r5, #1
 800bce6:	d00c      	beq.n	800bd02 <__pow5mult+0xa2>
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d107      	bne.n	800bcfe <__pow5mult+0x9e>
 800bcee:	0022      	movs	r2, r4
 800bcf0:	0021      	movs	r1, r4
 800bcf2:	0038      	movs	r0, r7
 800bcf4:	f7ff ff04 	bl	800bb00 <__multiply>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	6020      	str	r0, [r4, #0]
 800bcfc:	6003      	str	r3, [r0, #0]
 800bcfe:	0004      	movs	r4, r0
 800bd00:	e7e2      	b.n	800bcc8 <__pow5mult+0x68>
 800bd02:	0030      	movs	r0, r6
 800bd04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd06:	46c0      	nop			; (mov r8, r8)
 800bd08:	0800fd98 	.word	0x0800fd98
 800bd0c:	0800fbc9 	.word	0x0800fbc9
 800bd10:	0800fc49 	.word	0x0800fc49
 800bd14:	00000271 	.word	0x00000271

0800bd18 <__lshift>:
 800bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd1a:	000c      	movs	r4, r1
 800bd1c:	0017      	movs	r7, r2
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	1155      	asrs	r5, r2, #5
 800bd22:	b087      	sub	sp, #28
 800bd24:	18eb      	adds	r3, r5, r3
 800bd26:	9302      	str	r3, [sp, #8]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	6849      	ldr	r1, [r1, #4]
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	9004      	str	r0, [sp, #16]
 800bd32:	9a01      	ldr	r2, [sp, #4]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	db10      	blt.n	800bd5a <__lshift+0x42>
 800bd38:	9804      	ldr	r0, [sp, #16]
 800bd3a:	f7ff fdd5 	bl	800b8e8 <_Balloc>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	0002      	movs	r2, r0
 800bd42:	0006      	movs	r6, r0
 800bd44:	0019      	movs	r1, r3
 800bd46:	3214      	adds	r2, #20
 800bd48:	4298      	cmp	r0, r3
 800bd4a:	d10c      	bne.n	800bd66 <__lshift+0x4e>
 800bd4c:	31df      	adds	r1, #223	; 0xdf
 800bd4e:	0032      	movs	r2, r6
 800bd50:	4b26      	ldr	r3, [pc, #152]	; (800bdec <__lshift+0xd4>)
 800bd52:	4827      	ldr	r0, [pc, #156]	; (800bdf0 <__lshift+0xd8>)
 800bd54:	31ff      	adds	r1, #255	; 0xff
 800bd56:	f000 fb8b 	bl	800c470 <__assert_func>
 800bd5a:	3101      	adds	r1, #1
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	e7e8      	b.n	800bd32 <__lshift+0x1a>
 800bd60:	0098      	lsls	r0, r3, #2
 800bd62:	5011      	str	r1, [r2, r0]
 800bd64:	3301      	adds	r3, #1
 800bd66:	42ab      	cmp	r3, r5
 800bd68:	dbfa      	blt.n	800bd60 <__lshift+0x48>
 800bd6a:	43eb      	mvns	r3, r5
 800bd6c:	17db      	asrs	r3, r3, #31
 800bd6e:	401d      	ands	r5, r3
 800bd70:	211f      	movs	r1, #31
 800bd72:	0023      	movs	r3, r4
 800bd74:	0038      	movs	r0, r7
 800bd76:	00ad      	lsls	r5, r5, #2
 800bd78:	1955      	adds	r5, r2, r5
 800bd7a:	6922      	ldr	r2, [r4, #16]
 800bd7c:	3314      	adds	r3, #20
 800bd7e:	0092      	lsls	r2, r2, #2
 800bd80:	4008      	ands	r0, r1
 800bd82:	4684      	mov	ip, r0
 800bd84:	189a      	adds	r2, r3, r2
 800bd86:	420f      	tst	r7, r1
 800bd88:	d02a      	beq.n	800bde0 <__lshift+0xc8>
 800bd8a:	3101      	adds	r1, #1
 800bd8c:	1a09      	subs	r1, r1, r0
 800bd8e:	9105      	str	r1, [sp, #20]
 800bd90:	2100      	movs	r1, #0
 800bd92:	9503      	str	r5, [sp, #12]
 800bd94:	4667      	mov	r7, ip
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	40b8      	lsls	r0, r7
 800bd9a:	4308      	orrs	r0, r1
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	c101      	stmia	r1!, {r0}
 800bda0:	9103      	str	r1, [sp, #12]
 800bda2:	9805      	ldr	r0, [sp, #20]
 800bda4:	cb02      	ldmia	r3!, {r1}
 800bda6:	40c1      	lsrs	r1, r0
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d8f3      	bhi.n	800bd94 <__lshift+0x7c>
 800bdac:	0020      	movs	r0, r4
 800bdae:	3015      	adds	r0, #21
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	4282      	cmp	r2, r0
 800bdb4:	d304      	bcc.n	800bdc0 <__lshift+0xa8>
 800bdb6:	1b13      	subs	r3, r2, r4
 800bdb8:	3b15      	subs	r3, #21
 800bdba:	089b      	lsrs	r3, r3, #2
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	50e9      	str	r1, [r5, r3]
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d002      	beq.n	800bdcc <__lshift+0xb4>
 800bdc6:	9b02      	ldr	r3, [sp, #8]
 800bdc8:	3302      	adds	r3, #2
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	9b01      	ldr	r3, [sp, #4]
 800bdce:	9804      	ldr	r0, [sp, #16]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	0021      	movs	r1, r4
 800bdd4:	6133      	str	r3, [r6, #16]
 800bdd6:	f7ff fdcb 	bl	800b970 <_Bfree>
 800bdda:	0030      	movs	r0, r6
 800bddc:	b007      	add	sp, #28
 800bdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde0:	cb02      	ldmia	r3!, {r1}
 800bde2:	c502      	stmia	r5!, {r1}
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d8fb      	bhi.n	800bde0 <__lshift+0xc8>
 800bde8:	e7f0      	b.n	800bdcc <__lshift+0xb4>
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	0800fc38 	.word	0x0800fc38
 800bdf0:	0800fc49 	.word	0x0800fc49

0800bdf4 <__mcmp>:
 800bdf4:	b530      	push	{r4, r5, lr}
 800bdf6:	690b      	ldr	r3, [r1, #16]
 800bdf8:	6904      	ldr	r4, [r0, #16]
 800bdfa:	0002      	movs	r2, r0
 800bdfc:	1ae0      	subs	r0, r4, r3
 800bdfe:	429c      	cmp	r4, r3
 800be00:	d10e      	bne.n	800be20 <__mcmp+0x2c>
 800be02:	3214      	adds	r2, #20
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	3114      	adds	r1, #20
 800be08:	0014      	movs	r4, r2
 800be0a:	18c9      	adds	r1, r1, r3
 800be0c:	18d2      	adds	r2, r2, r3
 800be0e:	3a04      	subs	r2, #4
 800be10:	3904      	subs	r1, #4
 800be12:	6815      	ldr	r5, [r2, #0]
 800be14:	680b      	ldr	r3, [r1, #0]
 800be16:	429d      	cmp	r5, r3
 800be18:	d003      	beq.n	800be22 <__mcmp+0x2e>
 800be1a:	2001      	movs	r0, #1
 800be1c:	429d      	cmp	r5, r3
 800be1e:	d303      	bcc.n	800be28 <__mcmp+0x34>
 800be20:	bd30      	pop	{r4, r5, pc}
 800be22:	4294      	cmp	r4, r2
 800be24:	d3f3      	bcc.n	800be0e <__mcmp+0x1a>
 800be26:	e7fb      	b.n	800be20 <__mcmp+0x2c>
 800be28:	4240      	negs	r0, r0
 800be2a:	e7f9      	b.n	800be20 <__mcmp+0x2c>

0800be2c <__mdiff>:
 800be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2e:	000e      	movs	r6, r1
 800be30:	0007      	movs	r7, r0
 800be32:	0011      	movs	r1, r2
 800be34:	0030      	movs	r0, r6
 800be36:	b087      	sub	sp, #28
 800be38:	0014      	movs	r4, r2
 800be3a:	f7ff ffdb 	bl	800bdf4 <__mcmp>
 800be3e:	1e05      	subs	r5, r0, #0
 800be40:	d110      	bne.n	800be64 <__mdiff+0x38>
 800be42:	0001      	movs	r1, r0
 800be44:	0038      	movs	r0, r7
 800be46:	f7ff fd4f 	bl	800b8e8 <_Balloc>
 800be4a:	1e02      	subs	r2, r0, #0
 800be4c:	d104      	bne.n	800be58 <__mdiff+0x2c>
 800be4e:	4b3f      	ldr	r3, [pc, #252]	; (800bf4c <__mdiff+0x120>)
 800be50:	483f      	ldr	r0, [pc, #252]	; (800bf50 <__mdiff+0x124>)
 800be52:	4940      	ldr	r1, [pc, #256]	; (800bf54 <__mdiff+0x128>)
 800be54:	f000 fb0c 	bl	800c470 <__assert_func>
 800be58:	2301      	movs	r3, #1
 800be5a:	6145      	str	r5, [r0, #20]
 800be5c:	6103      	str	r3, [r0, #16]
 800be5e:	0010      	movs	r0, r2
 800be60:	b007      	add	sp, #28
 800be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be64:	2301      	movs	r3, #1
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	2800      	cmp	r0, #0
 800be6a:	db04      	blt.n	800be76 <__mdiff+0x4a>
 800be6c:	0023      	movs	r3, r4
 800be6e:	0034      	movs	r4, r6
 800be70:	001e      	movs	r6, r3
 800be72:	2300      	movs	r3, #0
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	0038      	movs	r0, r7
 800be78:	6861      	ldr	r1, [r4, #4]
 800be7a:	f7ff fd35 	bl	800b8e8 <_Balloc>
 800be7e:	1e02      	subs	r2, r0, #0
 800be80:	d103      	bne.n	800be8a <__mdiff+0x5e>
 800be82:	4b32      	ldr	r3, [pc, #200]	; (800bf4c <__mdiff+0x120>)
 800be84:	4832      	ldr	r0, [pc, #200]	; (800bf50 <__mdiff+0x124>)
 800be86:	4934      	ldr	r1, [pc, #208]	; (800bf58 <__mdiff+0x12c>)
 800be88:	e7e4      	b.n	800be54 <__mdiff+0x28>
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	2700      	movs	r7, #0
 800be8e:	60c3      	str	r3, [r0, #12]
 800be90:	6920      	ldr	r0, [r4, #16]
 800be92:	3414      	adds	r4, #20
 800be94:	0083      	lsls	r3, r0, #2
 800be96:	18e3      	adds	r3, r4, r3
 800be98:	0021      	movs	r1, r4
 800be9a:	9401      	str	r4, [sp, #4]
 800be9c:	0034      	movs	r4, r6
 800be9e:	9302      	str	r3, [sp, #8]
 800bea0:	6933      	ldr	r3, [r6, #16]
 800bea2:	3414      	adds	r4, #20
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	18e3      	adds	r3, r4, r3
 800bea8:	9303      	str	r3, [sp, #12]
 800beaa:	0013      	movs	r3, r2
 800beac:	3314      	adds	r3, #20
 800beae:	469c      	mov	ip, r3
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	9104      	str	r1, [sp, #16]
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	cc02      	ldmia	r4!, {r1}
 800beb8:	cb20      	ldmia	r3!, {r5}
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	b2ab      	uxth	r3, r5
 800bebe:	19df      	adds	r7, r3, r7
 800bec0:	b28b      	uxth	r3, r1
 800bec2:	1afb      	subs	r3, r7, r3
 800bec4:	0c09      	lsrs	r1, r1, #16
 800bec6:	0c2d      	lsrs	r5, r5, #16
 800bec8:	1a6d      	subs	r5, r5, r1
 800beca:	1419      	asrs	r1, r3, #16
 800becc:	1869      	adds	r1, r5, r1
 800bece:	b29b      	uxth	r3, r3
 800bed0:	140f      	asrs	r7, r1, #16
 800bed2:	0409      	lsls	r1, r1, #16
 800bed4:	4319      	orrs	r1, r3
 800bed6:	4663      	mov	r3, ip
 800bed8:	c302      	stmia	r3!, {r1}
 800beda:	469c      	mov	ip, r3
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	42a3      	cmp	r3, r4
 800bee0:	d8e8      	bhi.n	800beb4 <__mdiff+0x88>
 800bee2:	0031      	movs	r1, r6
 800bee4:	9c03      	ldr	r4, [sp, #12]
 800bee6:	3115      	adds	r1, #21
 800bee8:	2304      	movs	r3, #4
 800beea:	428c      	cmp	r4, r1
 800beec:	d304      	bcc.n	800bef8 <__mdiff+0xcc>
 800beee:	1ba3      	subs	r3, r4, r6
 800bef0:	3b15      	subs	r3, #21
 800bef2:	089b      	lsrs	r3, r3, #2
 800bef4:	3301      	adds	r3, #1
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	9901      	ldr	r1, [sp, #4]
 800befa:	18cd      	adds	r5, r1, r3
 800befc:	9905      	ldr	r1, [sp, #20]
 800befe:	002e      	movs	r6, r5
 800bf00:	18cb      	adds	r3, r1, r3
 800bf02:	469c      	mov	ip, r3
 800bf04:	9902      	ldr	r1, [sp, #8]
 800bf06:	428e      	cmp	r6, r1
 800bf08:	d310      	bcc.n	800bf2c <__mdiff+0x100>
 800bf0a:	9e02      	ldr	r6, [sp, #8]
 800bf0c:	1ee9      	subs	r1, r5, #3
 800bf0e:	2400      	movs	r4, #0
 800bf10:	428e      	cmp	r6, r1
 800bf12:	d304      	bcc.n	800bf1e <__mdiff+0xf2>
 800bf14:	0031      	movs	r1, r6
 800bf16:	3103      	adds	r1, #3
 800bf18:	1b49      	subs	r1, r1, r5
 800bf1a:	0889      	lsrs	r1, r1, #2
 800bf1c:	008c      	lsls	r4, r1, #2
 800bf1e:	191b      	adds	r3, r3, r4
 800bf20:	3b04      	subs	r3, #4
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	2900      	cmp	r1, #0
 800bf26:	d00f      	beq.n	800bf48 <__mdiff+0x11c>
 800bf28:	6110      	str	r0, [r2, #16]
 800bf2a:	e798      	b.n	800be5e <__mdiff+0x32>
 800bf2c:	ce02      	ldmia	r6!, {r1}
 800bf2e:	b28c      	uxth	r4, r1
 800bf30:	19e4      	adds	r4, r4, r7
 800bf32:	0c0f      	lsrs	r7, r1, #16
 800bf34:	1421      	asrs	r1, r4, #16
 800bf36:	1879      	adds	r1, r7, r1
 800bf38:	b2a4      	uxth	r4, r4
 800bf3a:	140f      	asrs	r7, r1, #16
 800bf3c:	0409      	lsls	r1, r1, #16
 800bf3e:	4321      	orrs	r1, r4
 800bf40:	4664      	mov	r4, ip
 800bf42:	c402      	stmia	r4!, {r1}
 800bf44:	46a4      	mov	ip, r4
 800bf46:	e7dd      	b.n	800bf04 <__mdiff+0xd8>
 800bf48:	3801      	subs	r0, #1
 800bf4a:	e7e9      	b.n	800bf20 <__mdiff+0xf4>
 800bf4c:	0800fc38 	.word	0x0800fc38
 800bf50:	0800fc49 	.word	0x0800fc49
 800bf54:	00000237 	.word	0x00000237
 800bf58:	00000245 	.word	0x00000245

0800bf5c <__d2b>:
 800bf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf5e:	2101      	movs	r1, #1
 800bf60:	0014      	movs	r4, r2
 800bf62:	001d      	movs	r5, r3
 800bf64:	9f08      	ldr	r7, [sp, #32]
 800bf66:	f7ff fcbf 	bl	800b8e8 <_Balloc>
 800bf6a:	1e06      	subs	r6, r0, #0
 800bf6c:	d105      	bne.n	800bf7a <__d2b+0x1e>
 800bf6e:	0032      	movs	r2, r6
 800bf70:	4b24      	ldr	r3, [pc, #144]	; (800c004 <__d2b+0xa8>)
 800bf72:	4825      	ldr	r0, [pc, #148]	; (800c008 <__d2b+0xac>)
 800bf74:	4925      	ldr	r1, [pc, #148]	; (800c00c <__d2b+0xb0>)
 800bf76:	f000 fa7b 	bl	800c470 <__assert_func>
 800bf7a:	032b      	lsls	r3, r5, #12
 800bf7c:	006d      	lsls	r5, r5, #1
 800bf7e:	0b1b      	lsrs	r3, r3, #12
 800bf80:	0d6d      	lsrs	r5, r5, #21
 800bf82:	d125      	bne.n	800bfd0 <__d2b+0x74>
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	2c00      	cmp	r4, #0
 800bf88:	d028      	beq.n	800bfdc <__d2b+0x80>
 800bf8a:	4668      	mov	r0, sp
 800bf8c:	9400      	str	r4, [sp, #0]
 800bf8e:	f7ff fd71 	bl	800ba74 <__lo0bits>
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	9900      	ldr	r1, [sp, #0]
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d01e      	beq.n	800bfd8 <__d2b+0x7c>
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	001c      	movs	r4, r3
 800bf9e:	1a12      	subs	r2, r2, r0
 800bfa0:	4094      	lsls	r4, r2
 800bfa2:	0022      	movs	r2, r4
 800bfa4:	40c3      	lsrs	r3, r0
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	6172      	str	r2, [r6, #20]
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	9c01      	ldr	r4, [sp, #4]
 800bfae:	61b4      	str	r4, [r6, #24]
 800bfb0:	1e63      	subs	r3, r4, #1
 800bfb2:	419c      	sbcs	r4, r3
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	6134      	str	r4, [r6, #16]
 800bfb8:	2d00      	cmp	r5, #0
 800bfba:	d017      	beq.n	800bfec <__d2b+0x90>
 800bfbc:	2435      	movs	r4, #53	; 0x35
 800bfbe:	4b14      	ldr	r3, [pc, #80]	; (800c010 <__d2b+0xb4>)
 800bfc0:	18ed      	adds	r5, r5, r3
 800bfc2:	182d      	adds	r5, r5, r0
 800bfc4:	603d      	str	r5, [r7, #0]
 800bfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc8:	1a24      	subs	r4, r4, r0
 800bfca:	601c      	str	r4, [r3, #0]
 800bfcc:	0030      	movs	r0, r6
 800bfce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfd0:	2280      	movs	r2, #128	; 0x80
 800bfd2:	0352      	lsls	r2, r2, #13
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	e7d5      	b.n	800bf84 <__d2b+0x28>
 800bfd8:	6171      	str	r1, [r6, #20]
 800bfda:	e7e7      	b.n	800bfac <__d2b+0x50>
 800bfdc:	a801      	add	r0, sp, #4
 800bfde:	f7ff fd49 	bl	800ba74 <__lo0bits>
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	2401      	movs	r4, #1
 800bfe6:	6173      	str	r3, [r6, #20]
 800bfe8:	3020      	adds	r0, #32
 800bfea:	e7e4      	b.n	800bfb6 <__d2b+0x5a>
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <__d2b+0xb8>)
 800bfee:	18c0      	adds	r0, r0, r3
 800bff0:	4b09      	ldr	r3, [pc, #36]	; (800c018 <__d2b+0xbc>)
 800bff2:	6038      	str	r0, [r7, #0]
 800bff4:	18e3      	adds	r3, r4, r3
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	18f3      	adds	r3, r6, r3
 800bffa:	6958      	ldr	r0, [r3, #20]
 800bffc:	f7ff fd20 	bl	800ba40 <__hi0bits>
 800c000:	0164      	lsls	r4, r4, #5
 800c002:	e7e0      	b.n	800bfc6 <__d2b+0x6a>
 800c004:	0800fc38 	.word	0x0800fc38
 800c008:	0800fc49 	.word	0x0800fc49
 800c00c:	0000030f 	.word	0x0000030f
 800c010:	fffffbcd 	.word	0xfffffbcd
 800c014:	fffffbce 	.word	0xfffffbce
 800c018:	3fffffff 	.word	0x3fffffff

0800c01c <__ssputs_r>:
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	b085      	sub	sp, #20
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	9203      	str	r2, [sp, #12]
 800c024:	688e      	ldr	r6, [r1, #8]
 800c026:	9a01      	ldr	r2, [sp, #4]
 800c028:	0007      	movs	r7, r0
 800c02a:	000c      	movs	r4, r1
 800c02c:	680b      	ldr	r3, [r1, #0]
 800c02e:	4296      	cmp	r6, r2
 800c030:	d831      	bhi.n	800c096 <__ssputs_r+0x7a>
 800c032:	898a      	ldrh	r2, [r1, #12]
 800c034:	2190      	movs	r1, #144	; 0x90
 800c036:	00c9      	lsls	r1, r1, #3
 800c038:	420a      	tst	r2, r1
 800c03a:	d029      	beq.n	800c090 <__ssputs_r+0x74>
 800c03c:	2003      	movs	r0, #3
 800c03e:	6921      	ldr	r1, [r4, #16]
 800c040:	1a5b      	subs	r3, r3, r1
 800c042:	9302      	str	r3, [sp, #8]
 800c044:	6963      	ldr	r3, [r4, #20]
 800c046:	4343      	muls	r3, r0
 800c048:	0fdd      	lsrs	r5, r3, #31
 800c04a:	18ed      	adds	r5, r5, r3
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	9802      	ldr	r0, [sp, #8]
 800c050:	3301      	adds	r3, #1
 800c052:	181b      	adds	r3, r3, r0
 800c054:	106d      	asrs	r5, r5, #1
 800c056:	42ab      	cmp	r3, r5
 800c058:	d900      	bls.n	800c05c <__ssputs_r+0x40>
 800c05a:	001d      	movs	r5, r3
 800c05c:	0552      	lsls	r2, r2, #21
 800c05e:	d529      	bpl.n	800c0b4 <__ssputs_r+0x98>
 800c060:	0029      	movs	r1, r5
 800c062:	0038      	movs	r0, r7
 800c064:	f7ff fbae 	bl	800b7c4 <_malloc_r>
 800c068:	1e06      	subs	r6, r0, #0
 800c06a:	d02d      	beq.n	800c0c8 <__ssputs_r+0xac>
 800c06c:	9a02      	ldr	r2, [sp, #8]
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	f7fe fc8c 	bl	800a98c <memcpy>
 800c074:	89a2      	ldrh	r2, [r4, #12]
 800c076:	4b19      	ldr	r3, [pc, #100]	; (800c0dc <__ssputs_r+0xc0>)
 800c078:	401a      	ands	r2, r3
 800c07a:	2380      	movs	r3, #128	; 0x80
 800c07c:	4313      	orrs	r3, r2
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	9b02      	ldr	r3, [sp, #8]
 800c082:	6126      	str	r6, [r4, #16]
 800c084:	18f6      	adds	r6, r6, r3
 800c086:	6026      	str	r6, [r4, #0]
 800c088:	6165      	str	r5, [r4, #20]
 800c08a:	9e01      	ldr	r6, [sp, #4]
 800c08c:	1aed      	subs	r5, r5, r3
 800c08e:	60a5      	str	r5, [r4, #8]
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	429e      	cmp	r6, r3
 800c094:	d900      	bls.n	800c098 <__ssputs_r+0x7c>
 800c096:	9e01      	ldr	r6, [sp, #4]
 800c098:	0032      	movs	r2, r6
 800c09a:	9903      	ldr	r1, [sp, #12]
 800c09c:	6820      	ldr	r0, [r4, #0]
 800c09e:	f7fe fbcf 	bl	800a840 <memmove>
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	1b9b      	subs	r3, r3, r6
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	199b      	adds	r3, r3, r6
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	b005      	add	sp, #20
 800c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b4:	002a      	movs	r2, r5
 800c0b6:	0038      	movs	r0, r7
 800c0b8:	f000 fa37 	bl	800c52a <_realloc_r>
 800c0bc:	1e06      	subs	r6, r0, #0
 800c0be:	d1df      	bne.n	800c080 <__ssputs_r+0x64>
 800c0c0:	0038      	movs	r0, r7
 800c0c2:	6921      	ldr	r1, [r4, #16]
 800c0c4:	f7ff fb08 	bl	800b6d8 <_free_r>
 800c0c8:	230c      	movs	r3, #12
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	89a2      	ldrh	r2, [r4, #12]
 800c0d0:	3334      	adds	r3, #52	; 0x34
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	81a3      	strh	r3, [r4, #12]
 800c0d6:	4240      	negs	r0, r0
 800c0d8:	e7ea      	b.n	800c0b0 <__ssputs_r+0x94>
 800c0da:	46c0      	nop			; (mov r8, r8)
 800c0dc:	fffffb7f 	.word	0xfffffb7f

0800c0e0 <_svfiprintf_r>:
 800c0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e2:	b0a1      	sub	sp, #132	; 0x84
 800c0e4:	9003      	str	r0, [sp, #12]
 800c0e6:	001d      	movs	r5, r3
 800c0e8:	898b      	ldrh	r3, [r1, #12]
 800c0ea:	000f      	movs	r7, r1
 800c0ec:	0016      	movs	r6, r2
 800c0ee:	061b      	lsls	r3, r3, #24
 800c0f0:	d511      	bpl.n	800c116 <_svfiprintf_r+0x36>
 800c0f2:	690b      	ldr	r3, [r1, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10e      	bne.n	800c116 <_svfiprintf_r+0x36>
 800c0f8:	2140      	movs	r1, #64	; 0x40
 800c0fa:	f7ff fb63 	bl	800b7c4 <_malloc_r>
 800c0fe:	6038      	str	r0, [r7, #0]
 800c100:	6138      	str	r0, [r7, #16]
 800c102:	2800      	cmp	r0, #0
 800c104:	d105      	bne.n	800c112 <_svfiprintf_r+0x32>
 800c106:	230c      	movs	r3, #12
 800c108:	9a03      	ldr	r2, [sp, #12]
 800c10a:	3801      	subs	r0, #1
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	b021      	add	sp, #132	; 0x84
 800c110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c112:	2340      	movs	r3, #64	; 0x40
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	2300      	movs	r3, #0
 800c118:	ac08      	add	r4, sp, #32
 800c11a:	6163      	str	r3, [r4, #20]
 800c11c:	3320      	adds	r3, #32
 800c11e:	7663      	strb	r3, [r4, #25]
 800c120:	3310      	adds	r3, #16
 800c122:	76a3      	strb	r3, [r4, #26]
 800c124:	9507      	str	r5, [sp, #28]
 800c126:	0035      	movs	r5, r6
 800c128:	782b      	ldrb	r3, [r5, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <_svfiprintf_r+0x52>
 800c12e:	2b25      	cmp	r3, #37	; 0x25
 800c130:	d148      	bne.n	800c1c4 <_svfiprintf_r+0xe4>
 800c132:	1bab      	subs	r3, r5, r6
 800c134:	9305      	str	r3, [sp, #20]
 800c136:	42b5      	cmp	r5, r6
 800c138:	d00b      	beq.n	800c152 <_svfiprintf_r+0x72>
 800c13a:	0032      	movs	r2, r6
 800c13c:	0039      	movs	r1, r7
 800c13e:	9803      	ldr	r0, [sp, #12]
 800c140:	f7ff ff6c 	bl	800c01c <__ssputs_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d100      	bne.n	800c14a <_svfiprintf_r+0x6a>
 800c148:	e0af      	b.n	800c2aa <_svfiprintf_r+0x1ca>
 800c14a:	6963      	ldr	r3, [r4, #20]
 800c14c:	9a05      	ldr	r2, [sp, #20]
 800c14e:	189b      	adds	r3, r3, r2
 800c150:	6163      	str	r3, [r4, #20]
 800c152:	782b      	ldrb	r3, [r5, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d100      	bne.n	800c15a <_svfiprintf_r+0x7a>
 800c158:	e0a7      	b.n	800c2aa <_svfiprintf_r+0x1ca>
 800c15a:	2201      	movs	r2, #1
 800c15c:	2300      	movs	r3, #0
 800c15e:	4252      	negs	r2, r2
 800c160:	6062      	str	r2, [r4, #4]
 800c162:	a904      	add	r1, sp, #16
 800c164:	3254      	adds	r2, #84	; 0x54
 800c166:	1852      	adds	r2, r2, r1
 800c168:	1c6e      	adds	r6, r5, #1
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	60e3      	str	r3, [r4, #12]
 800c16e:	60a3      	str	r3, [r4, #8]
 800c170:	7013      	strb	r3, [r2, #0]
 800c172:	65a3      	str	r3, [r4, #88]	; 0x58
 800c174:	4b55      	ldr	r3, [pc, #340]	; (800c2cc <_svfiprintf_r+0x1ec>)
 800c176:	2205      	movs	r2, #5
 800c178:	0018      	movs	r0, r3
 800c17a:	7831      	ldrb	r1, [r6, #0]
 800c17c:	9305      	str	r3, [sp, #20]
 800c17e:	f7fe fbfa 	bl	800a976 <memchr>
 800c182:	1c75      	adds	r5, r6, #1
 800c184:	2800      	cmp	r0, #0
 800c186:	d11f      	bne.n	800c1c8 <_svfiprintf_r+0xe8>
 800c188:	6822      	ldr	r2, [r4, #0]
 800c18a:	06d3      	lsls	r3, r2, #27
 800c18c:	d504      	bpl.n	800c198 <_svfiprintf_r+0xb8>
 800c18e:	2353      	movs	r3, #83	; 0x53
 800c190:	a904      	add	r1, sp, #16
 800c192:	185b      	adds	r3, r3, r1
 800c194:	2120      	movs	r1, #32
 800c196:	7019      	strb	r1, [r3, #0]
 800c198:	0713      	lsls	r3, r2, #28
 800c19a:	d504      	bpl.n	800c1a6 <_svfiprintf_r+0xc6>
 800c19c:	2353      	movs	r3, #83	; 0x53
 800c19e:	a904      	add	r1, sp, #16
 800c1a0:	185b      	adds	r3, r3, r1
 800c1a2:	212b      	movs	r1, #43	; 0x2b
 800c1a4:	7019      	strb	r1, [r3, #0]
 800c1a6:	7833      	ldrb	r3, [r6, #0]
 800c1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1aa:	d016      	beq.n	800c1da <_svfiprintf_r+0xfa>
 800c1ac:	0035      	movs	r5, r6
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	200a      	movs	r0, #10
 800c1b2:	68e3      	ldr	r3, [r4, #12]
 800c1b4:	782a      	ldrb	r2, [r5, #0]
 800c1b6:	1c6e      	adds	r6, r5, #1
 800c1b8:	3a30      	subs	r2, #48	; 0x30
 800c1ba:	2a09      	cmp	r2, #9
 800c1bc:	d94e      	bls.n	800c25c <_svfiprintf_r+0x17c>
 800c1be:	2900      	cmp	r1, #0
 800c1c0:	d111      	bne.n	800c1e6 <_svfiprintf_r+0x106>
 800c1c2:	e017      	b.n	800c1f4 <_svfiprintf_r+0x114>
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	e7af      	b.n	800c128 <_svfiprintf_r+0x48>
 800c1c8:	9b05      	ldr	r3, [sp, #20]
 800c1ca:	6822      	ldr	r2, [r4, #0]
 800c1cc:	1ac0      	subs	r0, r0, r3
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4083      	lsls	r3, r0
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	002e      	movs	r6, r5
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	e7cc      	b.n	800c174 <_svfiprintf_r+0x94>
 800c1da:	9b07      	ldr	r3, [sp, #28]
 800c1dc:	1d19      	adds	r1, r3, #4
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	9107      	str	r1, [sp, #28]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db01      	blt.n	800c1ea <_svfiprintf_r+0x10a>
 800c1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1e8:	e004      	b.n	800c1f4 <_svfiprintf_r+0x114>
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	60e3      	str	r3, [r4, #12]
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	782b      	ldrb	r3, [r5, #0]
 800c1f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1f8:	d10a      	bne.n	800c210 <_svfiprintf_r+0x130>
 800c1fa:	786b      	ldrb	r3, [r5, #1]
 800c1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fe:	d135      	bne.n	800c26c <_svfiprintf_r+0x18c>
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	3502      	adds	r5, #2
 800c204:	1d1a      	adds	r2, r3, #4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	9207      	str	r2, [sp, #28]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	db2b      	blt.n	800c266 <_svfiprintf_r+0x186>
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
 800c210:	4e2f      	ldr	r6, [pc, #188]	; (800c2d0 <_svfiprintf_r+0x1f0>)
 800c212:	2203      	movs	r2, #3
 800c214:	0030      	movs	r0, r6
 800c216:	7829      	ldrb	r1, [r5, #0]
 800c218:	f7fe fbad 	bl	800a976 <memchr>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d006      	beq.n	800c22e <_svfiprintf_r+0x14e>
 800c220:	2340      	movs	r3, #64	; 0x40
 800c222:	1b80      	subs	r0, r0, r6
 800c224:	4083      	lsls	r3, r0
 800c226:	6822      	ldr	r2, [r4, #0]
 800c228:	3501      	adds	r5, #1
 800c22a:	4313      	orrs	r3, r2
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	7829      	ldrb	r1, [r5, #0]
 800c230:	2206      	movs	r2, #6
 800c232:	4828      	ldr	r0, [pc, #160]	; (800c2d4 <_svfiprintf_r+0x1f4>)
 800c234:	1c6e      	adds	r6, r5, #1
 800c236:	7621      	strb	r1, [r4, #24]
 800c238:	f7fe fb9d 	bl	800a976 <memchr>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d03c      	beq.n	800c2ba <_svfiprintf_r+0x1da>
 800c240:	4b25      	ldr	r3, [pc, #148]	; (800c2d8 <_svfiprintf_r+0x1f8>)
 800c242:	2b00      	cmp	r3, #0
 800c244:	d125      	bne.n	800c292 <_svfiprintf_r+0x1b2>
 800c246:	2207      	movs	r2, #7
 800c248:	9b07      	ldr	r3, [sp, #28]
 800c24a:	3307      	adds	r3, #7
 800c24c:	4393      	bics	r3, r2
 800c24e:	3308      	adds	r3, #8
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	6963      	ldr	r3, [r4, #20]
 800c254:	9a04      	ldr	r2, [sp, #16]
 800c256:	189b      	adds	r3, r3, r2
 800c258:	6163      	str	r3, [r4, #20]
 800c25a:	e764      	b.n	800c126 <_svfiprintf_r+0x46>
 800c25c:	4343      	muls	r3, r0
 800c25e:	0035      	movs	r5, r6
 800c260:	2101      	movs	r1, #1
 800c262:	189b      	adds	r3, r3, r2
 800c264:	e7a6      	b.n	800c1b4 <_svfiprintf_r+0xd4>
 800c266:	2301      	movs	r3, #1
 800c268:	425b      	negs	r3, r3
 800c26a:	e7d0      	b.n	800c20e <_svfiprintf_r+0x12e>
 800c26c:	2300      	movs	r3, #0
 800c26e:	200a      	movs	r0, #10
 800c270:	001a      	movs	r2, r3
 800c272:	3501      	adds	r5, #1
 800c274:	6063      	str	r3, [r4, #4]
 800c276:	7829      	ldrb	r1, [r5, #0]
 800c278:	1c6e      	adds	r6, r5, #1
 800c27a:	3930      	subs	r1, #48	; 0x30
 800c27c:	2909      	cmp	r1, #9
 800c27e:	d903      	bls.n	800c288 <_svfiprintf_r+0x1a8>
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0c5      	beq.n	800c210 <_svfiprintf_r+0x130>
 800c284:	9209      	str	r2, [sp, #36]	; 0x24
 800c286:	e7c3      	b.n	800c210 <_svfiprintf_r+0x130>
 800c288:	4342      	muls	r2, r0
 800c28a:	0035      	movs	r5, r6
 800c28c:	2301      	movs	r3, #1
 800c28e:	1852      	adds	r2, r2, r1
 800c290:	e7f1      	b.n	800c276 <_svfiprintf_r+0x196>
 800c292:	aa07      	add	r2, sp, #28
 800c294:	9200      	str	r2, [sp, #0]
 800c296:	0021      	movs	r1, r4
 800c298:	003a      	movs	r2, r7
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <_svfiprintf_r+0x1fc>)
 800c29c:	9803      	ldr	r0, [sp, #12]
 800c29e:	f7fd fdc9 	bl	8009e34 <_printf_float>
 800c2a2:	9004      	str	r0, [sp, #16]
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	d1d3      	bne.n	800c252 <_svfiprintf_r+0x172>
 800c2aa:	89bb      	ldrh	r3, [r7, #12]
 800c2ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2ae:	065b      	lsls	r3, r3, #25
 800c2b0:	d400      	bmi.n	800c2b4 <_svfiprintf_r+0x1d4>
 800c2b2:	e72c      	b.n	800c10e <_svfiprintf_r+0x2e>
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	4240      	negs	r0, r0
 800c2b8:	e729      	b.n	800c10e <_svfiprintf_r+0x2e>
 800c2ba:	aa07      	add	r2, sp, #28
 800c2bc:	9200      	str	r2, [sp, #0]
 800c2be:	0021      	movs	r1, r4
 800c2c0:	003a      	movs	r2, r7
 800c2c2:	4b06      	ldr	r3, [pc, #24]	; (800c2dc <_svfiprintf_r+0x1fc>)
 800c2c4:	9803      	ldr	r0, [sp, #12]
 800c2c6:	f7fe f87b 	bl	800a3c0 <_printf_i>
 800c2ca:	e7ea      	b.n	800c2a2 <_svfiprintf_r+0x1c2>
 800c2cc:	0800fda4 	.word	0x0800fda4
 800c2d0:	0800fdaa 	.word	0x0800fdaa
 800c2d4:	0800fdae 	.word	0x0800fdae
 800c2d8:	08009e35 	.word	0x08009e35
 800c2dc:	0800c01d 	.word	0x0800c01d

0800c2e0 <__sflush_r>:
 800c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e2:	898b      	ldrh	r3, [r1, #12]
 800c2e4:	0005      	movs	r5, r0
 800c2e6:	000c      	movs	r4, r1
 800c2e8:	071a      	lsls	r2, r3, #28
 800c2ea:	d45c      	bmi.n	800c3a6 <__sflush_r+0xc6>
 800c2ec:	684a      	ldr	r2, [r1, #4]
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	dc04      	bgt.n	800c2fc <__sflush_r+0x1c>
 800c2f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c2f4:	2a00      	cmp	r2, #0
 800c2f6:	dc01      	bgt.n	800c2fc <__sflush_r+0x1c>
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c2fe:	2f00      	cmp	r7, #0
 800c300:	d0fa      	beq.n	800c2f8 <__sflush_r+0x18>
 800c302:	2200      	movs	r2, #0
 800c304:	2080      	movs	r0, #128	; 0x80
 800c306:	682e      	ldr	r6, [r5, #0]
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	001a      	movs	r2, r3
 800c30c:	0140      	lsls	r0, r0, #5
 800c30e:	6a21      	ldr	r1, [r4, #32]
 800c310:	4002      	ands	r2, r0
 800c312:	4203      	tst	r3, r0
 800c314:	d034      	beq.n	800c380 <__sflush_r+0xa0>
 800c316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	075b      	lsls	r3, r3, #29
 800c31c:	d506      	bpl.n	800c32c <__sflush_r+0x4c>
 800c31e:	6863      	ldr	r3, [r4, #4]
 800c320:	1ac0      	subs	r0, r0, r3
 800c322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <__sflush_r+0x4c>
 800c328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c32a:	1ac0      	subs	r0, r0, r3
 800c32c:	0002      	movs	r2, r0
 800c32e:	2300      	movs	r3, #0
 800c330:	0028      	movs	r0, r5
 800c332:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c334:	6a21      	ldr	r1, [r4, #32]
 800c336:	47b8      	blx	r7
 800c338:	89a2      	ldrh	r2, [r4, #12]
 800c33a:	1c43      	adds	r3, r0, #1
 800c33c:	d106      	bne.n	800c34c <__sflush_r+0x6c>
 800c33e:	6829      	ldr	r1, [r5, #0]
 800c340:	291d      	cmp	r1, #29
 800c342:	d82c      	bhi.n	800c39e <__sflush_r+0xbe>
 800c344:	4b2a      	ldr	r3, [pc, #168]	; (800c3f0 <__sflush_r+0x110>)
 800c346:	410b      	asrs	r3, r1
 800c348:	07db      	lsls	r3, r3, #31
 800c34a:	d428      	bmi.n	800c39e <__sflush_r+0xbe>
 800c34c:	2300      	movs	r3, #0
 800c34e:	6063      	str	r3, [r4, #4]
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	6023      	str	r3, [r4, #0]
 800c354:	04d2      	lsls	r2, r2, #19
 800c356:	d505      	bpl.n	800c364 <__sflush_r+0x84>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <__sflush_r+0x82>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d100      	bne.n	800c364 <__sflush_r+0x84>
 800c362:	6560      	str	r0, [r4, #84]	; 0x54
 800c364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c366:	602e      	str	r6, [r5, #0]
 800c368:	2900      	cmp	r1, #0
 800c36a:	d0c5      	beq.n	800c2f8 <__sflush_r+0x18>
 800c36c:	0023      	movs	r3, r4
 800c36e:	3344      	adds	r3, #68	; 0x44
 800c370:	4299      	cmp	r1, r3
 800c372:	d002      	beq.n	800c37a <__sflush_r+0x9a>
 800c374:	0028      	movs	r0, r5
 800c376:	f7ff f9af 	bl	800b6d8 <_free_r>
 800c37a:	2000      	movs	r0, #0
 800c37c:	6360      	str	r0, [r4, #52]	; 0x34
 800c37e:	e7bc      	b.n	800c2fa <__sflush_r+0x1a>
 800c380:	2301      	movs	r3, #1
 800c382:	0028      	movs	r0, r5
 800c384:	47b8      	blx	r7
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	d1c6      	bne.n	800c318 <__sflush_r+0x38>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d0c3      	beq.n	800c318 <__sflush_r+0x38>
 800c390:	2b1d      	cmp	r3, #29
 800c392:	d001      	beq.n	800c398 <__sflush_r+0xb8>
 800c394:	2b16      	cmp	r3, #22
 800c396:	d101      	bne.n	800c39c <__sflush_r+0xbc>
 800c398:	602e      	str	r6, [r5, #0]
 800c39a:	e7ad      	b.n	800c2f8 <__sflush_r+0x18>
 800c39c:	89a2      	ldrh	r2, [r4, #12]
 800c39e:	2340      	movs	r3, #64	; 0x40
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	e7a9      	b.n	800c2fa <__sflush_r+0x1a>
 800c3a6:	690e      	ldr	r6, [r1, #16]
 800c3a8:	2e00      	cmp	r6, #0
 800c3aa:	d0a5      	beq.n	800c2f8 <__sflush_r+0x18>
 800c3ac:	680f      	ldr	r7, [r1, #0]
 800c3ae:	600e      	str	r6, [r1, #0]
 800c3b0:	1bba      	subs	r2, r7, r6
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	079b      	lsls	r3, r3, #30
 800c3b8:	d100      	bne.n	800c3bc <__sflush_r+0xdc>
 800c3ba:	694a      	ldr	r2, [r1, #20]
 800c3bc:	60a2      	str	r2, [r4, #8]
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	dd99      	ble.n	800c2f8 <__sflush_r+0x18>
 800c3c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3c6:	0032      	movs	r2, r6
 800c3c8:	001f      	movs	r7, r3
 800c3ca:	0028      	movs	r0, r5
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	6a21      	ldr	r1, [r4, #32]
 800c3d0:	47b8      	blx	r7
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dc06      	bgt.n	800c3e4 <__sflush_r+0x104>
 800c3d6:	2340      	movs	r3, #64	; 0x40
 800c3d8:	2001      	movs	r0, #1
 800c3da:	89a2      	ldrh	r2, [r4, #12]
 800c3dc:	4240      	negs	r0, r0
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	e78a      	b.n	800c2fa <__sflush_r+0x1a>
 800c3e4:	9b01      	ldr	r3, [sp, #4]
 800c3e6:	1836      	adds	r6, r6, r0
 800c3e8:	1a1b      	subs	r3, r3, r0
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	e7e7      	b.n	800c3be <__sflush_r+0xde>
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	dfbffffe 	.word	0xdfbffffe

0800c3f4 <_fflush_r>:
 800c3f4:	690b      	ldr	r3, [r1, #16]
 800c3f6:	b570      	push	{r4, r5, r6, lr}
 800c3f8:	0005      	movs	r5, r0
 800c3fa:	000c      	movs	r4, r1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <_fflush_r+0x12>
 800c400:	2500      	movs	r5, #0
 800c402:	0028      	movs	r0, r5
 800c404:	bd70      	pop	{r4, r5, r6, pc}
 800c406:	2800      	cmp	r0, #0
 800c408:	d004      	beq.n	800c414 <_fflush_r+0x20>
 800c40a:	6a03      	ldr	r3, [r0, #32]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <_fflush_r+0x20>
 800c410:	f7fe f976 	bl	800a700 <__sinit>
 800c414:	220c      	movs	r2, #12
 800c416:	5ea3      	ldrsh	r3, [r4, r2]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0f1      	beq.n	800c400 <_fflush_r+0xc>
 800c41c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c41e:	07d2      	lsls	r2, r2, #31
 800c420:	d404      	bmi.n	800c42c <_fflush_r+0x38>
 800c422:	059b      	lsls	r3, r3, #22
 800c424:	d402      	bmi.n	800c42c <_fflush_r+0x38>
 800c426:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c428:	f7fe faa3 	bl	800a972 <__retarget_lock_acquire_recursive>
 800c42c:	0028      	movs	r0, r5
 800c42e:	0021      	movs	r1, r4
 800c430:	f7ff ff56 	bl	800c2e0 <__sflush_r>
 800c434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c436:	0005      	movs	r5, r0
 800c438:	07db      	lsls	r3, r3, #31
 800c43a:	d4e2      	bmi.n	800c402 <_fflush_r+0xe>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	059b      	lsls	r3, r3, #22
 800c440:	d4df      	bmi.n	800c402 <_fflush_r+0xe>
 800c442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c444:	f7fe fa96 	bl	800a974 <__retarget_lock_release_recursive>
 800c448:	e7db      	b.n	800c402 <_fflush_r+0xe>
	...

0800c44c <_sbrk_r>:
 800c44c:	2300      	movs	r3, #0
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	4d06      	ldr	r5, [pc, #24]	; (800c46c <_sbrk_r+0x20>)
 800c452:	0004      	movs	r4, r0
 800c454:	0008      	movs	r0, r1
 800c456:	602b      	str	r3, [r5, #0]
 800c458:	f7f8 fb7e 	bl	8004b58 <_sbrk>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d103      	bne.n	800c468 <_sbrk_r+0x1c>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d000      	beq.n	800c468 <_sbrk_r+0x1c>
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	bd70      	pop	{r4, r5, r6, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	200009b4 	.word	0x200009b4

0800c470 <__assert_func>:
 800c470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c472:	0014      	movs	r4, r2
 800c474:	001a      	movs	r2, r3
 800c476:	4b09      	ldr	r3, [pc, #36]	; (800c49c <__assert_func+0x2c>)
 800c478:	0005      	movs	r5, r0
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	000e      	movs	r6, r1
 800c47e:	68d8      	ldr	r0, [r3, #12]
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <__assert_func+0x30>)
 800c482:	2c00      	cmp	r4, #0
 800c484:	d101      	bne.n	800c48a <__assert_func+0x1a>
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <__assert_func+0x34>)
 800c488:	001c      	movs	r4, r3
 800c48a:	4907      	ldr	r1, [pc, #28]	; (800c4a8 <__assert_func+0x38>)
 800c48c:	9301      	str	r3, [sp, #4]
 800c48e:	9402      	str	r4, [sp, #8]
 800c490:	002b      	movs	r3, r5
 800c492:	9600      	str	r6, [sp, #0]
 800c494:	f000 f886 	bl	800c5a4 <fiprintf>
 800c498:	f000 f894 	bl	800c5c4 <abort>
 800c49c:	2000009c 	.word	0x2000009c
 800c4a0:	0800fdbf 	.word	0x0800fdbf
 800c4a4:	0800fdfa 	.word	0x0800fdfa
 800c4a8:	0800fdcc 	.word	0x0800fdcc

0800c4ac <_calloc_r>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	0c0b      	lsrs	r3, r1, #16
 800c4b0:	0c15      	lsrs	r5, r2, #16
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d11e      	bne.n	800c4f4 <_calloc_r+0x48>
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	d10c      	bne.n	800c4d4 <_calloc_r+0x28>
 800c4ba:	b289      	uxth	r1, r1
 800c4bc:	b294      	uxth	r4, r2
 800c4be:	434c      	muls	r4, r1
 800c4c0:	0021      	movs	r1, r4
 800c4c2:	f7ff f97f 	bl	800b7c4 <_malloc_r>
 800c4c6:	1e05      	subs	r5, r0, #0
 800c4c8:	d01b      	beq.n	800c502 <_calloc_r+0x56>
 800c4ca:	0022      	movs	r2, r4
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	f7fe f9ca 	bl	800a866 <memset>
 800c4d2:	e016      	b.n	800c502 <_calloc_r+0x56>
 800c4d4:	1c2b      	adds	r3, r5, #0
 800c4d6:	1c0c      	adds	r4, r1, #0
 800c4d8:	b289      	uxth	r1, r1
 800c4da:	b292      	uxth	r2, r2
 800c4dc:	434a      	muls	r2, r1
 800c4de:	b2a1      	uxth	r1, r4
 800c4e0:	b29c      	uxth	r4, r3
 800c4e2:	434c      	muls	r4, r1
 800c4e4:	0c13      	lsrs	r3, r2, #16
 800c4e6:	18e4      	adds	r4, r4, r3
 800c4e8:	0c23      	lsrs	r3, r4, #16
 800c4ea:	d107      	bne.n	800c4fc <_calloc_r+0x50>
 800c4ec:	0424      	lsls	r4, r4, #16
 800c4ee:	b292      	uxth	r2, r2
 800c4f0:	4314      	orrs	r4, r2
 800c4f2:	e7e5      	b.n	800c4c0 <_calloc_r+0x14>
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	d101      	bne.n	800c4fc <_calloc_r+0x50>
 800c4f8:	1c14      	adds	r4, r2, #0
 800c4fa:	e7ed      	b.n	800c4d8 <_calloc_r+0x2c>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	2500      	movs	r5, #0
 800c500:	6003      	str	r3, [r0, #0]
 800c502:	0028      	movs	r0, r5
 800c504:	bd70      	pop	{r4, r5, r6, pc}

0800c506 <__ascii_mbtowc>:
 800c506:	b082      	sub	sp, #8
 800c508:	2900      	cmp	r1, #0
 800c50a:	d100      	bne.n	800c50e <__ascii_mbtowc+0x8>
 800c50c:	a901      	add	r1, sp, #4
 800c50e:	1e10      	subs	r0, r2, #0
 800c510:	d006      	beq.n	800c520 <__ascii_mbtowc+0x1a>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <__ascii_mbtowc+0x1e>
 800c516:	7813      	ldrb	r3, [r2, #0]
 800c518:	600b      	str	r3, [r1, #0]
 800c51a:	7810      	ldrb	r0, [r2, #0]
 800c51c:	1e43      	subs	r3, r0, #1
 800c51e:	4198      	sbcs	r0, r3
 800c520:	b002      	add	sp, #8
 800c522:	4770      	bx	lr
 800c524:	2002      	movs	r0, #2
 800c526:	4240      	negs	r0, r0
 800c528:	e7fa      	b.n	800c520 <__ascii_mbtowc+0x1a>

0800c52a <_realloc_r>:
 800c52a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c52c:	0007      	movs	r7, r0
 800c52e:	000e      	movs	r6, r1
 800c530:	0014      	movs	r4, r2
 800c532:	2900      	cmp	r1, #0
 800c534:	d105      	bne.n	800c542 <_realloc_r+0x18>
 800c536:	0011      	movs	r1, r2
 800c538:	f7ff f944 	bl	800b7c4 <_malloc_r>
 800c53c:	0005      	movs	r5, r0
 800c53e:	0028      	movs	r0, r5
 800c540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c542:	2a00      	cmp	r2, #0
 800c544:	d103      	bne.n	800c54e <_realloc_r+0x24>
 800c546:	f7ff f8c7 	bl	800b6d8 <_free_r>
 800c54a:	0025      	movs	r5, r4
 800c54c:	e7f7      	b.n	800c53e <_realloc_r+0x14>
 800c54e:	f000 f840 	bl	800c5d2 <_malloc_usable_size_r>
 800c552:	9001      	str	r0, [sp, #4]
 800c554:	4284      	cmp	r4, r0
 800c556:	d803      	bhi.n	800c560 <_realloc_r+0x36>
 800c558:	0035      	movs	r5, r6
 800c55a:	0843      	lsrs	r3, r0, #1
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d3ee      	bcc.n	800c53e <_realloc_r+0x14>
 800c560:	0021      	movs	r1, r4
 800c562:	0038      	movs	r0, r7
 800c564:	f7ff f92e 	bl	800b7c4 <_malloc_r>
 800c568:	1e05      	subs	r5, r0, #0
 800c56a:	d0e8      	beq.n	800c53e <_realloc_r+0x14>
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	0022      	movs	r2, r4
 800c570:	429c      	cmp	r4, r3
 800c572:	d900      	bls.n	800c576 <_realloc_r+0x4c>
 800c574:	001a      	movs	r2, r3
 800c576:	0031      	movs	r1, r6
 800c578:	0028      	movs	r0, r5
 800c57a:	f7fe fa07 	bl	800a98c <memcpy>
 800c57e:	0031      	movs	r1, r6
 800c580:	0038      	movs	r0, r7
 800c582:	f7ff f8a9 	bl	800b6d8 <_free_r>
 800c586:	e7da      	b.n	800c53e <_realloc_r+0x14>

0800c588 <__ascii_wctomb>:
 800c588:	0003      	movs	r3, r0
 800c58a:	1e08      	subs	r0, r1, #0
 800c58c:	d005      	beq.n	800c59a <__ascii_wctomb+0x12>
 800c58e:	2aff      	cmp	r2, #255	; 0xff
 800c590:	d904      	bls.n	800c59c <__ascii_wctomb+0x14>
 800c592:	228a      	movs	r2, #138	; 0x8a
 800c594:	2001      	movs	r0, #1
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	4240      	negs	r0, r0
 800c59a:	4770      	bx	lr
 800c59c:	2001      	movs	r0, #1
 800c59e:	700a      	strb	r2, [r1, #0]
 800c5a0:	e7fb      	b.n	800c59a <__ascii_wctomb+0x12>
	...

0800c5a4 <fiprintf>:
 800c5a4:	b40e      	push	{r1, r2, r3}
 800c5a6:	b517      	push	{r0, r1, r2, r4, lr}
 800c5a8:	4c05      	ldr	r4, [pc, #20]	; (800c5c0 <fiprintf+0x1c>)
 800c5aa:	ab05      	add	r3, sp, #20
 800c5ac:	cb04      	ldmia	r3!, {r2}
 800c5ae:	0001      	movs	r1, r0
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	9301      	str	r3, [sp, #4]
 800c5b4:	f000 f83c 	bl	800c630 <_vfiprintf_r>
 800c5b8:	bc1e      	pop	{r1, r2, r3, r4}
 800c5ba:	bc08      	pop	{r3}
 800c5bc:	b003      	add	sp, #12
 800c5be:	4718      	bx	r3
 800c5c0:	2000009c 	.word	0x2000009c

0800c5c4 <abort>:
 800c5c4:	2006      	movs	r0, #6
 800c5c6:	b510      	push	{r4, lr}
 800c5c8:	f000 fa1e 	bl	800ca08 <raise>
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f7f8 fa51 	bl	8004a74 <_exit>

0800c5d2 <_malloc_usable_size_r>:
 800c5d2:	1f0b      	subs	r3, r1, #4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	1f18      	subs	r0, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	da01      	bge.n	800c5e0 <_malloc_usable_size_r+0xe>
 800c5dc:	580b      	ldr	r3, [r1, r0]
 800c5de:	18c0      	adds	r0, r0, r3
 800c5e0:	4770      	bx	lr

0800c5e2 <__sfputc_r>:
 800c5e2:	6893      	ldr	r3, [r2, #8]
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	6093      	str	r3, [r2, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	da04      	bge.n	800c5f8 <__sfputc_r+0x16>
 800c5ee:	6994      	ldr	r4, [r2, #24]
 800c5f0:	42a3      	cmp	r3, r4
 800c5f2:	db07      	blt.n	800c604 <__sfputc_r+0x22>
 800c5f4:	290a      	cmp	r1, #10
 800c5f6:	d005      	beq.n	800c604 <__sfputc_r+0x22>
 800c5f8:	6813      	ldr	r3, [r2, #0]
 800c5fa:	1c58      	adds	r0, r3, #1
 800c5fc:	6010      	str	r0, [r2, #0]
 800c5fe:	7019      	strb	r1, [r3, #0]
 800c600:	0008      	movs	r0, r1
 800c602:	bd10      	pop	{r4, pc}
 800c604:	f000 f930 	bl	800c868 <__swbuf_r>
 800c608:	0001      	movs	r1, r0
 800c60a:	e7f9      	b.n	800c600 <__sfputc_r+0x1e>

0800c60c <__sfputs_r>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	0006      	movs	r6, r0
 800c610:	000f      	movs	r7, r1
 800c612:	0014      	movs	r4, r2
 800c614:	18d5      	adds	r5, r2, r3
 800c616:	42ac      	cmp	r4, r5
 800c618:	d101      	bne.n	800c61e <__sfputs_r+0x12>
 800c61a:	2000      	movs	r0, #0
 800c61c:	e007      	b.n	800c62e <__sfputs_r+0x22>
 800c61e:	7821      	ldrb	r1, [r4, #0]
 800c620:	003a      	movs	r2, r7
 800c622:	0030      	movs	r0, r6
 800c624:	f7ff ffdd 	bl	800c5e2 <__sfputc_r>
 800c628:	3401      	adds	r4, #1
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	d1f3      	bne.n	800c616 <__sfputs_r+0xa>
 800c62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c630 <_vfiprintf_r>:
 800c630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c632:	b0a1      	sub	sp, #132	; 0x84
 800c634:	000f      	movs	r7, r1
 800c636:	0015      	movs	r5, r2
 800c638:	001e      	movs	r6, r3
 800c63a:	9003      	str	r0, [sp, #12]
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d004      	beq.n	800c64a <_vfiprintf_r+0x1a>
 800c640:	6a03      	ldr	r3, [r0, #32]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <_vfiprintf_r+0x1a>
 800c646:	f7fe f85b 	bl	800a700 <__sinit>
 800c64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c64c:	07db      	lsls	r3, r3, #31
 800c64e:	d405      	bmi.n	800c65c <_vfiprintf_r+0x2c>
 800c650:	89bb      	ldrh	r3, [r7, #12]
 800c652:	059b      	lsls	r3, r3, #22
 800c654:	d402      	bmi.n	800c65c <_vfiprintf_r+0x2c>
 800c656:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c658:	f7fe f98b 	bl	800a972 <__retarget_lock_acquire_recursive>
 800c65c:	89bb      	ldrh	r3, [r7, #12]
 800c65e:	071b      	lsls	r3, r3, #28
 800c660:	d502      	bpl.n	800c668 <_vfiprintf_r+0x38>
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d113      	bne.n	800c690 <_vfiprintf_r+0x60>
 800c668:	0039      	movs	r1, r7
 800c66a:	9803      	ldr	r0, [sp, #12]
 800c66c:	f000 f93e 	bl	800c8ec <__swsetup_r>
 800c670:	2800      	cmp	r0, #0
 800c672:	d00d      	beq.n	800c690 <_vfiprintf_r+0x60>
 800c674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c676:	07db      	lsls	r3, r3, #31
 800c678:	d503      	bpl.n	800c682 <_vfiprintf_r+0x52>
 800c67a:	2001      	movs	r0, #1
 800c67c:	4240      	negs	r0, r0
 800c67e:	b021      	add	sp, #132	; 0x84
 800c680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c682:	89bb      	ldrh	r3, [r7, #12]
 800c684:	059b      	lsls	r3, r3, #22
 800c686:	d4f8      	bmi.n	800c67a <_vfiprintf_r+0x4a>
 800c688:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c68a:	f7fe f973 	bl	800a974 <__retarget_lock_release_recursive>
 800c68e:	e7f4      	b.n	800c67a <_vfiprintf_r+0x4a>
 800c690:	2300      	movs	r3, #0
 800c692:	ac08      	add	r4, sp, #32
 800c694:	6163      	str	r3, [r4, #20]
 800c696:	3320      	adds	r3, #32
 800c698:	7663      	strb	r3, [r4, #25]
 800c69a:	3310      	adds	r3, #16
 800c69c:	76a3      	strb	r3, [r4, #26]
 800c69e:	9607      	str	r6, [sp, #28]
 800c6a0:	002e      	movs	r6, r5
 800c6a2:	7833      	ldrb	r3, [r6, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <_vfiprintf_r+0x7c>
 800c6a8:	2b25      	cmp	r3, #37	; 0x25
 800c6aa:	d148      	bne.n	800c73e <_vfiprintf_r+0x10e>
 800c6ac:	1b73      	subs	r3, r6, r5
 800c6ae:	9305      	str	r3, [sp, #20]
 800c6b0:	42ae      	cmp	r6, r5
 800c6b2:	d00b      	beq.n	800c6cc <_vfiprintf_r+0x9c>
 800c6b4:	002a      	movs	r2, r5
 800c6b6:	0039      	movs	r1, r7
 800c6b8:	9803      	ldr	r0, [sp, #12]
 800c6ba:	f7ff ffa7 	bl	800c60c <__sfputs_r>
 800c6be:	3001      	adds	r0, #1
 800c6c0:	d100      	bne.n	800c6c4 <_vfiprintf_r+0x94>
 800c6c2:	e0af      	b.n	800c824 <_vfiprintf_r+0x1f4>
 800c6c4:	6963      	ldr	r3, [r4, #20]
 800c6c6:	9a05      	ldr	r2, [sp, #20]
 800c6c8:	189b      	adds	r3, r3, r2
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	7833      	ldrb	r3, [r6, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d100      	bne.n	800c6d4 <_vfiprintf_r+0xa4>
 800c6d2:	e0a7      	b.n	800c824 <_vfiprintf_r+0x1f4>
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	4252      	negs	r2, r2
 800c6da:	6062      	str	r2, [r4, #4]
 800c6dc:	a904      	add	r1, sp, #16
 800c6de:	3254      	adds	r2, #84	; 0x54
 800c6e0:	1852      	adds	r2, r2, r1
 800c6e2:	1c75      	adds	r5, r6, #1
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	60e3      	str	r3, [r4, #12]
 800c6e8:	60a3      	str	r3, [r4, #8]
 800c6ea:	7013      	strb	r3, [r2, #0]
 800c6ec:	65a3      	str	r3, [r4, #88]	; 0x58
 800c6ee:	4b59      	ldr	r3, [pc, #356]	; (800c854 <_vfiprintf_r+0x224>)
 800c6f0:	2205      	movs	r2, #5
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	7829      	ldrb	r1, [r5, #0]
 800c6f6:	9305      	str	r3, [sp, #20]
 800c6f8:	f7fe f93d 	bl	800a976 <memchr>
 800c6fc:	1c6e      	adds	r6, r5, #1
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d11f      	bne.n	800c742 <_vfiprintf_r+0x112>
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	06d3      	lsls	r3, r2, #27
 800c706:	d504      	bpl.n	800c712 <_vfiprintf_r+0xe2>
 800c708:	2353      	movs	r3, #83	; 0x53
 800c70a:	a904      	add	r1, sp, #16
 800c70c:	185b      	adds	r3, r3, r1
 800c70e:	2120      	movs	r1, #32
 800c710:	7019      	strb	r1, [r3, #0]
 800c712:	0713      	lsls	r3, r2, #28
 800c714:	d504      	bpl.n	800c720 <_vfiprintf_r+0xf0>
 800c716:	2353      	movs	r3, #83	; 0x53
 800c718:	a904      	add	r1, sp, #16
 800c71a:	185b      	adds	r3, r3, r1
 800c71c:	212b      	movs	r1, #43	; 0x2b
 800c71e:	7019      	strb	r1, [r3, #0]
 800c720:	782b      	ldrb	r3, [r5, #0]
 800c722:	2b2a      	cmp	r3, #42	; 0x2a
 800c724:	d016      	beq.n	800c754 <_vfiprintf_r+0x124>
 800c726:	002e      	movs	r6, r5
 800c728:	2100      	movs	r1, #0
 800c72a:	200a      	movs	r0, #10
 800c72c:	68e3      	ldr	r3, [r4, #12]
 800c72e:	7832      	ldrb	r2, [r6, #0]
 800c730:	1c75      	adds	r5, r6, #1
 800c732:	3a30      	subs	r2, #48	; 0x30
 800c734:	2a09      	cmp	r2, #9
 800c736:	d94e      	bls.n	800c7d6 <_vfiprintf_r+0x1a6>
 800c738:	2900      	cmp	r1, #0
 800c73a:	d111      	bne.n	800c760 <_vfiprintf_r+0x130>
 800c73c:	e017      	b.n	800c76e <_vfiprintf_r+0x13e>
 800c73e:	3601      	adds	r6, #1
 800c740:	e7af      	b.n	800c6a2 <_vfiprintf_r+0x72>
 800c742:	9b05      	ldr	r3, [sp, #20]
 800c744:	6822      	ldr	r2, [r4, #0]
 800c746:	1ac0      	subs	r0, r0, r3
 800c748:	2301      	movs	r3, #1
 800c74a:	4083      	lsls	r3, r0
 800c74c:	4313      	orrs	r3, r2
 800c74e:	0035      	movs	r5, r6
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	e7cc      	b.n	800c6ee <_vfiprintf_r+0xbe>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	1d19      	adds	r1, r3, #4
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	9107      	str	r1, [sp, #28]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	db01      	blt.n	800c764 <_vfiprintf_r+0x134>
 800c760:	930b      	str	r3, [sp, #44]	; 0x2c
 800c762:	e004      	b.n	800c76e <_vfiprintf_r+0x13e>
 800c764:	425b      	negs	r3, r3
 800c766:	60e3      	str	r3, [r4, #12]
 800c768:	2302      	movs	r3, #2
 800c76a:	4313      	orrs	r3, r2
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	7833      	ldrb	r3, [r6, #0]
 800c770:	2b2e      	cmp	r3, #46	; 0x2e
 800c772:	d10a      	bne.n	800c78a <_vfiprintf_r+0x15a>
 800c774:	7873      	ldrb	r3, [r6, #1]
 800c776:	2b2a      	cmp	r3, #42	; 0x2a
 800c778:	d135      	bne.n	800c7e6 <_vfiprintf_r+0x1b6>
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	3602      	adds	r6, #2
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	9207      	str	r2, [sp, #28]
 800c784:	2b00      	cmp	r3, #0
 800c786:	db2b      	blt.n	800c7e0 <_vfiprintf_r+0x1b0>
 800c788:	9309      	str	r3, [sp, #36]	; 0x24
 800c78a:	4d33      	ldr	r5, [pc, #204]	; (800c858 <_vfiprintf_r+0x228>)
 800c78c:	2203      	movs	r2, #3
 800c78e:	0028      	movs	r0, r5
 800c790:	7831      	ldrb	r1, [r6, #0]
 800c792:	f7fe f8f0 	bl	800a976 <memchr>
 800c796:	2800      	cmp	r0, #0
 800c798:	d006      	beq.n	800c7a8 <_vfiprintf_r+0x178>
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	1b40      	subs	r0, r0, r5
 800c79e:	4083      	lsls	r3, r0
 800c7a0:	6822      	ldr	r2, [r4, #0]
 800c7a2:	3601      	adds	r6, #1
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	7831      	ldrb	r1, [r6, #0]
 800c7aa:	2206      	movs	r2, #6
 800c7ac:	482b      	ldr	r0, [pc, #172]	; (800c85c <_vfiprintf_r+0x22c>)
 800c7ae:	1c75      	adds	r5, r6, #1
 800c7b0:	7621      	strb	r1, [r4, #24]
 800c7b2:	f7fe f8e0 	bl	800a976 <memchr>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d043      	beq.n	800c842 <_vfiprintf_r+0x212>
 800c7ba:	4b29      	ldr	r3, [pc, #164]	; (800c860 <_vfiprintf_r+0x230>)
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d125      	bne.n	800c80c <_vfiprintf_r+0x1dc>
 800c7c0:	2207      	movs	r2, #7
 800c7c2:	9b07      	ldr	r3, [sp, #28]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	4393      	bics	r3, r2
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	6963      	ldr	r3, [r4, #20]
 800c7ce:	9a04      	ldr	r2, [sp, #16]
 800c7d0:	189b      	adds	r3, r3, r2
 800c7d2:	6163      	str	r3, [r4, #20]
 800c7d4:	e764      	b.n	800c6a0 <_vfiprintf_r+0x70>
 800c7d6:	4343      	muls	r3, r0
 800c7d8:	002e      	movs	r6, r5
 800c7da:	2101      	movs	r1, #1
 800c7dc:	189b      	adds	r3, r3, r2
 800c7de:	e7a6      	b.n	800c72e <_vfiprintf_r+0xfe>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	425b      	negs	r3, r3
 800c7e4:	e7d0      	b.n	800c788 <_vfiprintf_r+0x158>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	200a      	movs	r0, #10
 800c7ea:	001a      	movs	r2, r3
 800c7ec:	3601      	adds	r6, #1
 800c7ee:	6063      	str	r3, [r4, #4]
 800c7f0:	7831      	ldrb	r1, [r6, #0]
 800c7f2:	1c75      	adds	r5, r6, #1
 800c7f4:	3930      	subs	r1, #48	; 0x30
 800c7f6:	2909      	cmp	r1, #9
 800c7f8:	d903      	bls.n	800c802 <_vfiprintf_r+0x1d2>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0c5      	beq.n	800c78a <_vfiprintf_r+0x15a>
 800c7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c800:	e7c3      	b.n	800c78a <_vfiprintf_r+0x15a>
 800c802:	4342      	muls	r2, r0
 800c804:	002e      	movs	r6, r5
 800c806:	2301      	movs	r3, #1
 800c808:	1852      	adds	r2, r2, r1
 800c80a:	e7f1      	b.n	800c7f0 <_vfiprintf_r+0x1c0>
 800c80c:	aa07      	add	r2, sp, #28
 800c80e:	9200      	str	r2, [sp, #0]
 800c810:	0021      	movs	r1, r4
 800c812:	003a      	movs	r2, r7
 800c814:	4b13      	ldr	r3, [pc, #76]	; (800c864 <_vfiprintf_r+0x234>)
 800c816:	9803      	ldr	r0, [sp, #12]
 800c818:	f7fd fb0c 	bl	8009e34 <_printf_float>
 800c81c:	9004      	str	r0, [sp, #16]
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	3301      	adds	r3, #1
 800c822:	d1d3      	bne.n	800c7cc <_vfiprintf_r+0x19c>
 800c824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c826:	07db      	lsls	r3, r3, #31
 800c828:	d405      	bmi.n	800c836 <_vfiprintf_r+0x206>
 800c82a:	89bb      	ldrh	r3, [r7, #12]
 800c82c:	059b      	lsls	r3, r3, #22
 800c82e:	d402      	bmi.n	800c836 <_vfiprintf_r+0x206>
 800c830:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c832:	f7fe f89f 	bl	800a974 <__retarget_lock_release_recursive>
 800c836:	89bb      	ldrh	r3, [r7, #12]
 800c838:	065b      	lsls	r3, r3, #25
 800c83a:	d500      	bpl.n	800c83e <_vfiprintf_r+0x20e>
 800c83c:	e71d      	b.n	800c67a <_vfiprintf_r+0x4a>
 800c83e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c840:	e71d      	b.n	800c67e <_vfiprintf_r+0x4e>
 800c842:	aa07      	add	r2, sp, #28
 800c844:	9200      	str	r2, [sp, #0]
 800c846:	0021      	movs	r1, r4
 800c848:	003a      	movs	r2, r7
 800c84a:	4b06      	ldr	r3, [pc, #24]	; (800c864 <_vfiprintf_r+0x234>)
 800c84c:	9803      	ldr	r0, [sp, #12]
 800c84e:	f7fd fdb7 	bl	800a3c0 <_printf_i>
 800c852:	e7e3      	b.n	800c81c <_vfiprintf_r+0x1ec>
 800c854:	0800fda4 	.word	0x0800fda4
 800c858:	0800fdaa 	.word	0x0800fdaa
 800c85c:	0800fdae 	.word	0x0800fdae
 800c860:	08009e35 	.word	0x08009e35
 800c864:	0800c60d 	.word	0x0800c60d

0800c868 <__swbuf_r>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	0006      	movs	r6, r0
 800c86c:	000d      	movs	r5, r1
 800c86e:	0014      	movs	r4, r2
 800c870:	2800      	cmp	r0, #0
 800c872:	d004      	beq.n	800c87e <__swbuf_r+0x16>
 800c874:	6a03      	ldr	r3, [r0, #32]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <__swbuf_r+0x16>
 800c87a:	f7fd ff41 	bl	800a700 <__sinit>
 800c87e:	69a3      	ldr	r3, [r4, #24]
 800c880:	60a3      	str	r3, [r4, #8]
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	071b      	lsls	r3, r3, #28
 800c886:	d528      	bpl.n	800c8da <__swbuf_r+0x72>
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d025      	beq.n	800c8da <__swbuf_r+0x72>
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	6820      	ldr	r0, [r4, #0]
 800c892:	b2ef      	uxtb	r7, r5
 800c894:	1ac0      	subs	r0, r0, r3
 800c896:	6963      	ldr	r3, [r4, #20]
 800c898:	b2ed      	uxtb	r5, r5
 800c89a:	4283      	cmp	r3, r0
 800c89c:	dc05      	bgt.n	800c8aa <__swbuf_r+0x42>
 800c89e:	0021      	movs	r1, r4
 800c8a0:	0030      	movs	r0, r6
 800c8a2:	f7ff fda7 	bl	800c3f4 <_fflush_r>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d11d      	bne.n	800c8e6 <__swbuf_r+0x7e>
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	701f      	strb	r7, [r3, #0]
 800c8ba:	6963      	ldr	r3, [r4, #20]
 800c8bc:	4283      	cmp	r3, r0
 800c8be:	d004      	beq.n	800c8ca <__swbuf_r+0x62>
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	07db      	lsls	r3, r3, #31
 800c8c4:	d507      	bpl.n	800c8d6 <__swbuf_r+0x6e>
 800c8c6:	2d0a      	cmp	r5, #10
 800c8c8:	d105      	bne.n	800c8d6 <__swbuf_r+0x6e>
 800c8ca:	0021      	movs	r1, r4
 800c8cc:	0030      	movs	r0, r6
 800c8ce:	f7ff fd91 	bl	800c3f4 <_fflush_r>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d107      	bne.n	800c8e6 <__swbuf_r+0x7e>
 800c8d6:	0028      	movs	r0, r5
 800c8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8da:	0021      	movs	r1, r4
 800c8dc:	0030      	movs	r0, r6
 800c8de:	f000 f805 	bl	800c8ec <__swsetup_r>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d0d3      	beq.n	800c88e <__swbuf_r+0x26>
 800c8e6:	2501      	movs	r5, #1
 800c8e8:	426d      	negs	r5, r5
 800c8ea:	e7f4      	b.n	800c8d6 <__swbuf_r+0x6e>

0800c8ec <__swsetup_r>:
 800c8ec:	4b30      	ldr	r3, [pc, #192]	; (800c9b0 <__swsetup_r+0xc4>)
 800c8ee:	b570      	push	{r4, r5, r6, lr}
 800c8f0:	0005      	movs	r5, r0
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	000c      	movs	r4, r1
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d004      	beq.n	800c904 <__swsetup_r+0x18>
 800c8fa:	6a03      	ldr	r3, [r0, #32]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <__swsetup_r+0x18>
 800c900:	f7fd fefe 	bl	800a700 <__sinit>
 800c904:	230c      	movs	r3, #12
 800c906:	5ee2      	ldrsh	r2, [r4, r3]
 800c908:	b293      	uxth	r3, r2
 800c90a:	0711      	lsls	r1, r2, #28
 800c90c:	d423      	bmi.n	800c956 <__swsetup_r+0x6a>
 800c90e:	06d9      	lsls	r1, r3, #27
 800c910:	d407      	bmi.n	800c922 <__swsetup_r+0x36>
 800c912:	2309      	movs	r3, #9
 800c914:	2001      	movs	r0, #1
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	3337      	adds	r3, #55	; 0x37
 800c91a:	4313      	orrs	r3, r2
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	4240      	negs	r0, r0
 800c920:	bd70      	pop	{r4, r5, r6, pc}
 800c922:	075b      	lsls	r3, r3, #29
 800c924:	d513      	bpl.n	800c94e <__swsetup_r+0x62>
 800c926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c928:	2900      	cmp	r1, #0
 800c92a:	d008      	beq.n	800c93e <__swsetup_r+0x52>
 800c92c:	0023      	movs	r3, r4
 800c92e:	3344      	adds	r3, #68	; 0x44
 800c930:	4299      	cmp	r1, r3
 800c932:	d002      	beq.n	800c93a <__swsetup_r+0x4e>
 800c934:	0028      	movs	r0, r5
 800c936:	f7fe fecf 	bl	800b6d8 <_free_r>
 800c93a:	2300      	movs	r3, #0
 800c93c:	6363      	str	r3, [r4, #52]	; 0x34
 800c93e:	2224      	movs	r2, #36	; 0x24
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	4393      	bics	r3, r2
 800c944:	81a3      	strh	r3, [r4, #12]
 800c946:	2300      	movs	r3, #0
 800c948:	6063      	str	r3, [r4, #4]
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	2308      	movs	r3, #8
 800c950:	89a2      	ldrh	r2, [r4, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <__swsetup_r+0x88>
 800c95c:	21a0      	movs	r1, #160	; 0xa0
 800c95e:	2280      	movs	r2, #128	; 0x80
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	0089      	lsls	r1, r1, #2
 800c964:	0092      	lsls	r2, r2, #2
 800c966:	400b      	ands	r3, r1
 800c968:	4293      	cmp	r3, r2
 800c96a:	d003      	beq.n	800c974 <__swsetup_r+0x88>
 800c96c:	0021      	movs	r1, r4
 800c96e:	0028      	movs	r0, r5
 800c970:	f000 f892 	bl	800ca98 <__smakebuf_r>
 800c974:	220c      	movs	r2, #12
 800c976:	5ea3      	ldrsh	r3, [r4, r2]
 800c978:	2001      	movs	r0, #1
 800c97a:	001a      	movs	r2, r3
 800c97c:	b299      	uxth	r1, r3
 800c97e:	4002      	ands	r2, r0
 800c980:	4203      	tst	r3, r0
 800c982:	d00f      	beq.n	800c9a4 <__swsetup_r+0xb8>
 800c984:	2200      	movs	r2, #0
 800c986:	60a2      	str	r2, [r4, #8]
 800c988:	6962      	ldr	r2, [r4, #20]
 800c98a:	4252      	negs	r2, r2
 800c98c:	61a2      	str	r2, [r4, #24]
 800c98e:	2000      	movs	r0, #0
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	4282      	cmp	r2, r0
 800c994:	d1c4      	bne.n	800c920 <__swsetup_r+0x34>
 800c996:	0609      	lsls	r1, r1, #24
 800c998:	d5c2      	bpl.n	800c920 <__swsetup_r+0x34>
 800c99a:	2240      	movs	r2, #64	; 0x40
 800c99c:	4313      	orrs	r3, r2
 800c99e:	81a3      	strh	r3, [r4, #12]
 800c9a0:	3801      	subs	r0, #1
 800c9a2:	e7bd      	b.n	800c920 <__swsetup_r+0x34>
 800c9a4:	0788      	lsls	r0, r1, #30
 800c9a6:	d400      	bmi.n	800c9aa <__swsetup_r+0xbe>
 800c9a8:	6962      	ldr	r2, [r4, #20]
 800c9aa:	60a2      	str	r2, [r4, #8]
 800c9ac:	e7ef      	b.n	800c98e <__swsetup_r+0xa2>
 800c9ae:	46c0      	nop			; (mov r8, r8)
 800c9b0:	2000009c 	.word	0x2000009c

0800c9b4 <_raise_r>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	0004      	movs	r4, r0
 800c9b8:	000d      	movs	r5, r1
 800c9ba:	291f      	cmp	r1, #31
 800c9bc:	d904      	bls.n	800c9c8 <_raise_r+0x14>
 800c9be:	2316      	movs	r3, #22
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	4240      	negs	r0, r0
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d004      	beq.n	800c9d8 <_raise_r+0x24>
 800c9ce:	008a      	lsls	r2, r1, #2
 800c9d0:	189b      	adds	r3, r3, r2
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	d108      	bne.n	800c9ea <_raise_r+0x36>
 800c9d8:	0020      	movs	r0, r4
 800c9da:	f000 f831 	bl	800ca40 <_getpid_r>
 800c9de:	002a      	movs	r2, r5
 800c9e0:	0001      	movs	r1, r0
 800c9e2:	0020      	movs	r0, r4
 800c9e4:	f000 f81a 	bl	800ca1c <_kill_r>
 800c9e8:	e7ed      	b.n	800c9c6 <_raise_r+0x12>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	2a01      	cmp	r2, #1
 800c9ee:	d0ea      	beq.n	800c9c6 <_raise_r+0x12>
 800c9f0:	1c51      	adds	r1, r2, #1
 800c9f2:	d103      	bne.n	800c9fc <_raise_r+0x48>
 800c9f4:	2316      	movs	r3, #22
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	e7e4      	b.n	800c9c6 <_raise_r+0x12>
 800c9fc:	2400      	movs	r4, #0
 800c9fe:	0028      	movs	r0, r5
 800ca00:	601c      	str	r4, [r3, #0]
 800ca02:	4790      	blx	r2
 800ca04:	0020      	movs	r0, r4
 800ca06:	e7de      	b.n	800c9c6 <_raise_r+0x12>

0800ca08 <raise>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	4b03      	ldr	r3, [pc, #12]	; (800ca18 <raise+0x10>)
 800ca0c:	0001      	movs	r1, r0
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	f7ff ffd0 	bl	800c9b4 <_raise_r>
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	46c0      	nop			; (mov r8, r8)
 800ca18:	2000009c 	.word	0x2000009c

0800ca1c <_kill_r>:
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	b570      	push	{r4, r5, r6, lr}
 800ca20:	4d06      	ldr	r5, [pc, #24]	; (800ca3c <_kill_r+0x20>)
 800ca22:	0004      	movs	r4, r0
 800ca24:	0008      	movs	r0, r1
 800ca26:	0011      	movs	r1, r2
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	f7f8 f813 	bl	8004a54 <_kill>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d103      	bne.n	800ca3a <_kill_r+0x1e>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d000      	beq.n	800ca3a <_kill_r+0x1e>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	200009b4 	.word	0x200009b4

0800ca40 <_getpid_r>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	f7f8 f801 	bl	8004a48 <_getpid>
 800ca46:	bd10      	pop	{r4, pc}

0800ca48 <__swhatbuf_r>:
 800ca48:	b570      	push	{r4, r5, r6, lr}
 800ca4a:	000e      	movs	r6, r1
 800ca4c:	001d      	movs	r5, r3
 800ca4e:	230e      	movs	r3, #14
 800ca50:	5ec9      	ldrsh	r1, [r1, r3]
 800ca52:	0014      	movs	r4, r2
 800ca54:	b096      	sub	sp, #88	; 0x58
 800ca56:	2900      	cmp	r1, #0
 800ca58:	da0c      	bge.n	800ca74 <__swhatbuf_r+0x2c>
 800ca5a:	89b2      	ldrh	r2, [r6, #12]
 800ca5c:	2380      	movs	r3, #128	; 0x80
 800ca5e:	0011      	movs	r1, r2
 800ca60:	4019      	ands	r1, r3
 800ca62:	421a      	tst	r2, r3
 800ca64:	d013      	beq.n	800ca8e <__swhatbuf_r+0x46>
 800ca66:	2100      	movs	r1, #0
 800ca68:	3b40      	subs	r3, #64	; 0x40
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	6029      	str	r1, [r5, #0]
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	b016      	add	sp, #88	; 0x58
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	466a      	mov	r2, sp
 800ca76:	f000 f84d 	bl	800cb14 <_fstat_r>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	dbed      	blt.n	800ca5a <__swhatbuf_r+0x12>
 800ca7e:	23f0      	movs	r3, #240	; 0xf0
 800ca80:	9901      	ldr	r1, [sp, #4]
 800ca82:	021b      	lsls	r3, r3, #8
 800ca84:	4019      	ands	r1, r3
 800ca86:	4b03      	ldr	r3, [pc, #12]	; (800ca94 <__swhatbuf_r+0x4c>)
 800ca88:	18c9      	adds	r1, r1, r3
 800ca8a:	424b      	negs	r3, r1
 800ca8c:	4159      	adcs	r1, r3
 800ca8e:	2380      	movs	r3, #128	; 0x80
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	e7ea      	b.n	800ca6a <__swhatbuf_r+0x22>
 800ca94:	ffffe000 	.word	0xffffe000

0800ca98 <__smakebuf_r>:
 800ca98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca9a:	2602      	movs	r6, #2
 800ca9c:	898b      	ldrh	r3, [r1, #12]
 800ca9e:	0005      	movs	r5, r0
 800caa0:	000c      	movs	r4, r1
 800caa2:	4233      	tst	r3, r6
 800caa4:	d006      	beq.n	800cab4 <__smakebuf_r+0x1c>
 800caa6:	0023      	movs	r3, r4
 800caa8:	3347      	adds	r3, #71	; 0x47
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	2301      	movs	r3, #1
 800cab0:	6163      	str	r3, [r4, #20]
 800cab2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cab4:	466a      	mov	r2, sp
 800cab6:	ab01      	add	r3, sp, #4
 800cab8:	f7ff ffc6 	bl	800ca48 <__swhatbuf_r>
 800cabc:	9900      	ldr	r1, [sp, #0]
 800cabe:	0007      	movs	r7, r0
 800cac0:	0028      	movs	r0, r5
 800cac2:	f7fe fe7f 	bl	800b7c4 <_malloc_r>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d108      	bne.n	800cadc <__smakebuf_r+0x44>
 800caca:	220c      	movs	r2, #12
 800cacc:	5ea3      	ldrsh	r3, [r4, r2]
 800cace:	059a      	lsls	r2, r3, #22
 800cad0:	d4ef      	bmi.n	800cab2 <__smakebuf_r+0x1a>
 800cad2:	2203      	movs	r2, #3
 800cad4:	4393      	bics	r3, r2
 800cad6:	431e      	orrs	r6, r3
 800cad8:	81a6      	strh	r6, [r4, #12]
 800cada:	e7e4      	b.n	800caa6 <__smakebuf_r+0xe>
 800cadc:	2380      	movs	r3, #128	; 0x80
 800cade:	89a2      	ldrh	r2, [r4, #12]
 800cae0:	6020      	str	r0, [r4, #0]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	81a3      	strh	r3, [r4, #12]
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	6120      	str	r0, [r4, #16]
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00c      	beq.n	800cb0c <__smakebuf_r+0x74>
 800caf2:	0028      	movs	r0, r5
 800caf4:	230e      	movs	r3, #14
 800caf6:	5ee1      	ldrsh	r1, [r4, r3]
 800caf8:	f000 f81e 	bl	800cb38 <_isatty_r>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d005      	beq.n	800cb0c <__smakebuf_r+0x74>
 800cb00:	2303      	movs	r3, #3
 800cb02:	89a2      	ldrh	r2, [r4, #12]
 800cb04:	439a      	bics	r2, r3
 800cb06:	3b02      	subs	r3, #2
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	433b      	orrs	r3, r7
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	e7ce      	b.n	800cab2 <__smakebuf_r+0x1a>

0800cb14 <_fstat_r>:
 800cb14:	2300      	movs	r3, #0
 800cb16:	b570      	push	{r4, r5, r6, lr}
 800cb18:	4d06      	ldr	r5, [pc, #24]	; (800cb34 <_fstat_r+0x20>)
 800cb1a:	0004      	movs	r4, r0
 800cb1c:	0008      	movs	r0, r1
 800cb1e:	0011      	movs	r1, r2
 800cb20:	602b      	str	r3, [r5, #0]
 800cb22:	f7f7 fff6 	bl	8004b12 <_fstat>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d103      	bne.n	800cb32 <_fstat_r+0x1e>
 800cb2a:	682b      	ldr	r3, [r5, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d000      	beq.n	800cb32 <_fstat_r+0x1e>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	200009b4 	.word	0x200009b4

0800cb38 <_isatty_r>:
 800cb38:	2300      	movs	r3, #0
 800cb3a:	b570      	push	{r4, r5, r6, lr}
 800cb3c:	4d06      	ldr	r5, [pc, #24]	; (800cb58 <_isatty_r+0x20>)
 800cb3e:	0004      	movs	r4, r0
 800cb40:	0008      	movs	r0, r1
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	f7f7 fff3 	bl	8004b2e <_isatty>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d103      	bne.n	800cb54 <_isatty_r+0x1c>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d000      	beq.n	800cb54 <_isatty_r+0x1c>
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	200009b4 	.word	0x200009b4

0800cb5c <_init>:
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb62:	bc08      	pop	{r3}
 800cb64:	469e      	mov	lr, r3
 800cb66:	4770      	bx	lr

0800cb68 <_fini>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6e:	bc08      	pop	{r3}
 800cb70:	469e      	mov	lr, r3
 800cb72:	4770      	bx	lr
